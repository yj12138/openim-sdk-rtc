// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.27.1
// source: ffi.proto

package ffi

import (
	audio_frame "github.com/openimsdk/openim-rtc/proto/go/audio_frame"
	e2ee "github.com/openimsdk/openim-rtc/proto/go/e2ee"
	room "github.com/openimsdk/openim-rtc/proto/go/room"
	track "github.com/openimsdk/openim-rtc/proto/go/track"
	video_frame "github.com/openimsdk/openim-rtc/proto/go/video_frame"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogLevel int32

const (
	LogLevel_LOG_ERROR LogLevel = 0
	LogLevel_LOG_WARN  LogLevel = 1
	LogLevel_LOG_INFO  LogLevel = 2
	LogLevel_LOG_DEBUG LogLevel = 3
	LogLevel_LOG_TRACE LogLevel = 4
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_ERROR",
		1: "LOG_WARN",
		2: "LOG_INFO",
		3: "LOG_DEBUG",
		4: "LOG_TRACE",
	}
	LogLevel_value = map[string]int32{
		"LOG_ERROR": 0,
		"LOG_WARN":  1,
		"LOG_INFO":  2,
		"LOG_DEBUG": 3,
		"LOG_TRACE": 4,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_ffi_proto_enumTypes[0].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_ffi_proto_enumTypes[0]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_ffi_proto_rawDescGZIP(), []int{0}
}

// This is the input of livekit_ffi_request function
// We always expect a response (FFIResponse, even if it's empty)
type FfiRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*FfiRequest_Dispose
	//	*FfiRequest_Connect
	//	*FfiRequest_Disconnect
	//	*FfiRequest_PublishTrack
	//	*FfiRequest_UnpublishTrack
	//	*FfiRequest_PublishData
	//	*FfiRequest_SetSubscribed
	//	*FfiRequest_UpdateLocalMetadata
	//	*FfiRequest_UpdateLocalName
	//	*FfiRequest_GetSessionStats
	//	*FfiRequest_CreateVideoTrack
	//	*FfiRequest_CreateAudioTrack
	//	*FfiRequest_GetStats
	//	*FfiRequest_NewVideoStream
	//	*FfiRequest_NewVideoSource
	//	*FfiRequest_CaptureVideoFrame
	//	*FfiRequest_VideoConvert
	//	*FfiRequest_NewAudioStream
	//	*FfiRequest_NewAudioSource
	//	*FfiRequest_CaptureAudioFrame
	//	*FfiRequest_NewAudioResampler
	//	*FfiRequest_RemixAndResample
	//	*FfiRequest_E2Ee
	Message       isFfiRequest_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FfiRequest) Reset() {
	*x = FfiRequest{}
	mi := &file_ffi_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FfiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FfiRequest) ProtoMessage() {}

func (x *FfiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffi_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FfiRequest.ProtoReflect.Descriptor instead.
func (*FfiRequest) Descriptor() ([]byte, []int) {
	return file_ffi_proto_rawDescGZIP(), []int{0}
}

func (x *FfiRequest) GetMessage() isFfiRequest_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FfiRequest) GetDispose() *DisposeRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_Dispose); ok {
			return x.Dispose
		}
	}
	return nil
}

func (x *FfiRequest) GetConnect() *room.ConnectRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_Connect); ok {
			return x.Connect
		}
	}
	return nil
}

func (x *FfiRequest) GetDisconnect() *room.DisconnectRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_Disconnect); ok {
			return x.Disconnect
		}
	}
	return nil
}

func (x *FfiRequest) GetPublishTrack() *room.PublishTrackRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_PublishTrack); ok {
			return x.PublishTrack
		}
	}
	return nil
}

func (x *FfiRequest) GetUnpublishTrack() *room.UnpublishTrackRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_UnpublishTrack); ok {
			return x.UnpublishTrack
		}
	}
	return nil
}

func (x *FfiRequest) GetPublishData() *room.PublishDataRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_PublishData); ok {
			return x.PublishData
		}
	}
	return nil
}

func (x *FfiRequest) GetSetSubscribed() *room.SetSubscribedRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_SetSubscribed); ok {
			return x.SetSubscribed
		}
	}
	return nil
}

func (x *FfiRequest) GetUpdateLocalMetadata() *room.UpdateLocalMetadataRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_UpdateLocalMetadata); ok {
			return x.UpdateLocalMetadata
		}
	}
	return nil
}

func (x *FfiRequest) GetUpdateLocalName() *room.UpdateLocalNameRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_UpdateLocalName); ok {
			return x.UpdateLocalName
		}
	}
	return nil
}

func (x *FfiRequest) GetGetSessionStats() *room.GetSessionStatsRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_GetSessionStats); ok {
			return x.GetSessionStats
		}
	}
	return nil
}

func (x *FfiRequest) GetCreateVideoTrack() *track.CreateVideoTrackRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_CreateVideoTrack); ok {
			return x.CreateVideoTrack
		}
	}
	return nil
}

func (x *FfiRequest) GetCreateAudioTrack() *track.CreateAudioTrackRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_CreateAudioTrack); ok {
			return x.CreateAudioTrack
		}
	}
	return nil
}

func (x *FfiRequest) GetGetStats() *track.GetStatsRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_GetStats); ok {
			return x.GetStats
		}
	}
	return nil
}

func (x *FfiRequest) GetNewVideoStream() *video_frame.NewVideoStreamRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_NewVideoStream); ok {
			return x.NewVideoStream
		}
	}
	return nil
}

func (x *FfiRequest) GetNewVideoSource() *video_frame.NewVideoSourceRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_NewVideoSource); ok {
			return x.NewVideoSource
		}
	}
	return nil
}

func (x *FfiRequest) GetCaptureVideoFrame() *video_frame.CaptureVideoFrameRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_CaptureVideoFrame); ok {
			return x.CaptureVideoFrame
		}
	}
	return nil
}

func (x *FfiRequest) GetVideoConvert() *video_frame.VideoConvertRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_VideoConvert); ok {
			return x.VideoConvert
		}
	}
	return nil
}

func (x *FfiRequest) GetNewAudioStream() *audio_frame.NewAudioStreamRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_NewAudioStream); ok {
			return x.NewAudioStream
		}
	}
	return nil
}

func (x *FfiRequest) GetNewAudioSource() *audio_frame.NewAudioSourceRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_NewAudioSource); ok {
			return x.NewAudioSource
		}
	}
	return nil
}

func (x *FfiRequest) GetCaptureAudioFrame() *audio_frame.CaptureAudioFrameRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_CaptureAudioFrame); ok {
			return x.CaptureAudioFrame
		}
	}
	return nil
}

func (x *FfiRequest) GetNewAudioResampler() *audio_frame.NewAudioResamplerRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_NewAudioResampler); ok {
			return x.NewAudioResampler
		}
	}
	return nil
}

func (x *FfiRequest) GetRemixAndResample() *audio_frame.RemixAndResampleRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_RemixAndResample); ok {
			return x.RemixAndResample
		}
	}
	return nil
}

func (x *FfiRequest) GetE2Ee() *e2ee.E2EeRequest {
	if x != nil {
		if x, ok := x.Message.(*FfiRequest_E2Ee); ok {
			return x.E2Ee
		}
	}
	return nil
}

type isFfiRequest_Message interface {
	isFfiRequest_Message()
}

type FfiRequest_Dispose struct {
	Dispose *DisposeRequest `protobuf:"bytes,2,opt,name=dispose,proto3,oneof"`
}

type FfiRequest_Connect struct {
	// Room
	Connect *room.ConnectRequest `protobuf:"bytes,3,opt,name=connect,proto3,oneof"`
}

type FfiRequest_Disconnect struct {
	Disconnect *room.DisconnectRequest `protobuf:"bytes,4,opt,name=disconnect,proto3,oneof"`
}

type FfiRequest_PublishTrack struct {
	PublishTrack *room.PublishTrackRequest `protobuf:"bytes,5,opt,name=publish_track,json=publishTrack,proto3,oneof"`
}

type FfiRequest_UnpublishTrack struct {
	UnpublishTrack *room.UnpublishTrackRequest `protobuf:"bytes,6,opt,name=unpublish_track,json=unpublishTrack,proto3,oneof"`
}

type FfiRequest_PublishData struct {
	PublishData *room.PublishDataRequest `protobuf:"bytes,7,opt,name=publish_data,json=publishData,proto3,oneof"`
}

type FfiRequest_SetSubscribed struct {
	SetSubscribed *room.SetSubscribedRequest `protobuf:"bytes,8,opt,name=set_subscribed,json=setSubscribed,proto3,oneof"`
}

type FfiRequest_UpdateLocalMetadata struct {
	UpdateLocalMetadata *room.UpdateLocalMetadataRequest `protobuf:"bytes,9,opt,name=update_local_metadata,json=updateLocalMetadata,proto3,oneof"`
}

type FfiRequest_UpdateLocalName struct {
	UpdateLocalName *room.UpdateLocalNameRequest `protobuf:"bytes,10,opt,name=update_local_name,json=updateLocalName,proto3,oneof"`
}

type FfiRequest_GetSessionStats struct {
	GetSessionStats *room.GetSessionStatsRequest `protobuf:"bytes,11,opt,name=get_session_stats,json=getSessionStats,proto3,oneof"`
}

type FfiRequest_CreateVideoTrack struct {
	// Track
	CreateVideoTrack *track.CreateVideoTrackRequest `protobuf:"bytes,12,opt,name=create_video_track,json=createVideoTrack,proto3,oneof"`
}

type FfiRequest_CreateAudioTrack struct {
	CreateAudioTrack *track.CreateAudioTrackRequest `protobuf:"bytes,13,opt,name=create_audio_track,json=createAudioTrack,proto3,oneof"`
}

type FfiRequest_GetStats struct {
	GetStats *track.GetStatsRequest `protobuf:"bytes,14,opt,name=get_stats,json=getStats,proto3,oneof"`
}

type FfiRequest_NewVideoStream struct {
	// Video
	NewVideoStream *video_frame.NewVideoStreamRequest `protobuf:"bytes,16,opt,name=new_video_stream,json=newVideoStream,proto3,oneof"`
}

type FfiRequest_NewVideoSource struct {
	NewVideoSource *video_frame.NewVideoSourceRequest `protobuf:"bytes,17,opt,name=new_video_source,json=newVideoSource,proto3,oneof"`
}

type FfiRequest_CaptureVideoFrame struct {
	CaptureVideoFrame *video_frame.CaptureVideoFrameRequest `protobuf:"bytes,18,opt,name=capture_video_frame,json=captureVideoFrame,proto3,oneof"`
}

type FfiRequest_VideoConvert struct {
	VideoConvert *video_frame.VideoConvertRequest `protobuf:"bytes,19,opt,name=video_convert,json=videoConvert,proto3,oneof"`
}

type FfiRequest_NewAudioStream struct {
	// Audio
	NewAudioStream *audio_frame.NewAudioStreamRequest `protobuf:"bytes,22,opt,name=new_audio_stream,json=newAudioStream,proto3,oneof"`
}

type FfiRequest_NewAudioSource struct {
	NewAudioSource *audio_frame.NewAudioSourceRequest `protobuf:"bytes,23,opt,name=new_audio_source,json=newAudioSource,proto3,oneof"`
}

type FfiRequest_CaptureAudioFrame struct {
	CaptureAudioFrame *audio_frame.CaptureAudioFrameRequest `protobuf:"bytes,24,opt,name=capture_audio_frame,json=captureAudioFrame,proto3,oneof"`
}

type FfiRequest_NewAudioResampler struct {
	NewAudioResampler *audio_frame.NewAudioResamplerRequest `protobuf:"bytes,25,opt,name=new_audio_resampler,json=newAudioResampler,proto3,oneof"`
}

type FfiRequest_RemixAndResample struct {
	RemixAndResample *audio_frame.RemixAndResampleRequest `protobuf:"bytes,26,opt,name=remix_and_resample,json=remixAndResample,proto3,oneof"`
}

type FfiRequest_E2Ee struct {
	E2Ee *e2ee.E2EeRequest `protobuf:"bytes,27,opt,name=e2ee,proto3,oneof"`
}

func (*FfiRequest_Dispose) isFfiRequest_Message() {}

func (*FfiRequest_Connect) isFfiRequest_Message() {}

func (*FfiRequest_Disconnect) isFfiRequest_Message() {}

func (*FfiRequest_PublishTrack) isFfiRequest_Message() {}

func (*FfiRequest_UnpublishTrack) isFfiRequest_Message() {}

func (*FfiRequest_PublishData) isFfiRequest_Message() {}

func (*FfiRequest_SetSubscribed) isFfiRequest_Message() {}

func (*FfiRequest_UpdateLocalMetadata) isFfiRequest_Message() {}

func (*FfiRequest_UpdateLocalName) isFfiRequest_Message() {}

func (*FfiRequest_GetSessionStats) isFfiRequest_Message() {}

func (*FfiRequest_CreateVideoTrack) isFfiRequest_Message() {}

func (*FfiRequest_CreateAudioTrack) isFfiRequest_Message() {}

func (*FfiRequest_GetStats) isFfiRequest_Message() {}

func (*FfiRequest_NewVideoStream) isFfiRequest_Message() {}

func (*FfiRequest_NewVideoSource) isFfiRequest_Message() {}

func (*FfiRequest_CaptureVideoFrame) isFfiRequest_Message() {}

func (*FfiRequest_VideoConvert) isFfiRequest_Message() {}

func (*FfiRequest_NewAudioStream) isFfiRequest_Message() {}

func (*FfiRequest_NewAudioSource) isFfiRequest_Message() {}

func (*FfiRequest_CaptureAudioFrame) isFfiRequest_Message() {}

func (*FfiRequest_NewAudioResampler) isFfiRequest_Message() {}

func (*FfiRequest_RemixAndResample) isFfiRequest_Message() {}

func (*FfiRequest_E2Ee) isFfiRequest_Message() {}

// This is the output of livekit_ffi_request function.
type FfiResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*FfiResponse_Dispose
	//	*FfiResponse_Connect
	//	*FfiResponse_Disconnect
	//	*FfiResponse_PublishTrack
	//	*FfiResponse_UnpublishTrack
	//	*FfiResponse_PublishData
	//	*FfiResponse_SetSubscribed
	//	*FfiResponse_UpdateLocalMetadata
	//	*FfiResponse_UpdateLocalName
	//	*FfiResponse_GetSessionStats
	//	*FfiResponse_CreateVideoTrack
	//	*FfiResponse_CreateAudioTrack
	//	*FfiResponse_GetStats
	//	*FfiResponse_NewVideoStream
	//	*FfiResponse_NewVideoSource
	//	*FfiResponse_CaptureVideoFrame
	//	*FfiResponse_VideoConvert
	//	*FfiResponse_NewAudioStream
	//	*FfiResponse_NewAudioSource
	//	*FfiResponse_CaptureAudioFrame
	//	*FfiResponse_NewAudioResampler
	//	*FfiResponse_RemixAndResample
	//	*FfiResponse_E2Ee
	Message       isFfiResponse_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FfiResponse) Reset() {
	*x = FfiResponse{}
	mi := &file_ffi_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FfiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FfiResponse) ProtoMessage() {}

func (x *FfiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ffi_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FfiResponse.ProtoReflect.Descriptor instead.
func (*FfiResponse) Descriptor() ([]byte, []int) {
	return file_ffi_proto_rawDescGZIP(), []int{1}
}

func (x *FfiResponse) GetMessage() isFfiResponse_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FfiResponse) GetDispose() *DisposeResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_Dispose); ok {
			return x.Dispose
		}
	}
	return nil
}

func (x *FfiResponse) GetConnect() *room.ConnectResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_Connect); ok {
			return x.Connect
		}
	}
	return nil
}

func (x *FfiResponse) GetDisconnect() *room.DisconnectResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_Disconnect); ok {
			return x.Disconnect
		}
	}
	return nil
}

func (x *FfiResponse) GetPublishTrack() *room.PublishTrackResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_PublishTrack); ok {
			return x.PublishTrack
		}
	}
	return nil
}

func (x *FfiResponse) GetUnpublishTrack() *room.UnpublishTrackResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_UnpublishTrack); ok {
			return x.UnpublishTrack
		}
	}
	return nil
}

func (x *FfiResponse) GetPublishData() *room.PublishDataResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_PublishData); ok {
			return x.PublishData
		}
	}
	return nil
}

func (x *FfiResponse) GetSetSubscribed() *room.SetSubscribedResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_SetSubscribed); ok {
			return x.SetSubscribed
		}
	}
	return nil
}

func (x *FfiResponse) GetUpdateLocalMetadata() *room.UpdateLocalMetadataResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_UpdateLocalMetadata); ok {
			return x.UpdateLocalMetadata
		}
	}
	return nil
}

func (x *FfiResponse) GetUpdateLocalName() *room.UpdateLocalNameResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_UpdateLocalName); ok {
			return x.UpdateLocalName
		}
	}
	return nil
}

func (x *FfiResponse) GetGetSessionStats() *room.GetSessionStatsResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_GetSessionStats); ok {
			return x.GetSessionStats
		}
	}
	return nil
}

func (x *FfiResponse) GetCreateVideoTrack() *track.CreateVideoTrackResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_CreateVideoTrack); ok {
			return x.CreateVideoTrack
		}
	}
	return nil
}

func (x *FfiResponse) GetCreateAudioTrack() *track.CreateAudioTrackResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_CreateAudioTrack); ok {
			return x.CreateAudioTrack
		}
	}
	return nil
}

func (x *FfiResponse) GetGetStats() *track.GetStatsResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_GetStats); ok {
			return x.GetStats
		}
	}
	return nil
}

func (x *FfiResponse) GetNewVideoStream() *video_frame.NewVideoStreamResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_NewVideoStream); ok {
			return x.NewVideoStream
		}
	}
	return nil
}

func (x *FfiResponse) GetNewVideoSource() *video_frame.NewVideoSourceResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_NewVideoSource); ok {
			return x.NewVideoSource
		}
	}
	return nil
}

func (x *FfiResponse) GetCaptureVideoFrame() *video_frame.CaptureVideoFrameResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_CaptureVideoFrame); ok {
			return x.CaptureVideoFrame
		}
	}
	return nil
}

func (x *FfiResponse) GetVideoConvert() *video_frame.VideoConvertResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_VideoConvert); ok {
			return x.VideoConvert
		}
	}
	return nil
}

func (x *FfiResponse) GetNewAudioStream() *audio_frame.NewAudioStreamResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_NewAudioStream); ok {
			return x.NewAudioStream
		}
	}
	return nil
}

func (x *FfiResponse) GetNewAudioSource() *audio_frame.NewAudioSourceResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_NewAudioSource); ok {
			return x.NewAudioSource
		}
	}
	return nil
}

func (x *FfiResponse) GetCaptureAudioFrame() *audio_frame.CaptureAudioFrameResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_CaptureAudioFrame); ok {
			return x.CaptureAudioFrame
		}
	}
	return nil
}

func (x *FfiResponse) GetNewAudioResampler() *audio_frame.NewAudioResamplerResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_NewAudioResampler); ok {
			return x.NewAudioResampler
		}
	}
	return nil
}

func (x *FfiResponse) GetRemixAndResample() *audio_frame.RemixAndResampleResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_RemixAndResample); ok {
			return x.RemixAndResample
		}
	}
	return nil
}

func (x *FfiResponse) GetE2Ee() *e2ee.E2EeResponse {
	if x != nil {
		if x, ok := x.Message.(*FfiResponse_E2Ee); ok {
			return x.E2Ee
		}
	}
	return nil
}

type isFfiResponse_Message interface {
	isFfiResponse_Message()
}

type FfiResponse_Dispose struct {
	Dispose *DisposeResponse `protobuf:"bytes,2,opt,name=dispose,proto3,oneof"`
}

type FfiResponse_Connect struct {
	// Room
	Connect *room.ConnectResponse `protobuf:"bytes,3,opt,name=connect,proto3,oneof"`
}

type FfiResponse_Disconnect struct {
	Disconnect *room.DisconnectResponse `protobuf:"bytes,4,opt,name=disconnect,proto3,oneof"`
}

type FfiResponse_PublishTrack struct {
	PublishTrack *room.PublishTrackResponse `protobuf:"bytes,5,opt,name=publish_track,json=publishTrack,proto3,oneof"`
}

type FfiResponse_UnpublishTrack struct {
	UnpublishTrack *room.UnpublishTrackResponse `protobuf:"bytes,6,opt,name=unpublish_track,json=unpublishTrack,proto3,oneof"`
}

type FfiResponse_PublishData struct {
	PublishData *room.PublishDataResponse `protobuf:"bytes,7,opt,name=publish_data,json=publishData,proto3,oneof"`
}

type FfiResponse_SetSubscribed struct {
	SetSubscribed *room.SetSubscribedResponse `protobuf:"bytes,8,opt,name=set_subscribed,json=setSubscribed,proto3,oneof"`
}

type FfiResponse_UpdateLocalMetadata struct {
	UpdateLocalMetadata *room.UpdateLocalMetadataResponse `protobuf:"bytes,9,opt,name=update_local_metadata,json=updateLocalMetadata,proto3,oneof"`
}

type FfiResponse_UpdateLocalName struct {
	UpdateLocalName *room.UpdateLocalNameResponse `protobuf:"bytes,10,opt,name=update_local_name,json=updateLocalName,proto3,oneof"`
}

type FfiResponse_GetSessionStats struct {
	GetSessionStats *room.GetSessionStatsResponse `protobuf:"bytes,11,opt,name=get_session_stats,json=getSessionStats,proto3,oneof"`
}

type FfiResponse_CreateVideoTrack struct {
	// Track
	CreateVideoTrack *track.CreateVideoTrackResponse `protobuf:"bytes,12,opt,name=create_video_track,json=createVideoTrack,proto3,oneof"`
}

type FfiResponse_CreateAudioTrack struct {
	CreateAudioTrack *track.CreateAudioTrackResponse `protobuf:"bytes,13,opt,name=create_audio_track,json=createAudioTrack,proto3,oneof"`
}

type FfiResponse_GetStats struct {
	GetStats *track.GetStatsResponse `protobuf:"bytes,14,opt,name=get_stats,json=getStats,proto3,oneof"`
}

type FfiResponse_NewVideoStream struct {
	// Video
	NewVideoStream *video_frame.NewVideoStreamResponse `protobuf:"bytes,16,opt,name=new_video_stream,json=newVideoStream,proto3,oneof"`
}

type FfiResponse_NewVideoSource struct {
	NewVideoSource *video_frame.NewVideoSourceResponse `protobuf:"bytes,17,opt,name=new_video_source,json=newVideoSource,proto3,oneof"`
}

type FfiResponse_CaptureVideoFrame struct {
	CaptureVideoFrame *video_frame.CaptureVideoFrameResponse `protobuf:"bytes,18,opt,name=capture_video_frame,json=captureVideoFrame,proto3,oneof"`
}

type FfiResponse_VideoConvert struct {
	VideoConvert *video_frame.VideoConvertResponse `protobuf:"bytes,19,opt,name=video_convert,json=videoConvert,proto3,oneof"`
}

type FfiResponse_NewAudioStream struct {
	// Audio
	NewAudioStream *audio_frame.NewAudioStreamResponse `protobuf:"bytes,22,opt,name=new_audio_stream,json=newAudioStream,proto3,oneof"`
}

type FfiResponse_NewAudioSource struct {
	NewAudioSource *audio_frame.NewAudioSourceResponse `protobuf:"bytes,23,opt,name=new_audio_source,json=newAudioSource,proto3,oneof"`
}

type FfiResponse_CaptureAudioFrame struct {
	CaptureAudioFrame *audio_frame.CaptureAudioFrameResponse `protobuf:"bytes,24,opt,name=capture_audio_frame,json=captureAudioFrame,proto3,oneof"`
}

type FfiResponse_NewAudioResampler struct {
	NewAudioResampler *audio_frame.NewAudioResamplerResponse `protobuf:"bytes,25,opt,name=new_audio_resampler,json=newAudioResampler,proto3,oneof"`
}

type FfiResponse_RemixAndResample struct {
	RemixAndResample *audio_frame.RemixAndResampleResponse `protobuf:"bytes,26,opt,name=remix_and_resample,json=remixAndResample,proto3,oneof"`
}

type FfiResponse_E2Ee struct {
	E2Ee *e2ee.E2EeResponse `protobuf:"bytes,27,opt,name=e2ee,proto3,oneof"`
}

func (*FfiResponse_Dispose) isFfiResponse_Message() {}

func (*FfiResponse_Connect) isFfiResponse_Message() {}

func (*FfiResponse_Disconnect) isFfiResponse_Message() {}

func (*FfiResponse_PublishTrack) isFfiResponse_Message() {}

func (*FfiResponse_UnpublishTrack) isFfiResponse_Message() {}

func (*FfiResponse_PublishData) isFfiResponse_Message() {}

func (*FfiResponse_SetSubscribed) isFfiResponse_Message() {}

func (*FfiResponse_UpdateLocalMetadata) isFfiResponse_Message() {}

func (*FfiResponse_UpdateLocalName) isFfiResponse_Message() {}

func (*FfiResponse_GetSessionStats) isFfiResponse_Message() {}

func (*FfiResponse_CreateVideoTrack) isFfiResponse_Message() {}

func (*FfiResponse_CreateAudioTrack) isFfiResponse_Message() {}

func (*FfiResponse_GetStats) isFfiResponse_Message() {}

func (*FfiResponse_NewVideoStream) isFfiResponse_Message() {}

func (*FfiResponse_NewVideoSource) isFfiResponse_Message() {}

func (*FfiResponse_CaptureVideoFrame) isFfiResponse_Message() {}

func (*FfiResponse_VideoConvert) isFfiResponse_Message() {}

func (*FfiResponse_NewAudioStream) isFfiResponse_Message() {}

func (*FfiResponse_NewAudioSource) isFfiResponse_Message() {}

func (*FfiResponse_CaptureAudioFrame) isFfiResponse_Message() {}

func (*FfiResponse_NewAudioResampler) isFfiResponse_Message() {}

func (*FfiResponse_RemixAndResample) isFfiResponse_Message() {}

func (*FfiResponse_E2Ee) isFfiResponse_Message() {}

// To minimize complexity, participant events are not included in the protocol.
// It is easily deducible from the room events and it turned out that is is
// easier to implement on the ffi client side.
type FfiEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*FfiEvent_RoomEvent
	//	*FfiEvent_TrackEvent
	//	*FfiEvent_VideoStreamEvent
	//	*FfiEvent_AudioStreamEvent
	//	*FfiEvent_Connect
	//	*FfiEvent_Disconnect
	//	*FfiEvent_Dispose
	//	*FfiEvent_PublishTrack
	//	*FfiEvent_UnpublishTrack
	//	*FfiEvent_PublishData
	//	*FfiEvent_CaptureAudioFrame
	//	*FfiEvent_UpdateLocalMetadata
	//	*FfiEvent_UpdateLocalName
	//	*FfiEvent_GetStats
	//	*FfiEvent_Logs
	//	*FfiEvent_GetSessionStats
	//	*FfiEvent_Panic
	Message       isFfiEvent_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FfiEvent) Reset() {
	*x = FfiEvent{}
	mi := &file_ffi_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FfiEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FfiEvent) ProtoMessage() {}

func (x *FfiEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ffi_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FfiEvent.ProtoReflect.Descriptor instead.
func (*FfiEvent) Descriptor() ([]byte, []int) {
	return file_ffi_proto_rawDescGZIP(), []int{2}
}

func (x *FfiEvent) GetMessage() isFfiEvent_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FfiEvent) GetRoomEvent() *room.RoomEvent {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_RoomEvent); ok {
			return x.RoomEvent
		}
	}
	return nil
}

func (x *FfiEvent) GetTrackEvent() *track.TrackEvent {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_TrackEvent); ok {
			return x.TrackEvent
		}
	}
	return nil
}

func (x *FfiEvent) GetVideoStreamEvent() *video_frame.VideoStreamEvent {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_VideoStreamEvent); ok {
			return x.VideoStreamEvent
		}
	}
	return nil
}

func (x *FfiEvent) GetAudioStreamEvent() *audio_frame.AudioStreamEvent {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_AudioStreamEvent); ok {
			return x.AudioStreamEvent
		}
	}
	return nil
}

func (x *FfiEvent) GetConnect() *room.ConnectCallback {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_Connect); ok {
			return x.Connect
		}
	}
	return nil
}

func (x *FfiEvent) GetDisconnect() *room.DisconnectCallback {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_Disconnect); ok {
			return x.Disconnect
		}
	}
	return nil
}

func (x *FfiEvent) GetDispose() *DisposeCallback {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_Dispose); ok {
			return x.Dispose
		}
	}
	return nil
}

func (x *FfiEvent) GetPublishTrack() *room.PublishTrackCallback {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_PublishTrack); ok {
			return x.PublishTrack
		}
	}
	return nil
}

func (x *FfiEvent) GetUnpublishTrack() *room.UnpublishTrackCallback {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_UnpublishTrack); ok {
			return x.UnpublishTrack
		}
	}
	return nil
}

func (x *FfiEvent) GetPublishData() *room.PublishDataCallback {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_PublishData); ok {
			return x.PublishData
		}
	}
	return nil
}

func (x *FfiEvent) GetCaptureAudioFrame() *audio_frame.CaptureAudioFrameCallback {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_CaptureAudioFrame); ok {
			return x.CaptureAudioFrame
		}
	}
	return nil
}

func (x *FfiEvent) GetUpdateLocalMetadata() *room.UpdateLocalMetadataCallback {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_UpdateLocalMetadata); ok {
			return x.UpdateLocalMetadata
		}
	}
	return nil
}

func (x *FfiEvent) GetUpdateLocalName() *room.UpdateLocalNameCallback {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_UpdateLocalName); ok {
			return x.UpdateLocalName
		}
	}
	return nil
}

func (x *FfiEvent) GetGetStats() *track.GetStatsCallback {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_GetStats); ok {
			return x.GetStats
		}
	}
	return nil
}

func (x *FfiEvent) GetLogs() *LogBatch {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_Logs); ok {
			return x.Logs
		}
	}
	return nil
}

func (x *FfiEvent) GetGetSessionStats() *room.GetSessionStatsCallback {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_GetSessionStats); ok {
			return x.GetSessionStats
		}
	}
	return nil
}

func (x *FfiEvent) GetPanic() *Panic {
	if x != nil {
		if x, ok := x.Message.(*FfiEvent_Panic); ok {
			return x.Panic
		}
	}
	return nil
}

type isFfiEvent_Message interface {
	isFfiEvent_Message()
}

type FfiEvent_RoomEvent struct {
	RoomEvent *room.RoomEvent `protobuf:"bytes,1,opt,name=room_event,json=roomEvent,proto3,oneof"`
}

type FfiEvent_TrackEvent struct {
	TrackEvent *track.TrackEvent `protobuf:"bytes,2,opt,name=track_event,json=trackEvent,proto3,oneof"`
}

type FfiEvent_VideoStreamEvent struct {
	VideoStreamEvent *video_frame.VideoStreamEvent `protobuf:"bytes,3,opt,name=video_stream_event,json=videoStreamEvent,proto3,oneof"`
}

type FfiEvent_AudioStreamEvent struct {
	AudioStreamEvent *audio_frame.AudioStreamEvent `protobuf:"bytes,4,opt,name=audio_stream_event,json=audioStreamEvent,proto3,oneof"`
}

type FfiEvent_Connect struct {
	Connect *room.ConnectCallback `protobuf:"bytes,5,opt,name=connect,proto3,oneof"`
}

type FfiEvent_Disconnect struct {
	Disconnect *room.DisconnectCallback `protobuf:"bytes,6,opt,name=disconnect,proto3,oneof"`
}

type FfiEvent_Dispose struct {
	Dispose *DisposeCallback `protobuf:"bytes,7,opt,name=dispose,proto3,oneof"`
}

type FfiEvent_PublishTrack struct {
	PublishTrack *room.PublishTrackCallback `protobuf:"bytes,8,opt,name=publish_track,json=publishTrack,proto3,oneof"`
}

type FfiEvent_UnpublishTrack struct {
	UnpublishTrack *room.UnpublishTrackCallback `protobuf:"bytes,9,opt,name=unpublish_track,json=unpublishTrack,proto3,oneof"`
}

type FfiEvent_PublishData struct {
	PublishData *room.PublishDataCallback `protobuf:"bytes,10,opt,name=publish_data,json=publishData,proto3,oneof"`
}

type FfiEvent_CaptureAudioFrame struct {
	CaptureAudioFrame *audio_frame.CaptureAudioFrameCallback `protobuf:"bytes,11,opt,name=capture_audio_frame,json=captureAudioFrame,proto3,oneof"`
}

type FfiEvent_UpdateLocalMetadata struct {
	UpdateLocalMetadata *room.UpdateLocalMetadataCallback `protobuf:"bytes,12,opt,name=update_local_metadata,json=updateLocalMetadata,proto3,oneof"`
}

type FfiEvent_UpdateLocalName struct {
	UpdateLocalName *room.UpdateLocalNameCallback `protobuf:"bytes,13,opt,name=update_local_name,json=updateLocalName,proto3,oneof"`
}

type FfiEvent_GetStats struct {
	GetStats *track.GetStatsCallback `protobuf:"bytes,14,opt,name=get_stats,json=getStats,proto3,oneof"`
}

type FfiEvent_Logs struct {
	Logs *LogBatch `protobuf:"bytes,15,opt,name=logs,proto3,oneof"`
}

type FfiEvent_GetSessionStats struct {
	GetSessionStats *room.GetSessionStatsCallback `protobuf:"bytes,16,opt,name=get_session_stats,json=getSessionStats,proto3,oneof"`
}

type FfiEvent_Panic struct {
	Panic *Panic `protobuf:"bytes,17,opt,name=panic,proto3,oneof"`
}

func (*FfiEvent_RoomEvent) isFfiEvent_Message() {}

func (*FfiEvent_TrackEvent) isFfiEvent_Message() {}

func (*FfiEvent_VideoStreamEvent) isFfiEvent_Message() {}

func (*FfiEvent_AudioStreamEvent) isFfiEvent_Message() {}

func (*FfiEvent_Connect) isFfiEvent_Message() {}

func (*FfiEvent_Disconnect) isFfiEvent_Message() {}

func (*FfiEvent_Dispose) isFfiEvent_Message() {}

func (*FfiEvent_PublishTrack) isFfiEvent_Message() {}

func (*FfiEvent_UnpublishTrack) isFfiEvent_Message() {}

func (*FfiEvent_PublishData) isFfiEvent_Message() {}

func (*FfiEvent_CaptureAudioFrame) isFfiEvent_Message() {}

func (*FfiEvent_UpdateLocalMetadata) isFfiEvent_Message() {}

func (*FfiEvent_UpdateLocalName) isFfiEvent_Message() {}

func (*FfiEvent_GetStats) isFfiEvent_Message() {}

func (*FfiEvent_Logs) isFfiEvent_Message() {}

func (*FfiEvent_GetSessionStats) isFfiEvent_Message() {}

func (*FfiEvent_Panic) isFfiEvent_Message() {}

// Stop all rooms synchronously (Do we need async here?).
// e.g: This is used for the Unity Editor after each assemblies reload.
// TODO(theomonnom): Implement a debug mode where we can find all leaked
// handles?
type DisposeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Async         bool                   `protobuf:"varint,1,opt,name=async,proto3" json:"async"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisposeRequest) Reset() {
	*x = DisposeRequest{}
	mi := &file_ffi_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisposeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisposeRequest) ProtoMessage() {}

func (x *DisposeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ffi_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisposeRequest.ProtoReflect.Descriptor instead.
func (*DisposeRequest) Descriptor() ([]byte, []int) {
	return file_ffi_proto_rawDescGZIP(), []int{3}
}

func (x *DisposeRequest) GetAsync() bool {
	if x != nil {
		return x.Async
	}
	return false
}

type DisposeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"` // None if sync
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisposeResponse) Reset() {
	*x = DisposeResponse{}
	mi := &file_ffi_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisposeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisposeResponse) ProtoMessage() {}

func (x *DisposeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ffi_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisposeResponse.ProtoReflect.Descriptor instead.
func (*DisposeResponse) Descriptor() ([]byte, []int) {
	return file_ffi_proto_rawDescGZIP(), []int{4}
}

func (x *DisposeResponse) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

type DisposeCallback struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisposeCallback) Reset() {
	*x = DisposeCallback{}
	mi := &file_ffi_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisposeCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisposeCallback) ProtoMessage() {}

func (x *DisposeCallback) ProtoReflect() protoreflect.Message {
	mi := &file_ffi_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisposeCallback.ProtoReflect.Descriptor instead.
func (*DisposeCallback) Descriptor() ([]byte, []int) {
	return file_ffi_proto_rawDescGZIP(), []int{5}
}

func (x *DisposeCallback) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

type LogRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         LogLevel               `protobuf:"varint,1,opt,name=level,proto3,enum=livekit.proto.LogLevel" json:"level"`
	Target        string                 `protobuf:"bytes,2,opt,name=target,proto3" json:"target"` // e.g "livekit", "libwebrtc", "tokio-tungstenite", etc...
	ModulePath    string                 `protobuf:"bytes,3,opt,name=module_path,json=modulePath,proto3" json:"module_path"`
	File          string                 `protobuf:"bytes,4,opt,name=file,proto3" json:"file"`
	Line          uint32                 `protobuf:"varint,5,opt,name=line,proto3" json:"line"`
	Message       string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	mi := &file_ffi_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ffi_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_ffi_proto_rawDescGZIP(), []int{6}
}

func (x *LogRecord) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_LOG_ERROR
}

func (x *LogRecord) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *LogRecord) GetModulePath() string {
	if x != nil {
		return x.ModulePath
	}
	return ""
}

func (x *LogRecord) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *LogRecord) GetLine() uint32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *LogRecord) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type LogBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*LogRecord           `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogBatch) Reset() {
	*x = LogBatch{}
	mi := &file_ffi_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogBatch) ProtoMessage() {}

func (x *LogBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ffi_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogBatch.ProtoReflect.Descriptor instead.
func (*LogBatch) Descriptor() ([]byte, []int) {
	return file_ffi_proto_rawDescGZIP(), []int{7}
}

func (x *LogBatch) GetRecords() []*LogRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type Panic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Panic) Reset() {
	*x = Panic{}
	mi := &file_ffi_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Panic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Panic) ProtoMessage() {}

func (x *Panic) ProtoReflect() protoreflect.Message {
	mi := &file_ffi_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Panic.ProtoReflect.Descriptor instead.
func (*Panic) Descriptor() ([]byte, []int) {
	return file_ffi_proto_rawDescGZIP(), []int{8}
}

func (x *Panic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_ffi_proto protoreflect.FileDescriptor

var file_ffi_proto_rawDesc = []byte{
	0x0a, 0x09, 0x66, 0x66, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x65, 0x32, 0x65, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x0e, 0x0a, 0x0a, 0x46, 0x66, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x49,
	0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x0f, 0x75, 0x6e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x12, 0x5f, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x53, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x09, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x6e, 0x65,
	0x77, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x65,
	0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x50, 0x0a, 0x10,
	0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x6e, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x59,
	0x0a, 0x13, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x50, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x65, 0x77,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x56,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x78,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x65, 0x32, 0x65, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x32, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x32, 0x65, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xc3, 0x0e, 0x0a, 0x0b, 0x46, 0x66, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x12, 0x4a, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x0f,
	0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x47,
	0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54,
	0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x57, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x51, 0x0a, 0x10, 0x6e, 0x65, 0x77,
	0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x65,
	0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x13,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x51, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x12, 0x57, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x6d, 0x69, 0x78, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x69, 0x78,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x65,
	0x32, 0x65, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x32, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x65, 0x32, 0x65, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdb, 0x09, 0x0a, 0x08, 0x46, 0x66,
	0x69, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x4f, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x4f, 0x0a, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x0f, 0x75, 0x6e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x47, 0x0a, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x11,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x60, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x13,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x08, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61,
	0x6e, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x22,
	0x2c, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x2c, 0x0a,
	0x0f, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x09,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3e, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x32, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x21, 0x0a, 0x05, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x53, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x47, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x04, 0x42, 0x3e, 0x5a, 0x2c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x73, 0x64, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2d, 0x72, 0x74, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x66, 0x69, 0xaa, 0x02, 0x0d, 0x4c, 0x69,
	0x76, 0x65, 0x4b, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ffi_proto_rawDescOnce sync.Once
	file_ffi_proto_rawDescData = file_ffi_proto_rawDesc
)

func file_ffi_proto_rawDescGZIP() []byte {
	file_ffi_proto_rawDescOnce.Do(func() {
		file_ffi_proto_rawDescData = protoimpl.X.CompressGZIP(file_ffi_proto_rawDescData)
	})
	return file_ffi_proto_rawDescData
}

var file_ffi_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ffi_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ffi_proto_goTypes = []any{
	(LogLevel)(0),                                 // 0: livekit.proto.LogLevel
	(*FfiRequest)(nil),                            // 1: livekit.proto.FfiRequest
	(*FfiResponse)(nil),                           // 2: livekit.proto.FfiResponse
	(*FfiEvent)(nil),                              // 3: livekit.proto.FfiEvent
	(*DisposeRequest)(nil),                        // 4: livekit.proto.DisposeRequest
	(*DisposeResponse)(nil),                       // 5: livekit.proto.DisposeResponse
	(*DisposeCallback)(nil),                       // 6: livekit.proto.DisposeCallback
	(*LogRecord)(nil),                             // 7: livekit.proto.LogRecord
	(*LogBatch)(nil),                              // 8: livekit.proto.LogBatch
	(*Panic)(nil),                                 // 9: livekit.proto.Panic
	(*room.ConnectRequest)(nil),                   // 10: livekit.proto.ConnectRequest
	(*room.DisconnectRequest)(nil),                // 11: livekit.proto.DisconnectRequest
	(*room.PublishTrackRequest)(nil),              // 12: livekit.proto.PublishTrackRequest
	(*room.UnpublishTrackRequest)(nil),            // 13: livekit.proto.UnpublishTrackRequest
	(*room.PublishDataRequest)(nil),               // 14: livekit.proto.PublishDataRequest
	(*room.SetSubscribedRequest)(nil),             // 15: livekit.proto.SetSubscribedRequest
	(*room.UpdateLocalMetadataRequest)(nil),       // 16: livekit.proto.UpdateLocalMetadataRequest
	(*room.UpdateLocalNameRequest)(nil),           // 17: livekit.proto.UpdateLocalNameRequest
	(*room.GetSessionStatsRequest)(nil),           // 18: livekit.proto.GetSessionStatsRequest
	(*track.CreateVideoTrackRequest)(nil),         // 19: livekit.proto.CreateVideoTrackRequest
	(*track.CreateAudioTrackRequest)(nil),         // 20: livekit.proto.CreateAudioTrackRequest
	(*track.GetStatsRequest)(nil),                 // 21: livekit.proto.GetStatsRequest
	(*video_frame.NewVideoStreamRequest)(nil),     // 22: livekit.proto.NewVideoStreamRequest
	(*video_frame.NewVideoSourceRequest)(nil),     // 23: livekit.proto.NewVideoSourceRequest
	(*video_frame.CaptureVideoFrameRequest)(nil),  // 24: livekit.proto.CaptureVideoFrameRequest
	(*video_frame.VideoConvertRequest)(nil),       // 25: livekit.proto.VideoConvertRequest
	(*audio_frame.NewAudioStreamRequest)(nil),     // 26: livekit.proto.NewAudioStreamRequest
	(*audio_frame.NewAudioSourceRequest)(nil),     // 27: livekit.proto.NewAudioSourceRequest
	(*audio_frame.CaptureAudioFrameRequest)(nil),  // 28: livekit.proto.CaptureAudioFrameRequest
	(*audio_frame.NewAudioResamplerRequest)(nil),  // 29: livekit.proto.NewAudioResamplerRequest
	(*audio_frame.RemixAndResampleRequest)(nil),   // 30: livekit.proto.RemixAndResampleRequest
	(*e2ee.E2EeRequest)(nil),                      // 31: livekit.proto.E2eeRequest
	(*room.ConnectResponse)(nil),                  // 32: livekit.proto.ConnectResponse
	(*room.DisconnectResponse)(nil),               // 33: livekit.proto.DisconnectResponse
	(*room.PublishTrackResponse)(nil),             // 34: livekit.proto.PublishTrackResponse
	(*room.UnpublishTrackResponse)(nil),           // 35: livekit.proto.UnpublishTrackResponse
	(*room.PublishDataResponse)(nil),              // 36: livekit.proto.PublishDataResponse
	(*room.SetSubscribedResponse)(nil),            // 37: livekit.proto.SetSubscribedResponse
	(*room.UpdateLocalMetadataResponse)(nil),      // 38: livekit.proto.UpdateLocalMetadataResponse
	(*room.UpdateLocalNameResponse)(nil),          // 39: livekit.proto.UpdateLocalNameResponse
	(*room.GetSessionStatsResponse)(nil),          // 40: livekit.proto.GetSessionStatsResponse
	(*track.CreateVideoTrackResponse)(nil),        // 41: livekit.proto.CreateVideoTrackResponse
	(*track.CreateAudioTrackResponse)(nil),        // 42: livekit.proto.CreateAudioTrackResponse
	(*track.GetStatsResponse)(nil),                // 43: livekit.proto.GetStatsResponse
	(*video_frame.NewVideoStreamResponse)(nil),    // 44: livekit.proto.NewVideoStreamResponse
	(*video_frame.NewVideoSourceResponse)(nil),    // 45: livekit.proto.NewVideoSourceResponse
	(*video_frame.CaptureVideoFrameResponse)(nil), // 46: livekit.proto.CaptureVideoFrameResponse
	(*video_frame.VideoConvertResponse)(nil),      // 47: livekit.proto.VideoConvertResponse
	(*audio_frame.NewAudioStreamResponse)(nil),    // 48: livekit.proto.NewAudioStreamResponse
	(*audio_frame.NewAudioSourceResponse)(nil),    // 49: livekit.proto.NewAudioSourceResponse
	(*audio_frame.CaptureAudioFrameResponse)(nil), // 50: livekit.proto.CaptureAudioFrameResponse
	(*audio_frame.NewAudioResamplerResponse)(nil), // 51: livekit.proto.NewAudioResamplerResponse
	(*audio_frame.RemixAndResampleResponse)(nil),  // 52: livekit.proto.RemixAndResampleResponse
	(*e2ee.E2EeResponse)(nil),                     // 53: livekit.proto.E2eeResponse
	(*room.RoomEvent)(nil),                        // 54: livekit.proto.RoomEvent
	(*track.TrackEvent)(nil),                      // 55: livekit.proto.TrackEvent
	(*video_frame.VideoStreamEvent)(nil),          // 56: livekit.proto.VideoStreamEvent
	(*audio_frame.AudioStreamEvent)(nil),          // 57: livekit.proto.AudioStreamEvent
	(*room.ConnectCallback)(nil),                  // 58: livekit.proto.ConnectCallback
	(*room.DisconnectCallback)(nil),               // 59: livekit.proto.DisconnectCallback
	(*room.PublishTrackCallback)(nil),             // 60: livekit.proto.PublishTrackCallback
	(*room.UnpublishTrackCallback)(nil),           // 61: livekit.proto.UnpublishTrackCallback
	(*room.PublishDataCallback)(nil),              // 62: livekit.proto.PublishDataCallback
	(*audio_frame.CaptureAudioFrameCallback)(nil), // 63: livekit.proto.CaptureAudioFrameCallback
	(*room.UpdateLocalMetadataCallback)(nil),      // 64: livekit.proto.UpdateLocalMetadataCallback
	(*room.UpdateLocalNameCallback)(nil),          // 65: livekit.proto.UpdateLocalNameCallback
	(*track.GetStatsCallback)(nil),                // 66: livekit.proto.GetStatsCallback
	(*room.GetSessionStatsCallback)(nil),          // 67: livekit.proto.GetSessionStatsCallback
}
var file_ffi_proto_depIdxs = []int32{
	4,  // 0: livekit.proto.FfiRequest.dispose:type_name -> livekit.proto.DisposeRequest
	10, // 1: livekit.proto.FfiRequest.connect:type_name -> livekit.proto.ConnectRequest
	11, // 2: livekit.proto.FfiRequest.disconnect:type_name -> livekit.proto.DisconnectRequest
	12, // 3: livekit.proto.FfiRequest.publish_track:type_name -> livekit.proto.PublishTrackRequest
	13, // 4: livekit.proto.FfiRequest.unpublish_track:type_name -> livekit.proto.UnpublishTrackRequest
	14, // 5: livekit.proto.FfiRequest.publish_data:type_name -> livekit.proto.PublishDataRequest
	15, // 6: livekit.proto.FfiRequest.set_subscribed:type_name -> livekit.proto.SetSubscribedRequest
	16, // 7: livekit.proto.FfiRequest.update_local_metadata:type_name -> livekit.proto.UpdateLocalMetadataRequest
	17, // 8: livekit.proto.FfiRequest.update_local_name:type_name -> livekit.proto.UpdateLocalNameRequest
	18, // 9: livekit.proto.FfiRequest.get_session_stats:type_name -> livekit.proto.GetSessionStatsRequest
	19, // 10: livekit.proto.FfiRequest.create_video_track:type_name -> livekit.proto.CreateVideoTrackRequest
	20, // 11: livekit.proto.FfiRequest.create_audio_track:type_name -> livekit.proto.CreateAudioTrackRequest
	21, // 12: livekit.proto.FfiRequest.get_stats:type_name -> livekit.proto.GetStatsRequest
	22, // 13: livekit.proto.FfiRequest.new_video_stream:type_name -> livekit.proto.NewVideoStreamRequest
	23, // 14: livekit.proto.FfiRequest.new_video_source:type_name -> livekit.proto.NewVideoSourceRequest
	24, // 15: livekit.proto.FfiRequest.capture_video_frame:type_name -> livekit.proto.CaptureVideoFrameRequest
	25, // 16: livekit.proto.FfiRequest.video_convert:type_name -> livekit.proto.VideoConvertRequest
	26, // 17: livekit.proto.FfiRequest.new_audio_stream:type_name -> livekit.proto.NewAudioStreamRequest
	27, // 18: livekit.proto.FfiRequest.new_audio_source:type_name -> livekit.proto.NewAudioSourceRequest
	28, // 19: livekit.proto.FfiRequest.capture_audio_frame:type_name -> livekit.proto.CaptureAudioFrameRequest
	29, // 20: livekit.proto.FfiRequest.new_audio_resampler:type_name -> livekit.proto.NewAudioResamplerRequest
	30, // 21: livekit.proto.FfiRequest.remix_and_resample:type_name -> livekit.proto.RemixAndResampleRequest
	31, // 22: livekit.proto.FfiRequest.e2ee:type_name -> livekit.proto.E2eeRequest
	5,  // 23: livekit.proto.FfiResponse.dispose:type_name -> livekit.proto.DisposeResponse
	32, // 24: livekit.proto.FfiResponse.connect:type_name -> livekit.proto.ConnectResponse
	33, // 25: livekit.proto.FfiResponse.disconnect:type_name -> livekit.proto.DisconnectResponse
	34, // 26: livekit.proto.FfiResponse.publish_track:type_name -> livekit.proto.PublishTrackResponse
	35, // 27: livekit.proto.FfiResponse.unpublish_track:type_name -> livekit.proto.UnpublishTrackResponse
	36, // 28: livekit.proto.FfiResponse.publish_data:type_name -> livekit.proto.PublishDataResponse
	37, // 29: livekit.proto.FfiResponse.set_subscribed:type_name -> livekit.proto.SetSubscribedResponse
	38, // 30: livekit.proto.FfiResponse.update_local_metadata:type_name -> livekit.proto.UpdateLocalMetadataResponse
	39, // 31: livekit.proto.FfiResponse.update_local_name:type_name -> livekit.proto.UpdateLocalNameResponse
	40, // 32: livekit.proto.FfiResponse.get_session_stats:type_name -> livekit.proto.GetSessionStatsResponse
	41, // 33: livekit.proto.FfiResponse.create_video_track:type_name -> livekit.proto.CreateVideoTrackResponse
	42, // 34: livekit.proto.FfiResponse.create_audio_track:type_name -> livekit.proto.CreateAudioTrackResponse
	43, // 35: livekit.proto.FfiResponse.get_stats:type_name -> livekit.proto.GetStatsResponse
	44, // 36: livekit.proto.FfiResponse.new_video_stream:type_name -> livekit.proto.NewVideoStreamResponse
	45, // 37: livekit.proto.FfiResponse.new_video_source:type_name -> livekit.proto.NewVideoSourceResponse
	46, // 38: livekit.proto.FfiResponse.capture_video_frame:type_name -> livekit.proto.CaptureVideoFrameResponse
	47, // 39: livekit.proto.FfiResponse.video_convert:type_name -> livekit.proto.VideoConvertResponse
	48, // 40: livekit.proto.FfiResponse.new_audio_stream:type_name -> livekit.proto.NewAudioStreamResponse
	49, // 41: livekit.proto.FfiResponse.new_audio_source:type_name -> livekit.proto.NewAudioSourceResponse
	50, // 42: livekit.proto.FfiResponse.capture_audio_frame:type_name -> livekit.proto.CaptureAudioFrameResponse
	51, // 43: livekit.proto.FfiResponse.new_audio_resampler:type_name -> livekit.proto.NewAudioResamplerResponse
	52, // 44: livekit.proto.FfiResponse.remix_and_resample:type_name -> livekit.proto.RemixAndResampleResponse
	53, // 45: livekit.proto.FfiResponse.e2ee:type_name -> livekit.proto.E2eeResponse
	54, // 46: livekit.proto.FfiEvent.room_event:type_name -> livekit.proto.RoomEvent
	55, // 47: livekit.proto.FfiEvent.track_event:type_name -> livekit.proto.TrackEvent
	56, // 48: livekit.proto.FfiEvent.video_stream_event:type_name -> livekit.proto.VideoStreamEvent
	57, // 49: livekit.proto.FfiEvent.audio_stream_event:type_name -> livekit.proto.AudioStreamEvent
	58, // 50: livekit.proto.FfiEvent.connect:type_name -> livekit.proto.ConnectCallback
	59, // 51: livekit.proto.FfiEvent.disconnect:type_name -> livekit.proto.DisconnectCallback
	6,  // 52: livekit.proto.FfiEvent.dispose:type_name -> livekit.proto.DisposeCallback
	60, // 53: livekit.proto.FfiEvent.publish_track:type_name -> livekit.proto.PublishTrackCallback
	61, // 54: livekit.proto.FfiEvent.unpublish_track:type_name -> livekit.proto.UnpublishTrackCallback
	62, // 55: livekit.proto.FfiEvent.publish_data:type_name -> livekit.proto.PublishDataCallback
	63, // 56: livekit.proto.FfiEvent.capture_audio_frame:type_name -> livekit.proto.CaptureAudioFrameCallback
	64, // 57: livekit.proto.FfiEvent.update_local_metadata:type_name -> livekit.proto.UpdateLocalMetadataCallback
	65, // 58: livekit.proto.FfiEvent.update_local_name:type_name -> livekit.proto.UpdateLocalNameCallback
	66, // 59: livekit.proto.FfiEvent.get_stats:type_name -> livekit.proto.GetStatsCallback
	8,  // 60: livekit.proto.FfiEvent.logs:type_name -> livekit.proto.LogBatch
	67, // 61: livekit.proto.FfiEvent.get_session_stats:type_name -> livekit.proto.GetSessionStatsCallback
	9,  // 62: livekit.proto.FfiEvent.panic:type_name -> livekit.proto.Panic
	0,  // 63: livekit.proto.LogRecord.level:type_name -> livekit.proto.LogLevel
	7,  // 64: livekit.proto.LogBatch.records:type_name -> livekit.proto.LogRecord
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_ffi_proto_init() }
func file_ffi_proto_init() {
	if File_ffi_proto != nil {
		return
	}
	file_ffi_proto_msgTypes[0].OneofWrappers = []any{
		(*FfiRequest_Dispose)(nil),
		(*FfiRequest_Connect)(nil),
		(*FfiRequest_Disconnect)(nil),
		(*FfiRequest_PublishTrack)(nil),
		(*FfiRequest_UnpublishTrack)(nil),
		(*FfiRequest_PublishData)(nil),
		(*FfiRequest_SetSubscribed)(nil),
		(*FfiRequest_UpdateLocalMetadata)(nil),
		(*FfiRequest_UpdateLocalName)(nil),
		(*FfiRequest_GetSessionStats)(nil),
		(*FfiRequest_CreateVideoTrack)(nil),
		(*FfiRequest_CreateAudioTrack)(nil),
		(*FfiRequest_GetStats)(nil),
		(*FfiRequest_NewVideoStream)(nil),
		(*FfiRequest_NewVideoSource)(nil),
		(*FfiRequest_CaptureVideoFrame)(nil),
		(*FfiRequest_VideoConvert)(nil),
		(*FfiRequest_NewAudioStream)(nil),
		(*FfiRequest_NewAudioSource)(nil),
		(*FfiRequest_CaptureAudioFrame)(nil),
		(*FfiRequest_NewAudioResampler)(nil),
		(*FfiRequest_RemixAndResample)(nil),
		(*FfiRequest_E2Ee)(nil),
	}
	file_ffi_proto_msgTypes[1].OneofWrappers = []any{
		(*FfiResponse_Dispose)(nil),
		(*FfiResponse_Connect)(nil),
		(*FfiResponse_Disconnect)(nil),
		(*FfiResponse_PublishTrack)(nil),
		(*FfiResponse_UnpublishTrack)(nil),
		(*FfiResponse_PublishData)(nil),
		(*FfiResponse_SetSubscribed)(nil),
		(*FfiResponse_UpdateLocalMetadata)(nil),
		(*FfiResponse_UpdateLocalName)(nil),
		(*FfiResponse_GetSessionStats)(nil),
		(*FfiResponse_CreateVideoTrack)(nil),
		(*FfiResponse_CreateAudioTrack)(nil),
		(*FfiResponse_GetStats)(nil),
		(*FfiResponse_NewVideoStream)(nil),
		(*FfiResponse_NewVideoSource)(nil),
		(*FfiResponse_CaptureVideoFrame)(nil),
		(*FfiResponse_VideoConvert)(nil),
		(*FfiResponse_NewAudioStream)(nil),
		(*FfiResponse_NewAudioSource)(nil),
		(*FfiResponse_CaptureAudioFrame)(nil),
		(*FfiResponse_NewAudioResampler)(nil),
		(*FfiResponse_RemixAndResample)(nil),
		(*FfiResponse_E2Ee)(nil),
	}
	file_ffi_proto_msgTypes[2].OneofWrappers = []any{
		(*FfiEvent_RoomEvent)(nil),
		(*FfiEvent_TrackEvent)(nil),
		(*FfiEvent_VideoStreamEvent)(nil),
		(*FfiEvent_AudioStreamEvent)(nil),
		(*FfiEvent_Connect)(nil),
		(*FfiEvent_Disconnect)(nil),
		(*FfiEvent_Dispose)(nil),
		(*FfiEvent_PublishTrack)(nil),
		(*FfiEvent_UnpublishTrack)(nil),
		(*FfiEvent_PublishData)(nil),
		(*FfiEvent_CaptureAudioFrame)(nil),
		(*FfiEvent_UpdateLocalMetadata)(nil),
		(*FfiEvent_UpdateLocalName)(nil),
		(*FfiEvent_GetStats)(nil),
		(*FfiEvent_Logs)(nil),
		(*FfiEvent_GetSessionStats)(nil),
		(*FfiEvent_Panic)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ffi_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ffi_proto_goTypes,
		DependencyIndexes: file_ffi_proto_depIdxs,
		EnumInfos:         file_ffi_proto_enumTypes,
		MessageInfos:      file_ffi_proto_msgTypes,
	}.Build()
	File_ffi_proto = out.File
	file_ffi_proto_rawDesc = nil
	file_ffi_proto_goTypes = nil
	file_ffi_proto_depIdxs = nil
}
