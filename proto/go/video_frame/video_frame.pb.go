// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.27.1
// source: video_frame.proto

package video_frame

import (
	handle "github.com/openimsdk/openim-rtc/proto/go/handle"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoCodec int32

const (
	VideoCodec_VP8  VideoCodec = 0
	VideoCodec_H264 VideoCodec = 1
	VideoCodec_AV1  VideoCodec = 2
	VideoCodec_VP9  VideoCodec = 3
)

// Enum value maps for VideoCodec.
var (
	VideoCodec_name = map[int32]string{
		0: "VP8",
		1: "H264",
		2: "AV1",
		3: "VP9",
	}
	VideoCodec_value = map[string]int32{
		"VP8":  0,
		"H264": 1,
		"AV1":  2,
		"VP9":  3,
	}
)

func (x VideoCodec) Enum() *VideoCodec {
	p := new(VideoCodec)
	*p = x
	return p
}

func (x VideoCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_video_frame_proto_enumTypes[0].Descriptor()
}

func (VideoCodec) Type() protoreflect.EnumType {
	return &file_video_frame_proto_enumTypes[0]
}

func (x VideoCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoCodec.Descriptor instead.
func (VideoCodec) EnumDescriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{0}
}

type VideoRotation int32

const (
	VideoRotation_VIDEO_ROTATION_0   VideoRotation = 0
	VideoRotation_VIDEO_ROTATION_90  VideoRotation = 1
	VideoRotation_VIDEO_ROTATION_180 VideoRotation = 2
	VideoRotation_VIDEO_ROTATION_270 VideoRotation = 3
)

// Enum value maps for VideoRotation.
var (
	VideoRotation_name = map[int32]string{
		0: "VIDEO_ROTATION_0",
		1: "VIDEO_ROTATION_90",
		2: "VIDEO_ROTATION_180",
		3: "VIDEO_ROTATION_270",
	}
	VideoRotation_value = map[string]int32{
		"VIDEO_ROTATION_0":   0,
		"VIDEO_ROTATION_90":  1,
		"VIDEO_ROTATION_180": 2,
		"VIDEO_ROTATION_270": 3,
	}
)

func (x VideoRotation) Enum() *VideoRotation {
	p := new(VideoRotation)
	*p = x
	return p
}

func (x VideoRotation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoRotation) Descriptor() protoreflect.EnumDescriptor {
	return file_video_frame_proto_enumTypes[1].Descriptor()
}

func (VideoRotation) Type() protoreflect.EnumType {
	return &file_video_frame_proto_enumTypes[1]
}

func (x VideoRotation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoRotation.Descriptor instead.
func (VideoRotation) EnumDescriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{1}
}

type VideoBufferType int32

const (
	VideoBufferType_RGBA  VideoBufferType = 0
	VideoBufferType_ABGR  VideoBufferType = 1
	VideoBufferType_ARGB  VideoBufferType = 2
	VideoBufferType_BGRA  VideoBufferType = 3
	VideoBufferType_RGB24 VideoBufferType = 4
	VideoBufferType_I420  VideoBufferType = 5
	VideoBufferType_I420A VideoBufferType = 6
	VideoBufferType_I422  VideoBufferType = 7
	VideoBufferType_I444  VideoBufferType = 8
	VideoBufferType_I010  VideoBufferType = 9
	VideoBufferType_NV12  VideoBufferType = 10
)

// Enum value maps for VideoBufferType.
var (
	VideoBufferType_name = map[int32]string{
		0:  "RGBA",
		1:  "ABGR",
		2:  "ARGB",
		3:  "BGRA",
		4:  "RGB24",
		5:  "I420",
		6:  "I420A",
		7:  "I422",
		8:  "I444",
		9:  "I010",
		10: "NV12",
	}
	VideoBufferType_value = map[string]int32{
		"RGBA":  0,
		"ABGR":  1,
		"ARGB":  2,
		"BGRA":  3,
		"RGB24": 4,
		"I420":  5,
		"I420A": 6,
		"I422":  7,
		"I444":  8,
		"I010":  9,
		"NV12":  10,
	}
)

func (x VideoBufferType) Enum() *VideoBufferType {
	p := new(VideoBufferType)
	*p = x
	return p
}

func (x VideoBufferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoBufferType) Descriptor() protoreflect.EnumDescriptor {
	return file_video_frame_proto_enumTypes[2].Descriptor()
}

func (VideoBufferType) Type() protoreflect.EnumType {
	return &file_video_frame_proto_enumTypes[2]
}

func (x VideoBufferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoBufferType.Descriptor instead.
func (VideoBufferType) EnumDescriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{2}
}

type VideoStreamType int32

const (
	VideoStreamType_VIDEO_STREAM_NATIVE VideoStreamType = 0
	VideoStreamType_VIDEO_STREAM_WEBGL  VideoStreamType = 1
	VideoStreamType_VIDEO_STREAM_HTML   VideoStreamType = 2
)

// Enum value maps for VideoStreamType.
var (
	VideoStreamType_name = map[int32]string{
		0: "VIDEO_STREAM_NATIVE",
		1: "VIDEO_STREAM_WEBGL",
		2: "VIDEO_STREAM_HTML",
	}
	VideoStreamType_value = map[string]int32{
		"VIDEO_STREAM_NATIVE": 0,
		"VIDEO_STREAM_WEBGL":  1,
		"VIDEO_STREAM_HTML":   2,
	}
)

func (x VideoStreamType) Enum() *VideoStreamType {
	p := new(VideoStreamType)
	*p = x
	return p
}

func (x VideoStreamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoStreamType) Descriptor() protoreflect.EnumDescriptor {
	return file_video_frame_proto_enumTypes[3].Descriptor()
}

func (VideoStreamType) Type() protoreflect.EnumType {
	return &file_video_frame_proto_enumTypes[3]
}

func (x VideoStreamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoStreamType.Descriptor instead.
func (VideoStreamType) EnumDescriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{3}
}

type VideoSourceType int32

const (
	VideoSourceType_VIDEO_SOURCE_NATIVE VideoSourceType = 0
)

// Enum value maps for VideoSourceType.
var (
	VideoSourceType_name = map[int32]string{
		0: "VIDEO_SOURCE_NATIVE",
	}
	VideoSourceType_value = map[string]int32{
		"VIDEO_SOURCE_NATIVE": 0,
	}
)

func (x VideoSourceType) Enum() *VideoSourceType {
	p := new(VideoSourceType)
	*p = x
	return p
}

func (x VideoSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_video_frame_proto_enumTypes[4].Descriptor()
}

func (VideoSourceType) Type() protoreflect.EnumType {
	return &file_video_frame_proto_enumTypes[4]
}

func (x VideoSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoSourceType.Descriptor instead.
func (VideoSourceType) EnumDescriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{4}
}

// Create a new VideoStream
// VideoStream is used to receive video frames from a track
type NewVideoStreamRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TrackHandle uint64                 `protobuf:"varint,1,opt,name=track_handle,json=trackHandle,proto3" json:"track_handle"`
	Type        VideoStreamType        `protobuf:"varint,2,opt,name=type,proto3,enum=livekit.proto.VideoStreamType" json:"type"`
	// Get the frame on a specific format
	Format VideoBufferType `protobuf:"varint,3,opt,name=format,proto3,enum=livekit.proto.VideoBufferType" json:"format"`
	// if true, stride will be set to width/chroma_width
	NormalizeStride bool `protobuf:"varint,4,opt,name=normalize_stride,json=normalizeStride,proto3" json:"normalize_stride"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NewVideoStreamRequest) Reset() {
	*x = NewVideoStreamRequest{}
	mi := &file_video_frame_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewVideoStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewVideoStreamRequest) ProtoMessage() {}

func (x *NewVideoStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewVideoStreamRequest.ProtoReflect.Descriptor instead.
func (*NewVideoStreamRequest) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{0}
}

func (x *NewVideoStreamRequest) GetTrackHandle() uint64 {
	if x != nil {
		return x.TrackHandle
	}
	return 0
}

func (x *NewVideoStreamRequest) GetType() VideoStreamType {
	if x != nil {
		return x.Type
	}
	return VideoStreamType_VIDEO_STREAM_NATIVE
}

func (x *NewVideoStreamRequest) GetFormat() VideoBufferType {
	if x != nil {
		return x.Format
	}
	return VideoBufferType_RGBA
}

func (x *NewVideoStreamRequest) GetNormalizeStride() bool {
	if x != nil {
		return x.NormalizeStride
	}
	return false
}

type NewVideoStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stream        *OwnedVideoStream      `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewVideoStreamResponse) Reset() {
	*x = NewVideoStreamResponse{}
	mi := &file_video_frame_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewVideoStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewVideoStreamResponse) ProtoMessage() {}

func (x *NewVideoStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewVideoStreamResponse.ProtoReflect.Descriptor instead.
func (*NewVideoStreamResponse) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{1}
}

func (x *NewVideoStreamResponse) GetStream() *OwnedVideoStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

// Create a new VideoSource
// VideoSource is used to send video frame to a track
type NewVideoSourceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  VideoSourceType        `protobuf:"varint,1,opt,name=type,proto3,enum=livekit.proto.VideoSourceType" json:"type"`
	// Used to determine which encodings to use + simulcast layers
	// Most of the time it corresponds to the source resolution
	Resolution    *VideoSourceResolution `protobuf:"bytes,2,opt,name=resolution,proto3" json:"resolution"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewVideoSourceRequest) Reset() {
	*x = NewVideoSourceRequest{}
	mi := &file_video_frame_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewVideoSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewVideoSourceRequest) ProtoMessage() {}

func (x *NewVideoSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewVideoSourceRequest.ProtoReflect.Descriptor instead.
func (*NewVideoSourceRequest) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{2}
}

func (x *NewVideoSourceRequest) GetType() VideoSourceType {
	if x != nil {
		return x.Type
	}
	return VideoSourceType_VIDEO_SOURCE_NATIVE
}

func (x *NewVideoSourceRequest) GetResolution() *VideoSourceResolution {
	if x != nil {
		return x.Resolution
	}
	return nil
}

type NewVideoSourceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *OwnedVideoSource      `protobuf:"bytes,1,opt,name=source,proto3" json:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewVideoSourceResponse) Reset() {
	*x = NewVideoSourceResponse{}
	mi := &file_video_frame_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewVideoSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewVideoSourceResponse) ProtoMessage() {}

func (x *NewVideoSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewVideoSourceResponse.ProtoReflect.Descriptor instead.
func (*NewVideoSourceResponse) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{3}
}

func (x *NewVideoSourceResponse) GetSource() *OwnedVideoSource {
	if x != nil {
		return x.Source
	}
	return nil
}

// Push a frame to a VideoSource
type CaptureVideoFrameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceHandle  uint64                 `protobuf:"varint,1,opt,name=source_handle,json=sourceHandle,proto3" json:"source_handle"`
	Buffer        *VideoBufferInfo       `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer"`
	TimestampUs   int64                  `protobuf:"varint,3,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us"` // In microseconds
	Rotation      VideoRotation          `protobuf:"varint,4,opt,name=rotation,proto3,enum=livekit.proto.VideoRotation" json:"rotation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaptureVideoFrameRequest) Reset() {
	*x = CaptureVideoFrameRequest{}
	mi := &file_video_frame_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureVideoFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureVideoFrameRequest) ProtoMessage() {}

func (x *CaptureVideoFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureVideoFrameRequest.ProtoReflect.Descriptor instead.
func (*CaptureVideoFrameRequest) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{4}
}

func (x *CaptureVideoFrameRequest) GetSourceHandle() uint64 {
	if x != nil {
		return x.SourceHandle
	}
	return 0
}

func (x *CaptureVideoFrameRequest) GetBuffer() *VideoBufferInfo {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *CaptureVideoFrameRequest) GetTimestampUs() int64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

func (x *CaptureVideoFrameRequest) GetRotation() VideoRotation {
	if x != nil {
		return x.Rotation
	}
	return VideoRotation_VIDEO_ROTATION_0
}

type CaptureVideoFrameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaptureVideoFrameResponse) Reset() {
	*x = CaptureVideoFrameResponse{}
	mi := &file_video_frame_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureVideoFrameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureVideoFrameResponse) ProtoMessage() {}

func (x *CaptureVideoFrameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureVideoFrameResponse.ProtoReflect.Descriptor instead.
func (*CaptureVideoFrameResponse) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{5}
}

type VideoConvertRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FlipY         bool                   `protobuf:"varint,1,opt,name=flip_y,json=flipY,proto3" json:"flip_y"`
	Buffer        *VideoBufferInfo       `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer"`
	DstType       VideoBufferType        `protobuf:"varint,3,opt,name=dst_type,json=dstType,proto3,enum=livekit.proto.VideoBufferType" json:"dst_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoConvertRequest) Reset() {
	*x = VideoConvertRequest{}
	mi := &file_video_frame_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoConvertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConvertRequest) ProtoMessage() {}

func (x *VideoConvertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConvertRequest.ProtoReflect.Descriptor instead.
func (*VideoConvertRequest) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{6}
}

func (x *VideoConvertRequest) GetFlipY() bool {
	if x != nil {
		return x.FlipY
	}
	return false
}

func (x *VideoConvertRequest) GetBuffer() *VideoBufferInfo {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *VideoConvertRequest) GetDstType() VideoBufferType {
	if x != nil {
		return x.DstType
	}
	return VideoBufferType_RGBA
}

type VideoConvertResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         string                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error"`
	Buffer        *OwnedVideoBuffer      `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoConvertResponse) Reset() {
	*x = VideoConvertResponse{}
	mi := &file_video_frame_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoConvertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConvertResponse) ProtoMessage() {}

func (x *VideoConvertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConvertResponse.ProtoReflect.Descriptor instead.
func (*VideoConvertResponse) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{7}
}

func (x *VideoConvertResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *VideoConvertResponse) GetBuffer() *OwnedVideoBuffer {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type VideoResolution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         uint32                 `protobuf:"varint,1,opt,name=width,proto3" json:"width"`
	Height        uint32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height"`
	FrameRate     float64                `protobuf:"fixed64,3,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoResolution) Reset() {
	*x = VideoResolution{}
	mi := &file_video_frame_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoResolution) ProtoMessage() {}

func (x *VideoResolution) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoResolution.ProtoReflect.Descriptor instead.
func (*VideoResolution) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{8}
}

func (x *VideoResolution) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoResolution) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoResolution) GetFrameRate() float64 {
	if x != nil {
		return x.FrameRate
	}
	return 0
}

type VideoBufferInfo struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Type          VideoBufferType                  `protobuf:"varint,1,opt,name=type,proto3,enum=livekit.proto.VideoBufferType" json:"type"`
	Width         uint32                           `protobuf:"varint,2,opt,name=width,proto3" json:"width"`
	Height        uint32                           `protobuf:"varint,3,opt,name=height,proto3" json:"height"`
	DataPtr       uint64                           `protobuf:"varint,4,opt,name=data_ptr,json=dataPtr,proto3" json:"data_ptr"`
	Stride        uint32                           `protobuf:"varint,6,opt,name=stride,proto3" json:"stride"` // only for packed formats
	Components    []*VideoBufferInfo_ComponentInfo `protobuf:"bytes,7,rep,name=components,proto3" json:"components"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoBufferInfo) Reset() {
	*x = VideoBufferInfo{}
	mi := &file_video_frame_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoBufferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoBufferInfo) ProtoMessage() {}

func (x *VideoBufferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoBufferInfo.ProtoReflect.Descriptor instead.
func (*VideoBufferInfo) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{9}
}

func (x *VideoBufferInfo) GetType() VideoBufferType {
	if x != nil {
		return x.Type
	}
	return VideoBufferType_RGBA
}

func (x *VideoBufferInfo) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoBufferInfo) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoBufferInfo) GetDataPtr() uint64 {
	if x != nil {
		return x.DataPtr
	}
	return 0
}

func (x *VideoBufferInfo) GetStride() uint32 {
	if x != nil {
		return x.Stride
	}
	return 0
}

func (x *VideoBufferInfo) GetComponents() []*VideoBufferInfo_ComponentInfo {
	if x != nil {
		return x.Components
	}
	return nil
}

type OwnedVideoBuffer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Handle        *handle.FfiOwnedHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle"`
	Info          *VideoBufferInfo       `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnedVideoBuffer) Reset() {
	*x = OwnedVideoBuffer{}
	mi := &file_video_frame_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnedVideoBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedVideoBuffer) ProtoMessage() {}

func (x *OwnedVideoBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedVideoBuffer.ProtoReflect.Descriptor instead.
func (*OwnedVideoBuffer) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{10}
}

func (x *OwnedVideoBuffer) GetHandle() *handle.FfiOwnedHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *OwnedVideoBuffer) GetInfo() *VideoBufferInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type VideoStreamInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          VideoStreamType        `protobuf:"varint,1,opt,name=type,proto3,enum=livekit.proto.VideoStreamType" json:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoStreamInfo) Reset() {
	*x = VideoStreamInfo{}
	mi := &file_video_frame_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoStreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoStreamInfo) ProtoMessage() {}

func (x *VideoStreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoStreamInfo.ProtoReflect.Descriptor instead.
func (*VideoStreamInfo) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{11}
}

func (x *VideoStreamInfo) GetType() VideoStreamType {
	if x != nil {
		return x.Type
	}
	return VideoStreamType_VIDEO_STREAM_NATIVE
}

type OwnedVideoStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Handle        *handle.FfiOwnedHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle"`
	Info          *VideoStreamInfo       `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnedVideoStream) Reset() {
	*x = OwnedVideoStream{}
	mi := &file_video_frame_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnedVideoStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedVideoStream) ProtoMessage() {}

func (x *OwnedVideoStream) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedVideoStream.ProtoReflect.Descriptor instead.
func (*OwnedVideoStream) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{12}
}

func (x *OwnedVideoStream) GetHandle() *handle.FfiOwnedHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *OwnedVideoStream) GetInfo() *VideoStreamInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type VideoStreamEvent struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	StreamHandle uint64                 `protobuf:"varint,1,opt,name=stream_handle,json=streamHandle,proto3" json:"stream_handle"`
	// Types that are valid to be assigned to Message:
	//
	//	*VideoStreamEvent_FrameReceived
	//	*VideoStreamEvent_Eos
	Message       isVideoStreamEvent_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoStreamEvent) Reset() {
	*x = VideoStreamEvent{}
	mi := &file_video_frame_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoStreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoStreamEvent) ProtoMessage() {}

func (x *VideoStreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoStreamEvent.ProtoReflect.Descriptor instead.
func (*VideoStreamEvent) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{13}
}

func (x *VideoStreamEvent) GetStreamHandle() uint64 {
	if x != nil {
		return x.StreamHandle
	}
	return 0
}

func (x *VideoStreamEvent) GetMessage() isVideoStreamEvent_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *VideoStreamEvent) GetFrameReceived() *VideoFrameReceived {
	if x != nil {
		if x, ok := x.Message.(*VideoStreamEvent_FrameReceived); ok {
			return x.FrameReceived
		}
	}
	return nil
}

func (x *VideoStreamEvent) GetEos() *VideoStreamEOS {
	if x != nil {
		if x, ok := x.Message.(*VideoStreamEvent_Eos); ok {
			return x.Eos
		}
	}
	return nil
}

type isVideoStreamEvent_Message interface {
	isVideoStreamEvent_Message()
}

type VideoStreamEvent_FrameReceived struct {
	FrameReceived *VideoFrameReceived `protobuf:"bytes,2,opt,name=frame_received,json=frameReceived,proto3,oneof"`
}

type VideoStreamEvent_Eos struct {
	Eos *VideoStreamEOS `protobuf:"bytes,3,opt,name=eos,proto3,oneof"`
}

func (*VideoStreamEvent_FrameReceived) isVideoStreamEvent_Message() {}

func (*VideoStreamEvent_Eos) isVideoStreamEvent_Message() {}

type VideoFrameReceived struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Buffer        *OwnedVideoBuffer      `protobuf:"bytes,1,opt,name=buffer,proto3" json:"buffer"`
	TimestampUs   int64                  `protobuf:"varint,2,opt,name=timestamp_us,json=timestampUs,proto3" json:"timestamp_us"` // In microseconds
	Rotation      VideoRotation          `protobuf:"varint,3,opt,name=rotation,proto3,enum=livekit.proto.VideoRotation" json:"rotation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoFrameReceived) Reset() {
	*x = VideoFrameReceived{}
	mi := &file_video_frame_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoFrameReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFrameReceived) ProtoMessage() {}

func (x *VideoFrameReceived) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFrameReceived.ProtoReflect.Descriptor instead.
func (*VideoFrameReceived) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{14}
}

func (x *VideoFrameReceived) GetBuffer() *OwnedVideoBuffer {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *VideoFrameReceived) GetTimestampUs() int64 {
	if x != nil {
		return x.TimestampUs
	}
	return 0
}

func (x *VideoFrameReceived) GetRotation() VideoRotation {
	if x != nil {
		return x.Rotation
	}
	return VideoRotation_VIDEO_ROTATION_0
}

type VideoStreamEOS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoStreamEOS) Reset() {
	*x = VideoStreamEOS{}
	mi := &file_video_frame_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoStreamEOS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoStreamEOS) ProtoMessage() {}

func (x *VideoStreamEOS) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoStreamEOS.ProtoReflect.Descriptor instead.
func (*VideoStreamEOS) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{15}
}

type VideoSourceResolution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         uint32                 `protobuf:"varint,1,opt,name=width,proto3" json:"width"`
	Height        uint32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoSourceResolution) Reset() {
	*x = VideoSourceResolution{}
	mi := &file_video_frame_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoSourceResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSourceResolution) ProtoMessage() {}

func (x *VideoSourceResolution) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSourceResolution.ProtoReflect.Descriptor instead.
func (*VideoSourceResolution) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{16}
}

func (x *VideoSourceResolution) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoSourceResolution) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type VideoSourceInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          VideoSourceType        `protobuf:"varint,1,opt,name=type,proto3,enum=livekit.proto.VideoSourceType" json:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoSourceInfo) Reset() {
	*x = VideoSourceInfo{}
	mi := &file_video_frame_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoSourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSourceInfo) ProtoMessage() {}

func (x *VideoSourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSourceInfo.ProtoReflect.Descriptor instead.
func (*VideoSourceInfo) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{17}
}

func (x *VideoSourceInfo) GetType() VideoSourceType {
	if x != nil {
		return x.Type
	}
	return VideoSourceType_VIDEO_SOURCE_NATIVE
}

type OwnedVideoSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Handle        *handle.FfiOwnedHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle"`
	Info          *VideoSourceInfo       `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnedVideoSource) Reset() {
	*x = OwnedVideoSource{}
	mi := &file_video_frame_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnedVideoSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedVideoSource) ProtoMessage() {}

func (x *OwnedVideoSource) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedVideoSource.ProtoReflect.Descriptor instead.
func (*OwnedVideoSource) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{18}
}

func (x *OwnedVideoSource) GetHandle() *handle.FfiOwnedHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *OwnedVideoSource) GetInfo() *VideoSourceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type VideoBufferInfo_ComponentInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataPtr       uint64                 `protobuf:"varint,1,opt,name=data_ptr,json=dataPtr,proto3" json:"data_ptr"`
	Stride        uint32                 `protobuf:"varint,2,opt,name=stride,proto3" json:"stride"`
	Size          uint32                 `protobuf:"varint,3,opt,name=size,proto3" json:"size"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoBufferInfo_ComponentInfo) Reset() {
	*x = VideoBufferInfo_ComponentInfo{}
	mi := &file_video_frame_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoBufferInfo_ComponentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoBufferInfo_ComponentInfo) ProtoMessage() {}

func (x *VideoBufferInfo_ComponentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_frame_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoBufferInfo_ComponentInfo.ProtoReflect.Descriptor instead.
func (*VideoBufferInfo_ComponentInfo) Descriptor() ([]byte, []int) {
	return file_video_frame_proto_rawDescGZIP(), []int{9, 0}
}

func (x *VideoBufferInfo_ComponentInfo) GetDataPtr() uint64 {
	if x != nil {
		return x.DataPtr
	}
	return 0
}

func (x *VideoBufferInfo_ComponentInfo) GetStride() uint32 {
	if x != nil {
		return x.Stride
	}
	return 0
}

func (x *VideoBufferInfo_ComponentInfo) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

var File_video_frame_proto protoreflect.FileDescriptor

var file_video_frame_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd1, 0x01, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x77, 0x6e, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x16, 0x4e,
	0x65, 0x77, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xd4,
	0x01, 0x0a, 0x18, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x6c,
	0x69, 0x70, 0x5f, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6c, 0x69, 0x70,
	0x59, 0x12, 0x36, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x65, 0x0a, 0x14, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x0f, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xcc, 0x02, 0x0a, 0x0f,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x74, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x50, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x56, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x74, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x50, 0x74, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x7d, 0x0a, 0x10, 0x4f, 0x77,
	0x6e, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x66, 0x69, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x0f, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x7d, 0x0a, 0x10, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x66, 0x69, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0xc1, 0x01, 0x0a, 0x10, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x4f,
	0x53, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6f, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x06, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x55, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x10, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x4f, 0x53, 0x22, 0x45, 0x0a, 0x15, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x45, 0x0a, 0x0f, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x7d, 0x0a, 0x10, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x66, 0x69, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x2a,
	0x31, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x07, 0x0a,
	0x03, 0x56, 0x50, 0x38, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x32, 0x36, 0x34, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x31, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x50, 0x39,
	0x10, 0x03, 0x2a, 0x6c, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x4f, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x39, 0x30, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x31, 0x38, 0x30, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x37, 0x30, 0x10, 0x03,
	0x2a, 0x81, 0x01, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x47, 0x42, 0x41, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x42, 0x47, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x52, 0x47, 0x42,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x47, 0x52, 0x41, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x47, 0x42, 0x32, 0x34, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x34, 0x32, 0x30, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x34, 0x32, 0x30, 0x41, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x34, 0x32, 0x32, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x34, 0x34, 0x34, 0x10, 0x08,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x30, 0x31, 0x30, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x56,
	0x31, 0x32, 0x10, 0x0a, 0x2a, 0x59, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x57, 0x45, 0x42, 0x47, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x02, 0x2a,
	0x2a, 0x0a, 0x0f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x42, 0x46, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x73, 0x64, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2d, 0x72, 0x74, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0xaa, 0x02, 0x0d, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_frame_proto_rawDescOnce sync.Once
	file_video_frame_proto_rawDescData = file_video_frame_proto_rawDesc
)

func file_video_frame_proto_rawDescGZIP() []byte {
	file_video_frame_proto_rawDescOnce.Do(func() {
		file_video_frame_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_frame_proto_rawDescData)
	})
	return file_video_frame_proto_rawDescData
}

var file_video_frame_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_video_frame_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_video_frame_proto_goTypes = []any{
	(VideoCodec)(0),                       // 0: livekit.proto.VideoCodec
	(VideoRotation)(0),                    // 1: livekit.proto.VideoRotation
	(VideoBufferType)(0),                  // 2: livekit.proto.VideoBufferType
	(VideoStreamType)(0),                  // 3: livekit.proto.VideoStreamType
	(VideoSourceType)(0),                  // 4: livekit.proto.VideoSourceType
	(*NewVideoStreamRequest)(nil),         // 5: livekit.proto.NewVideoStreamRequest
	(*NewVideoStreamResponse)(nil),        // 6: livekit.proto.NewVideoStreamResponse
	(*NewVideoSourceRequest)(nil),         // 7: livekit.proto.NewVideoSourceRequest
	(*NewVideoSourceResponse)(nil),        // 8: livekit.proto.NewVideoSourceResponse
	(*CaptureVideoFrameRequest)(nil),      // 9: livekit.proto.CaptureVideoFrameRequest
	(*CaptureVideoFrameResponse)(nil),     // 10: livekit.proto.CaptureVideoFrameResponse
	(*VideoConvertRequest)(nil),           // 11: livekit.proto.VideoConvertRequest
	(*VideoConvertResponse)(nil),          // 12: livekit.proto.VideoConvertResponse
	(*VideoResolution)(nil),               // 13: livekit.proto.VideoResolution
	(*VideoBufferInfo)(nil),               // 14: livekit.proto.VideoBufferInfo
	(*OwnedVideoBuffer)(nil),              // 15: livekit.proto.OwnedVideoBuffer
	(*VideoStreamInfo)(nil),               // 16: livekit.proto.VideoStreamInfo
	(*OwnedVideoStream)(nil),              // 17: livekit.proto.OwnedVideoStream
	(*VideoStreamEvent)(nil),              // 18: livekit.proto.VideoStreamEvent
	(*VideoFrameReceived)(nil),            // 19: livekit.proto.VideoFrameReceived
	(*VideoStreamEOS)(nil),                // 20: livekit.proto.VideoStreamEOS
	(*VideoSourceResolution)(nil),         // 21: livekit.proto.VideoSourceResolution
	(*VideoSourceInfo)(nil),               // 22: livekit.proto.VideoSourceInfo
	(*OwnedVideoSource)(nil),              // 23: livekit.proto.OwnedVideoSource
	(*VideoBufferInfo_ComponentInfo)(nil), // 24: livekit.proto.VideoBufferInfo.ComponentInfo
	(*handle.FfiOwnedHandle)(nil),         // 25: livekit.proto.FfiOwnedHandle
}
var file_video_frame_proto_depIdxs = []int32{
	3,  // 0: livekit.proto.NewVideoStreamRequest.type:type_name -> livekit.proto.VideoStreamType
	2,  // 1: livekit.proto.NewVideoStreamRequest.format:type_name -> livekit.proto.VideoBufferType
	17, // 2: livekit.proto.NewVideoStreamResponse.stream:type_name -> livekit.proto.OwnedVideoStream
	4,  // 3: livekit.proto.NewVideoSourceRequest.type:type_name -> livekit.proto.VideoSourceType
	21, // 4: livekit.proto.NewVideoSourceRequest.resolution:type_name -> livekit.proto.VideoSourceResolution
	23, // 5: livekit.proto.NewVideoSourceResponse.source:type_name -> livekit.proto.OwnedVideoSource
	14, // 6: livekit.proto.CaptureVideoFrameRequest.buffer:type_name -> livekit.proto.VideoBufferInfo
	1,  // 7: livekit.proto.CaptureVideoFrameRequest.rotation:type_name -> livekit.proto.VideoRotation
	14, // 8: livekit.proto.VideoConvertRequest.buffer:type_name -> livekit.proto.VideoBufferInfo
	2,  // 9: livekit.proto.VideoConvertRequest.dst_type:type_name -> livekit.proto.VideoBufferType
	15, // 10: livekit.proto.VideoConvertResponse.buffer:type_name -> livekit.proto.OwnedVideoBuffer
	2,  // 11: livekit.proto.VideoBufferInfo.type:type_name -> livekit.proto.VideoBufferType
	24, // 12: livekit.proto.VideoBufferInfo.components:type_name -> livekit.proto.VideoBufferInfo.ComponentInfo
	25, // 13: livekit.proto.OwnedVideoBuffer.handle:type_name -> livekit.proto.FfiOwnedHandle
	14, // 14: livekit.proto.OwnedVideoBuffer.info:type_name -> livekit.proto.VideoBufferInfo
	3,  // 15: livekit.proto.VideoStreamInfo.type:type_name -> livekit.proto.VideoStreamType
	25, // 16: livekit.proto.OwnedVideoStream.handle:type_name -> livekit.proto.FfiOwnedHandle
	16, // 17: livekit.proto.OwnedVideoStream.info:type_name -> livekit.proto.VideoStreamInfo
	19, // 18: livekit.proto.VideoStreamEvent.frame_received:type_name -> livekit.proto.VideoFrameReceived
	20, // 19: livekit.proto.VideoStreamEvent.eos:type_name -> livekit.proto.VideoStreamEOS
	15, // 20: livekit.proto.VideoFrameReceived.buffer:type_name -> livekit.proto.OwnedVideoBuffer
	1,  // 21: livekit.proto.VideoFrameReceived.rotation:type_name -> livekit.proto.VideoRotation
	4,  // 22: livekit.proto.VideoSourceInfo.type:type_name -> livekit.proto.VideoSourceType
	25, // 23: livekit.proto.OwnedVideoSource.handle:type_name -> livekit.proto.FfiOwnedHandle
	22, // 24: livekit.proto.OwnedVideoSource.info:type_name -> livekit.proto.VideoSourceInfo
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_video_frame_proto_init() }
func file_video_frame_proto_init() {
	if File_video_frame_proto != nil {
		return
	}
	file_video_frame_proto_msgTypes[13].OneofWrappers = []any{
		(*VideoStreamEvent_FrameReceived)(nil),
		(*VideoStreamEvent_Eos)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_frame_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_video_frame_proto_goTypes,
		DependencyIndexes: file_video_frame_proto_depIdxs,
		EnumInfos:         file_video_frame_proto_enumTypes,
		MessageInfos:      file_video_frame_proto_msgTypes,
	}.Build()
	File_video_frame_proto = out.File
	file_video_frame_proto_rawDesc = nil
	file_video_frame_proto_goTypes = nil
	file_video_frame_proto_depIdxs = nil
}
