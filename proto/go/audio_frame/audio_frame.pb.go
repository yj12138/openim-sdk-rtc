// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.27.1
// source: audio_frame.proto

package audio_frame

import (
	handle "github.com/openimsdk/openim-rtc/proto/go/handle"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AudioStreamType int32

const (
	AudioStreamType_AUDIO_STREAM_NATIVE AudioStreamType = 0
	AudioStreamType_AUDIO_STREAM_HTML   AudioStreamType = 1
)

// Enum value maps for AudioStreamType.
var (
	AudioStreamType_name = map[int32]string{
		0: "AUDIO_STREAM_NATIVE",
		1: "AUDIO_STREAM_HTML",
	}
	AudioStreamType_value = map[string]int32{
		"AUDIO_STREAM_NATIVE": 0,
		"AUDIO_STREAM_HTML":   1,
	}
)

func (x AudioStreamType) Enum() *AudioStreamType {
	p := new(AudioStreamType)
	*p = x
	return p
}

func (x AudioStreamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioStreamType) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_frame_proto_enumTypes[0].Descriptor()
}

func (AudioStreamType) Type() protoreflect.EnumType {
	return &file_audio_frame_proto_enumTypes[0]
}

func (x AudioStreamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioStreamType.Descriptor instead.
func (AudioStreamType) EnumDescriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{0}
}

type AudioSourceType int32

const (
	AudioSourceType_AUDIO_SOURCE_NATIVE AudioSourceType = 0
)

// Enum value maps for AudioSourceType.
var (
	AudioSourceType_name = map[int32]string{
		0: "AUDIO_SOURCE_NATIVE",
	}
	AudioSourceType_value = map[string]int32{
		"AUDIO_SOURCE_NATIVE": 0,
	}
)

func (x AudioSourceType) Enum() *AudioSourceType {
	p := new(AudioSourceType)
	*p = x
	return p
}

func (x AudioSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_audio_frame_proto_enumTypes[1].Descriptor()
}

func (AudioSourceType) Type() protoreflect.EnumType {
	return &file_audio_frame_proto_enumTypes[1]
}

func (x AudioSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioSourceType.Descriptor instead.
func (AudioSourceType) EnumDescriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{1}
}

// Create a new AudioStream
// AudioStream is used to receive audio frames from a track
type NewAudioStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackHandle   uint64                 `protobuf:"varint,1,opt,name=track_handle,json=trackHandle,proto3" json:"track_handle"`
	Type          AudioStreamType        `protobuf:"varint,2,opt,name=type,proto3,enum=livekit.proto.AudioStreamType" json:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewAudioStreamRequest) Reset() {
	*x = NewAudioStreamRequest{}
	mi := &file_audio_frame_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewAudioStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAudioStreamRequest) ProtoMessage() {}

func (x *NewAudioStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAudioStreamRequest.ProtoReflect.Descriptor instead.
func (*NewAudioStreamRequest) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{0}
}

func (x *NewAudioStreamRequest) GetTrackHandle() uint64 {
	if x != nil {
		return x.TrackHandle
	}
	return 0
}

func (x *NewAudioStreamRequest) GetType() AudioStreamType {
	if x != nil {
		return x.Type
	}
	return AudioStreamType_AUDIO_STREAM_NATIVE
}

type NewAudioStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stream        *OwnedAudioStream      `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewAudioStreamResponse) Reset() {
	*x = NewAudioStreamResponse{}
	mi := &file_audio_frame_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewAudioStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAudioStreamResponse) ProtoMessage() {}

func (x *NewAudioStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAudioStreamResponse.ProtoReflect.Descriptor instead.
func (*NewAudioStreamResponse) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{1}
}

func (x *NewAudioStreamResponse) GetStream() *OwnedAudioStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

// Create a new AudioSource
type NewAudioSourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          AudioSourceType        `protobuf:"varint,1,opt,name=type,proto3,enum=livekit.proto.AudioSourceType" json:"type"`
	Options       *AudioSourceOptions    `protobuf:"bytes,2,opt,name=options,proto3" json:"options"`
	SampleRate    uint32                 `protobuf:"varint,3,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate"`
	NumChannels   uint32                 `protobuf:"varint,4,opt,name=num_channels,json=numChannels,proto3" json:"num_channels"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewAudioSourceRequest) Reset() {
	*x = NewAudioSourceRequest{}
	mi := &file_audio_frame_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewAudioSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAudioSourceRequest) ProtoMessage() {}

func (x *NewAudioSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAudioSourceRequest.ProtoReflect.Descriptor instead.
func (*NewAudioSourceRequest) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{2}
}

func (x *NewAudioSourceRequest) GetType() AudioSourceType {
	if x != nil {
		return x.Type
	}
	return AudioSourceType_AUDIO_SOURCE_NATIVE
}

func (x *NewAudioSourceRequest) GetOptions() *AudioSourceOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *NewAudioSourceRequest) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *NewAudioSourceRequest) GetNumChannels() uint32 {
	if x != nil {
		return x.NumChannels
	}
	return 0
}

type NewAudioSourceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *OwnedAudioSource      `protobuf:"bytes,1,opt,name=source,proto3" json:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewAudioSourceResponse) Reset() {
	*x = NewAudioSourceResponse{}
	mi := &file_audio_frame_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewAudioSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAudioSourceResponse) ProtoMessage() {}

func (x *NewAudioSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAudioSourceResponse.ProtoReflect.Descriptor instead.
func (*NewAudioSourceResponse) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{3}
}

func (x *NewAudioSourceResponse) GetSource() *OwnedAudioSource {
	if x != nil {
		return x.Source
	}
	return nil
}

// Push a frame to an AudioSource
// The data provided must be available as long as the client receive the
// callback.
type CaptureAudioFrameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceHandle  uint64                 `protobuf:"varint,1,opt,name=source_handle,json=sourceHandle,proto3" json:"source_handle"`
	Buffer        *AudioFrameBufferInfo  `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaptureAudioFrameRequest) Reset() {
	*x = CaptureAudioFrameRequest{}
	mi := &file_audio_frame_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureAudioFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureAudioFrameRequest) ProtoMessage() {}

func (x *CaptureAudioFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureAudioFrameRequest.ProtoReflect.Descriptor instead.
func (*CaptureAudioFrameRequest) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{4}
}

func (x *CaptureAudioFrameRequest) GetSourceHandle() uint64 {
	if x != nil {
		return x.SourceHandle
	}
	return 0
}

func (x *CaptureAudioFrameRequest) GetBuffer() *AudioFrameBufferInfo {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type CaptureAudioFrameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaptureAudioFrameResponse) Reset() {
	*x = CaptureAudioFrameResponse{}
	mi := &file_audio_frame_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureAudioFrameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureAudioFrameResponse) ProtoMessage() {}

func (x *CaptureAudioFrameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureAudioFrameResponse.ProtoReflect.Descriptor instead.
func (*CaptureAudioFrameResponse) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{5}
}

func (x *CaptureAudioFrameResponse) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

type CaptureAudioFrameCallback struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaptureAudioFrameCallback) Reset() {
	*x = CaptureAudioFrameCallback{}
	mi := &file_audio_frame_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptureAudioFrameCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureAudioFrameCallback) ProtoMessage() {}

func (x *CaptureAudioFrameCallback) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureAudioFrameCallback.ProtoReflect.Descriptor instead.
func (*CaptureAudioFrameCallback) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{6}
}

func (x *CaptureAudioFrameCallback) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

func (x *CaptureAudioFrameCallback) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Create a new AudioResampler
type NewAudioResamplerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewAudioResamplerRequest) Reset() {
	*x = NewAudioResamplerRequest{}
	mi := &file_audio_frame_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewAudioResamplerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAudioResamplerRequest) ProtoMessage() {}

func (x *NewAudioResamplerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAudioResamplerRequest.ProtoReflect.Descriptor instead.
func (*NewAudioResamplerRequest) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{7}
}

type NewAudioResamplerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resampler     *OwnedAudioResampler   `protobuf:"bytes,1,opt,name=resampler,proto3" json:"resampler"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewAudioResamplerResponse) Reset() {
	*x = NewAudioResamplerResponse{}
	mi := &file_audio_frame_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewAudioResamplerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAudioResamplerResponse) ProtoMessage() {}

func (x *NewAudioResamplerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAudioResamplerResponse.ProtoReflect.Descriptor instead.
func (*NewAudioResamplerResponse) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{8}
}

func (x *NewAudioResamplerResponse) GetResampler() *OwnedAudioResampler {
	if x != nil {
		return x.Resampler
	}
	return nil
}

// Remix and resample an audio frame
type RemixAndResampleRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ResamplerHandle uint64                 `protobuf:"varint,1,opt,name=resampler_handle,json=resamplerHandle,proto3" json:"resampler_handle"`
	Buffer          *AudioFrameBufferInfo  `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer"`
	NumChannels     uint32                 `protobuf:"varint,3,opt,name=num_channels,json=numChannels,proto3" json:"num_channels"`
	SampleRate      uint32                 `protobuf:"varint,4,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RemixAndResampleRequest) Reset() {
	*x = RemixAndResampleRequest{}
	mi := &file_audio_frame_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemixAndResampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemixAndResampleRequest) ProtoMessage() {}

func (x *RemixAndResampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemixAndResampleRequest.ProtoReflect.Descriptor instead.
func (*RemixAndResampleRequest) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{9}
}

func (x *RemixAndResampleRequest) GetResamplerHandle() uint64 {
	if x != nil {
		return x.ResamplerHandle
	}
	return 0
}

func (x *RemixAndResampleRequest) GetBuffer() *AudioFrameBufferInfo {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *RemixAndResampleRequest) GetNumChannels() uint32 {
	if x != nil {
		return x.NumChannels
	}
	return 0
}

func (x *RemixAndResampleRequest) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

type RemixAndResampleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Buffer        *OwnedAudioFrameBuffer `protobuf:"bytes,1,opt,name=buffer,proto3" json:"buffer"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemixAndResampleResponse) Reset() {
	*x = RemixAndResampleResponse{}
	mi := &file_audio_frame_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemixAndResampleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemixAndResampleResponse) ProtoMessage() {}

func (x *RemixAndResampleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemixAndResampleResponse.ProtoReflect.Descriptor instead.
func (*RemixAndResampleResponse) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{10}
}

func (x *RemixAndResampleResponse) GetBuffer() *OwnedAudioFrameBuffer {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type AudioFrameBufferInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DataPtr           uint64                 `protobuf:"varint,1,opt,name=data_ptr,json=dataPtr,proto3" json:"data_ptr"` // *const i16
	NumChannels       uint32                 `protobuf:"varint,2,opt,name=num_channels,json=numChannels,proto3" json:"num_channels"`
	SampleRate        uint32                 `protobuf:"varint,3,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate"`
	SamplesPerChannel uint32                 `protobuf:"varint,4,opt,name=samples_per_channel,json=samplesPerChannel,proto3" json:"samples_per_channel"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AudioFrameBufferInfo) Reset() {
	*x = AudioFrameBufferInfo{}
	mi := &file_audio_frame_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioFrameBufferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFrameBufferInfo) ProtoMessage() {}

func (x *AudioFrameBufferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFrameBufferInfo.ProtoReflect.Descriptor instead.
func (*AudioFrameBufferInfo) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{11}
}

func (x *AudioFrameBufferInfo) GetDataPtr() uint64 {
	if x != nil {
		return x.DataPtr
	}
	return 0
}

func (x *AudioFrameBufferInfo) GetNumChannels() uint32 {
	if x != nil {
		return x.NumChannels
	}
	return 0
}

func (x *AudioFrameBufferInfo) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AudioFrameBufferInfo) GetSamplesPerChannel() uint32 {
	if x != nil {
		return x.SamplesPerChannel
	}
	return 0
}

type OwnedAudioFrameBuffer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Handle        *handle.FfiOwnedHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle"`
	Info          *AudioFrameBufferInfo  `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnedAudioFrameBuffer) Reset() {
	*x = OwnedAudioFrameBuffer{}
	mi := &file_audio_frame_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnedAudioFrameBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedAudioFrameBuffer) ProtoMessage() {}

func (x *OwnedAudioFrameBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedAudioFrameBuffer.ProtoReflect.Descriptor instead.
func (*OwnedAudioFrameBuffer) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{12}
}

func (x *OwnedAudioFrameBuffer) GetHandle() *handle.FfiOwnedHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *OwnedAudioFrameBuffer) GetInfo() *AudioFrameBufferInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AudioStreamInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          AudioStreamType        `protobuf:"varint,1,opt,name=type,proto3,enum=livekit.proto.AudioStreamType" json:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioStreamInfo) Reset() {
	*x = AudioStreamInfo{}
	mi := &file_audio_frame_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioStreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioStreamInfo) ProtoMessage() {}

func (x *AudioStreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioStreamInfo.ProtoReflect.Descriptor instead.
func (*AudioStreamInfo) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{13}
}

func (x *AudioStreamInfo) GetType() AudioStreamType {
	if x != nil {
		return x.Type
	}
	return AudioStreamType_AUDIO_STREAM_NATIVE
}

type OwnedAudioStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Handle        *handle.FfiOwnedHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle"`
	Info          *AudioStreamInfo       `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnedAudioStream) Reset() {
	*x = OwnedAudioStream{}
	mi := &file_audio_frame_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnedAudioStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedAudioStream) ProtoMessage() {}

func (x *OwnedAudioStream) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedAudioStream.ProtoReflect.Descriptor instead.
func (*OwnedAudioStream) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{14}
}

func (x *OwnedAudioStream) GetHandle() *handle.FfiOwnedHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *OwnedAudioStream) GetInfo() *AudioStreamInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AudioStreamEvent struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	StreamHandle uint64                 `protobuf:"varint,1,opt,name=stream_handle,json=streamHandle,proto3" json:"stream_handle"`
	// Types that are valid to be assigned to Message:
	//
	//	*AudioStreamEvent_FrameReceived
	//	*AudioStreamEvent_Eos
	Message       isAudioStreamEvent_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioStreamEvent) Reset() {
	*x = AudioStreamEvent{}
	mi := &file_audio_frame_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioStreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioStreamEvent) ProtoMessage() {}

func (x *AudioStreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioStreamEvent.ProtoReflect.Descriptor instead.
func (*AudioStreamEvent) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{15}
}

func (x *AudioStreamEvent) GetStreamHandle() uint64 {
	if x != nil {
		return x.StreamHandle
	}
	return 0
}

func (x *AudioStreamEvent) GetMessage() isAudioStreamEvent_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AudioStreamEvent) GetFrameReceived() *AudioFrameReceived {
	if x != nil {
		if x, ok := x.Message.(*AudioStreamEvent_FrameReceived); ok {
			return x.FrameReceived
		}
	}
	return nil
}

func (x *AudioStreamEvent) GetEos() *AudioStreamEOS {
	if x != nil {
		if x, ok := x.Message.(*AudioStreamEvent_Eos); ok {
			return x.Eos
		}
	}
	return nil
}

type isAudioStreamEvent_Message interface {
	isAudioStreamEvent_Message()
}

type AudioStreamEvent_FrameReceived struct {
	FrameReceived *AudioFrameReceived `protobuf:"bytes,2,opt,name=frame_received,json=frameReceived,proto3,oneof"`
}

type AudioStreamEvent_Eos struct {
	Eos *AudioStreamEOS `protobuf:"bytes,3,opt,name=eos,proto3,oneof"`
}

func (*AudioStreamEvent_FrameReceived) isAudioStreamEvent_Message() {}

func (*AudioStreamEvent_Eos) isAudioStreamEvent_Message() {}

type AudioFrameReceived struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Frame         *OwnedAudioFrameBuffer `protobuf:"bytes,1,opt,name=frame,proto3" json:"frame"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioFrameReceived) Reset() {
	*x = AudioFrameReceived{}
	mi := &file_audio_frame_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioFrameReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioFrameReceived) ProtoMessage() {}

func (x *AudioFrameReceived) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioFrameReceived.ProtoReflect.Descriptor instead.
func (*AudioFrameReceived) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{16}
}

func (x *AudioFrameReceived) GetFrame() *OwnedAudioFrameBuffer {
	if x != nil {
		return x.Frame
	}
	return nil
}

type AudioStreamEOS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioStreamEOS) Reset() {
	*x = AudioStreamEOS{}
	mi := &file_audio_frame_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioStreamEOS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioStreamEOS) ProtoMessage() {}

func (x *AudioStreamEOS) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioStreamEOS.ProtoReflect.Descriptor instead.
func (*AudioStreamEOS) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{17}
}

type AudioSourceOptions struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	EchoCancellation bool                   `protobuf:"varint,1,opt,name=echo_cancellation,json=echoCancellation,proto3" json:"echo_cancellation"`
	NoiseSuppression bool                   `protobuf:"varint,2,opt,name=noise_suppression,json=noiseSuppression,proto3" json:"noise_suppression"`
	AutoGainControl  bool                   `protobuf:"varint,3,opt,name=auto_gain_control,json=autoGainControl,proto3" json:"auto_gain_control"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AudioSourceOptions) Reset() {
	*x = AudioSourceOptions{}
	mi := &file_audio_frame_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioSourceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSourceOptions) ProtoMessage() {}

func (x *AudioSourceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSourceOptions.ProtoReflect.Descriptor instead.
func (*AudioSourceOptions) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{18}
}

func (x *AudioSourceOptions) GetEchoCancellation() bool {
	if x != nil {
		return x.EchoCancellation
	}
	return false
}

func (x *AudioSourceOptions) GetNoiseSuppression() bool {
	if x != nil {
		return x.NoiseSuppression
	}
	return false
}

func (x *AudioSourceOptions) GetAutoGainControl() bool {
	if x != nil {
		return x.AutoGainControl
	}
	return false
}

type AudioSourceInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          AudioSourceType        `protobuf:"varint,2,opt,name=type,proto3,enum=livekit.proto.AudioSourceType" json:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioSourceInfo) Reset() {
	*x = AudioSourceInfo{}
	mi := &file_audio_frame_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioSourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSourceInfo) ProtoMessage() {}

func (x *AudioSourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSourceInfo.ProtoReflect.Descriptor instead.
func (*AudioSourceInfo) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{19}
}

func (x *AudioSourceInfo) GetType() AudioSourceType {
	if x != nil {
		return x.Type
	}
	return AudioSourceType_AUDIO_SOURCE_NATIVE
}

type OwnedAudioSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Handle        *handle.FfiOwnedHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle"`
	Info          *AudioSourceInfo       `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnedAudioSource) Reset() {
	*x = OwnedAudioSource{}
	mi := &file_audio_frame_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnedAudioSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedAudioSource) ProtoMessage() {}

func (x *OwnedAudioSource) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedAudioSource.ProtoReflect.Descriptor instead.
func (*OwnedAudioSource) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{20}
}

func (x *OwnedAudioSource) GetHandle() *handle.FfiOwnedHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *OwnedAudioSource) GetInfo() *AudioSourceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AudioResamplerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioResamplerInfo) Reset() {
	*x = AudioResamplerInfo{}
	mi := &file_audio_frame_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioResamplerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioResamplerInfo) ProtoMessage() {}

func (x *AudioResamplerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioResamplerInfo.ProtoReflect.Descriptor instead.
func (*AudioResamplerInfo) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{21}
}

type OwnedAudioResampler struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Handle        *handle.FfiOwnedHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle"`
	Info          *AudioResamplerInfo    `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnedAudioResampler) Reset() {
	*x = OwnedAudioResampler{}
	mi := &file_audio_frame_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnedAudioResampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedAudioResampler) ProtoMessage() {}

func (x *OwnedAudioResampler) ProtoReflect() protoreflect.Message {
	mi := &file_audio_frame_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedAudioResampler.ProtoReflect.Descriptor instead.
func (*OwnedAudioResampler) Descriptor() ([]byte, []int) {
	return file_audio_frame_proto_rawDescGZIP(), []int{22}
}

func (x *OwnedAudioResampler) GetHandle() *handle.FfiOwnedHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *OwnedAudioResampler) GetInfo() *AudioResamplerInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_audio_frame_proto protoreflect.FileDescriptor

var file_audio_frame_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x6e, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x51, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x22, 0xcc, 0x01, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x22, 0x51, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e,
	0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x7c, 0x0a, 0x18, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x19, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x19, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1a, 0x0a, 0x18, 0x4e, 0x65, 0x77,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x19, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x69, 0x78, 0x41, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6e, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x18,
	0x52, 0x65, 0x6d, 0x69, 0x78, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x06,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x14, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x50, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x87,
	0x01, 0x0a, 0x15, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x66, 0x69, 0x4f, 0x77, 0x6e, 0x65,
	0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x7d, 0x0a, 0x10, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x66, 0x69, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc1,
	0x01, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x4f, 0x53,
	0x48, 0x00, 0x52, 0x03, 0x65, 0x6f, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x50, 0x0a, 0x12, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x05, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x4f, 0x53, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x63, 0x68, 0x6f, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x6f,
	0x69, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x67, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x22, 0x45, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7d, 0x0a, 0x10, 0x4f, 0x77,
	0x6e, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x66, 0x69, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x83, 0x01, 0x0a, 0x13, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x66, 0x69, 0x4f, 0x77, 0x6e, 0x65, 0x64,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x2a, 0x41, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x01, 0x2a, 0x2a, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x00, 0x42, 0x46, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2d, 0x72, 0x74, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0xaa, 0x02, 0x0d, 0x4c,
	0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audio_frame_proto_rawDescOnce sync.Once
	file_audio_frame_proto_rawDescData = file_audio_frame_proto_rawDesc
)

func file_audio_frame_proto_rawDescGZIP() []byte {
	file_audio_frame_proto_rawDescOnce.Do(func() {
		file_audio_frame_proto_rawDescData = protoimpl.X.CompressGZIP(file_audio_frame_proto_rawDescData)
	})
	return file_audio_frame_proto_rawDescData
}

var file_audio_frame_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_audio_frame_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_audio_frame_proto_goTypes = []any{
	(AudioStreamType)(0),              // 0: livekit.proto.AudioStreamType
	(AudioSourceType)(0),              // 1: livekit.proto.AudioSourceType
	(*NewAudioStreamRequest)(nil),     // 2: livekit.proto.NewAudioStreamRequest
	(*NewAudioStreamResponse)(nil),    // 3: livekit.proto.NewAudioStreamResponse
	(*NewAudioSourceRequest)(nil),     // 4: livekit.proto.NewAudioSourceRequest
	(*NewAudioSourceResponse)(nil),    // 5: livekit.proto.NewAudioSourceResponse
	(*CaptureAudioFrameRequest)(nil),  // 6: livekit.proto.CaptureAudioFrameRequest
	(*CaptureAudioFrameResponse)(nil), // 7: livekit.proto.CaptureAudioFrameResponse
	(*CaptureAudioFrameCallback)(nil), // 8: livekit.proto.CaptureAudioFrameCallback
	(*NewAudioResamplerRequest)(nil),  // 9: livekit.proto.NewAudioResamplerRequest
	(*NewAudioResamplerResponse)(nil), // 10: livekit.proto.NewAudioResamplerResponse
	(*RemixAndResampleRequest)(nil),   // 11: livekit.proto.RemixAndResampleRequest
	(*RemixAndResampleResponse)(nil),  // 12: livekit.proto.RemixAndResampleResponse
	(*AudioFrameBufferInfo)(nil),      // 13: livekit.proto.AudioFrameBufferInfo
	(*OwnedAudioFrameBuffer)(nil),     // 14: livekit.proto.OwnedAudioFrameBuffer
	(*AudioStreamInfo)(nil),           // 15: livekit.proto.AudioStreamInfo
	(*OwnedAudioStream)(nil),          // 16: livekit.proto.OwnedAudioStream
	(*AudioStreamEvent)(nil),          // 17: livekit.proto.AudioStreamEvent
	(*AudioFrameReceived)(nil),        // 18: livekit.proto.AudioFrameReceived
	(*AudioStreamEOS)(nil),            // 19: livekit.proto.AudioStreamEOS
	(*AudioSourceOptions)(nil),        // 20: livekit.proto.AudioSourceOptions
	(*AudioSourceInfo)(nil),           // 21: livekit.proto.AudioSourceInfo
	(*OwnedAudioSource)(nil),          // 22: livekit.proto.OwnedAudioSource
	(*AudioResamplerInfo)(nil),        // 23: livekit.proto.AudioResamplerInfo
	(*OwnedAudioResampler)(nil),       // 24: livekit.proto.OwnedAudioResampler
	(*handle.FfiOwnedHandle)(nil),     // 25: livekit.proto.FfiOwnedHandle
}
var file_audio_frame_proto_depIdxs = []int32{
	0,  // 0: livekit.proto.NewAudioStreamRequest.type:type_name -> livekit.proto.AudioStreamType
	16, // 1: livekit.proto.NewAudioStreamResponse.stream:type_name -> livekit.proto.OwnedAudioStream
	1,  // 2: livekit.proto.NewAudioSourceRequest.type:type_name -> livekit.proto.AudioSourceType
	20, // 3: livekit.proto.NewAudioSourceRequest.options:type_name -> livekit.proto.AudioSourceOptions
	22, // 4: livekit.proto.NewAudioSourceResponse.source:type_name -> livekit.proto.OwnedAudioSource
	13, // 5: livekit.proto.CaptureAudioFrameRequest.buffer:type_name -> livekit.proto.AudioFrameBufferInfo
	24, // 6: livekit.proto.NewAudioResamplerResponse.resampler:type_name -> livekit.proto.OwnedAudioResampler
	13, // 7: livekit.proto.RemixAndResampleRequest.buffer:type_name -> livekit.proto.AudioFrameBufferInfo
	14, // 8: livekit.proto.RemixAndResampleResponse.buffer:type_name -> livekit.proto.OwnedAudioFrameBuffer
	25, // 9: livekit.proto.OwnedAudioFrameBuffer.handle:type_name -> livekit.proto.FfiOwnedHandle
	13, // 10: livekit.proto.OwnedAudioFrameBuffer.info:type_name -> livekit.proto.AudioFrameBufferInfo
	0,  // 11: livekit.proto.AudioStreamInfo.type:type_name -> livekit.proto.AudioStreamType
	25, // 12: livekit.proto.OwnedAudioStream.handle:type_name -> livekit.proto.FfiOwnedHandle
	15, // 13: livekit.proto.OwnedAudioStream.info:type_name -> livekit.proto.AudioStreamInfo
	18, // 14: livekit.proto.AudioStreamEvent.frame_received:type_name -> livekit.proto.AudioFrameReceived
	19, // 15: livekit.proto.AudioStreamEvent.eos:type_name -> livekit.proto.AudioStreamEOS
	14, // 16: livekit.proto.AudioFrameReceived.frame:type_name -> livekit.proto.OwnedAudioFrameBuffer
	1,  // 17: livekit.proto.AudioSourceInfo.type:type_name -> livekit.proto.AudioSourceType
	25, // 18: livekit.proto.OwnedAudioSource.handle:type_name -> livekit.proto.FfiOwnedHandle
	21, // 19: livekit.proto.OwnedAudioSource.info:type_name -> livekit.proto.AudioSourceInfo
	25, // 20: livekit.proto.OwnedAudioResampler.handle:type_name -> livekit.proto.FfiOwnedHandle
	23, // 21: livekit.proto.OwnedAudioResampler.info:type_name -> livekit.proto.AudioResamplerInfo
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_audio_frame_proto_init() }
func file_audio_frame_proto_init() {
	if File_audio_frame_proto != nil {
		return
	}
	file_audio_frame_proto_msgTypes[15].OneofWrappers = []any{
		(*AudioStreamEvent_FrameReceived)(nil),
		(*AudioStreamEvent_Eos)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audio_frame_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_audio_frame_proto_goTypes,
		DependencyIndexes: file_audio_frame_proto_depIdxs,
		EnumInfos:         file_audio_frame_proto_enumTypes,
		MessageInfos:      file_audio_frame_proto_msgTypes,
	}.Build()
	File_audio_frame_proto = out.File
	file_audio_frame_proto_rawDesc = nil
	file_audio_frame_proto_goTypes = nil
	file_audio_frame_proto_depIdxs = nil
}
