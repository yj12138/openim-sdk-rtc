// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.27.1
// source: e2ee.proto

package e2ee

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncryptionType int32

const (
	EncryptionType_NONE   EncryptionType = 0
	EncryptionType_GCM    EncryptionType = 1
	EncryptionType_CUSTOM EncryptionType = 2
)

// Enum value maps for EncryptionType.
var (
	EncryptionType_name = map[int32]string{
		0: "NONE",
		1: "GCM",
		2: "CUSTOM",
	}
	EncryptionType_value = map[string]int32{
		"NONE":   0,
		"GCM":    1,
		"CUSTOM": 2,
	}
)

func (x EncryptionType) Enum() *EncryptionType {
	p := new(EncryptionType)
	*p = x
	return p
}

func (x EncryptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_e2ee_proto_enumTypes[0].Descriptor()
}

func (EncryptionType) Type() protoreflect.EnumType {
	return &file_e2ee_proto_enumTypes[0]
}

func (x EncryptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptionType.Descriptor instead.
func (EncryptionType) EnumDescriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{0}
}

type EncryptionState int32

const (
	EncryptionState_NEW               EncryptionState = 0
	EncryptionState_OK                EncryptionState = 1
	EncryptionState_ENCRYPTION_FAILED EncryptionState = 2
	EncryptionState_DECRYPTION_FAILED EncryptionState = 3
	EncryptionState_MISSING_KEY       EncryptionState = 4
	EncryptionState_KEY_RATCHETED     EncryptionState = 5
	EncryptionState_INTERNAL_ERROR    EncryptionState = 6
)

// Enum value maps for EncryptionState.
var (
	EncryptionState_name = map[int32]string{
		0: "NEW",
		1: "OK",
		2: "ENCRYPTION_FAILED",
		3: "DECRYPTION_FAILED",
		4: "MISSING_KEY",
		5: "KEY_RATCHETED",
		6: "INTERNAL_ERROR",
	}
	EncryptionState_value = map[string]int32{
		"NEW":               0,
		"OK":                1,
		"ENCRYPTION_FAILED": 2,
		"DECRYPTION_FAILED": 3,
		"MISSING_KEY":       4,
		"KEY_RATCHETED":     5,
		"INTERNAL_ERROR":    6,
	}
)

func (x EncryptionState) Enum() *EncryptionState {
	p := new(EncryptionState)
	*p = x
	return p
}

func (x EncryptionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptionState) Descriptor() protoreflect.EnumDescriptor {
	return file_e2ee_proto_enumTypes[1].Descriptor()
}

func (EncryptionState) Type() protoreflect.EnumType {
	return &file_e2ee_proto_enumTypes[1]
}

func (x EncryptionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptionState.Descriptor instead.
func (EncryptionState) EnumDescriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{1}
}

type FrameCryptor struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ParticipantIdentity string                 `protobuf:"bytes,1,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity"`
	TrackSid            string                 `protobuf:"bytes,2,opt,name=track_sid,json=trackSid,proto3" json:"track_sid"`
	KeyIndex            int32                  `protobuf:"varint,3,opt,name=key_index,json=keyIndex,proto3" json:"key_index"`
	Enabled             bool                   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FrameCryptor) Reset() {
	*x = FrameCryptor{}
	mi := &file_e2ee_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrameCryptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameCryptor) ProtoMessage() {}

func (x *FrameCryptor) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameCryptor.ProtoReflect.Descriptor instead.
func (*FrameCryptor) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{0}
}

func (x *FrameCryptor) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *FrameCryptor) GetTrackSid() string {
	if x != nil {
		return x.TrackSid
	}
	return ""
}

func (x *FrameCryptor) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

func (x *FrameCryptor) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type KeyProviderOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Only specify if you want to use a shared_key
	SharedKey         []byte `protobuf:"bytes,1,opt,name=shared_key,json=sharedKey,proto3" json:"shared_key"`
	RatchetWindowSize int32  `protobuf:"varint,2,opt,name=ratchet_window_size,json=ratchetWindowSize,proto3" json:"ratchet_window_size"`
	RatchetSalt       []byte `protobuf:"bytes,3,opt,name=ratchet_salt,json=ratchetSalt,proto3" json:"ratchet_salt"`
	FailureTolerance  int32  `protobuf:"varint,4,opt,name=failure_tolerance,json=failureTolerance,proto3" json:"failure_tolerance"` // -1 = no tolerence
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *KeyProviderOptions) Reset() {
	*x = KeyProviderOptions{}
	mi := &file_e2ee_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyProviderOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyProviderOptions) ProtoMessage() {}

func (x *KeyProviderOptions) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyProviderOptions.ProtoReflect.Descriptor instead.
func (*KeyProviderOptions) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{1}
}

func (x *KeyProviderOptions) GetSharedKey() []byte {
	if x != nil {
		return x.SharedKey
	}
	return nil
}

func (x *KeyProviderOptions) GetRatchetWindowSize() int32 {
	if x != nil {
		return x.RatchetWindowSize
	}
	return 0
}

func (x *KeyProviderOptions) GetRatchetSalt() []byte {
	if x != nil {
		return x.RatchetSalt
	}
	return nil
}

func (x *KeyProviderOptions) GetFailureTolerance() int32 {
	if x != nil {
		return x.FailureTolerance
	}
	return 0
}

type E2EeOptions struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	EncryptionType     EncryptionType         `protobuf:"varint,1,opt,name=encryption_type,json=encryptionType,proto3,enum=livekit.proto.EncryptionType" json:"encryption_type"`
	KeyProviderOptions *KeyProviderOptions    `protobuf:"bytes,2,opt,name=key_provider_options,json=keyProviderOptions,proto3" json:"key_provider_options"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *E2EeOptions) Reset() {
	*x = E2EeOptions{}
	mi := &file_e2ee_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2EeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2EeOptions) ProtoMessage() {}

func (x *E2EeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2EeOptions.ProtoReflect.Descriptor instead.
func (*E2EeOptions) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{2}
}

func (x *E2EeOptions) GetEncryptionType() EncryptionType {
	if x != nil {
		return x.EncryptionType
	}
	return EncryptionType_NONE
}

func (x *E2EeOptions) GetKeyProviderOptions() *KeyProviderOptions {
	if x != nil {
		return x.KeyProviderOptions
	}
	return nil
}

type E2EeManagerSetEnabledRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2EeManagerSetEnabledRequest) Reset() {
	*x = E2EeManagerSetEnabledRequest{}
	mi := &file_e2ee_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2EeManagerSetEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2EeManagerSetEnabledRequest) ProtoMessage() {}

func (x *E2EeManagerSetEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2EeManagerSetEnabledRequest.ProtoReflect.Descriptor instead.
func (*E2EeManagerSetEnabledRequest) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{3}
}

func (x *E2EeManagerSetEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type E2EeManagerSetEnabledResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2EeManagerSetEnabledResponse) Reset() {
	*x = E2EeManagerSetEnabledResponse{}
	mi := &file_e2ee_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2EeManagerSetEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2EeManagerSetEnabledResponse) ProtoMessage() {}

func (x *E2EeManagerSetEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2EeManagerSetEnabledResponse.ProtoReflect.Descriptor instead.
func (*E2EeManagerSetEnabledResponse) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{4}
}

type E2EeManagerGetFrameCryptorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2EeManagerGetFrameCryptorsRequest) Reset() {
	*x = E2EeManagerGetFrameCryptorsRequest{}
	mi := &file_e2ee_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2EeManagerGetFrameCryptorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2EeManagerGetFrameCryptorsRequest) ProtoMessage() {}

func (x *E2EeManagerGetFrameCryptorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2EeManagerGetFrameCryptorsRequest.ProtoReflect.Descriptor instead.
func (*E2EeManagerGetFrameCryptorsRequest) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{5}
}

type E2EeManagerGetFrameCryptorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FrameCryptors []*FrameCryptor        `protobuf:"bytes,1,rep,name=frame_cryptors,json=frameCryptors,proto3" json:"frame_cryptors"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2EeManagerGetFrameCryptorsResponse) Reset() {
	*x = E2EeManagerGetFrameCryptorsResponse{}
	mi := &file_e2ee_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2EeManagerGetFrameCryptorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2EeManagerGetFrameCryptorsResponse) ProtoMessage() {}

func (x *E2EeManagerGetFrameCryptorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2EeManagerGetFrameCryptorsResponse.ProtoReflect.Descriptor instead.
func (*E2EeManagerGetFrameCryptorsResponse) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{6}
}

func (x *E2EeManagerGetFrameCryptorsResponse) GetFrameCryptors() []*FrameCryptor {
	if x != nil {
		return x.FrameCryptors
	}
	return nil
}

type FrameCryptorSetEnabledRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ParticipantIdentity string                 `protobuf:"bytes,1,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity"`
	TrackSid            string                 `protobuf:"bytes,2,opt,name=track_sid,json=trackSid,proto3" json:"track_sid"`
	Enabled             bool                   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FrameCryptorSetEnabledRequest) Reset() {
	*x = FrameCryptorSetEnabledRequest{}
	mi := &file_e2ee_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrameCryptorSetEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameCryptorSetEnabledRequest) ProtoMessage() {}

func (x *FrameCryptorSetEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameCryptorSetEnabledRequest.ProtoReflect.Descriptor instead.
func (*FrameCryptorSetEnabledRequest) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{7}
}

func (x *FrameCryptorSetEnabledRequest) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *FrameCryptorSetEnabledRequest) GetTrackSid() string {
	if x != nil {
		return x.TrackSid
	}
	return ""
}

func (x *FrameCryptorSetEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type FrameCryptorSetEnabledResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrameCryptorSetEnabledResponse) Reset() {
	*x = FrameCryptorSetEnabledResponse{}
	mi := &file_e2ee_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrameCryptorSetEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameCryptorSetEnabledResponse) ProtoMessage() {}

func (x *FrameCryptorSetEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameCryptorSetEnabledResponse.ProtoReflect.Descriptor instead.
func (*FrameCryptorSetEnabledResponse) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{8}
}

type FrameCryptorSetKeyIndexRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ParticipantIdentity string                 `protobuf:"bytes,1,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity"`
	TrackSid            string                 `protobuf:"bytes,2,opt,name=track_sid,json=trackSid,proto3" json:"track_sid"`
	KeyIndex            int32                  `protobuf:"varint,3,opt,name=key_index,json=keyIndex,proto3" json:"key_index"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FrameCryptorSetKeyIndexRequest) Reset() {
	*x = FrameCryptorSetKeyIndexRequest{}
	mi := &file_e2ee_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrameCryptorSetKeyIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameCryptorSetKeyIndexRequest) ProtoMessage() {}

func (x *FrameCryptorSetKeyIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameCryptorSetKeyIndexRequest.ProtoReflect.Descriptor instead.
func (*FrameCryptorSetKeyIndexRequest) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{9}
}

func (x *FrameCryptorSetKeyIndexRequest) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *FrameCryptorSetKeyIndexRequest) GetTrackSid() string {
	if x != nil {
		return x.TrackSid
	}
	return ""
}

func (x *FrameCryptorSetKeyIndexRequest) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type FrameCryptorSetKeyIndexResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrameCryptorSetKeyIndexResponse) Reset() {
	*x = FrameCryptorSetKeyIndexResponse{}
	mi := &file_e2ee_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrameCryptorSetKeyIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameCryptorSetKeyIndexResponse) ProtoMessage() {}

func (x *FrameCryptorSetKeyIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameCryptorSetKeyIndexResponse.ProtoReflect.Descriptor instead.
func (*FrameCryptorSetKeyIndexResponse) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{10}
}

type SetSharedKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SharedKey     []byte                 `protobuf:"bytes,1,opt,name=shared_key,json=sharedKey,proto3" json:"shared_key"`
	KeyIndex      int32                  `protobuf:"varint,2,opt,name=key_index,json=keyIndex,proto3" json:"key_index"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSharedKeyRequest) Reset() {
	*x = SetSharedKeyRequest{}
	mi := &file_e2ee_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSharedKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSharedKeyRequest) ProtoMessage() {}

func (x *SetSharedKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSharedKeyRequest.ProtoReflect.Descriptor instead.
func (*SetSharedKeyRequest) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{11}
}

func (x *SetSharedKeyRequest) GetSharedKey() []byte {
	if x != nil {
		return x.SharedKey
	}
	return nil
}

func (x *SetSharedKeyRequest) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type SetSharedKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSharedKeyResponse) Reset() {
	*x = SetSharedKeyResponse{}
	mi := &file_e2ee_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSharedKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSharedKeyResponse) ProtoMessage() {}

func (x *SetSharedKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSharedKeyResponse.ProtoReflect.Descriptor instead.
func (*SetSharedKeyResponse) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{12}
}

type RatchetSharedKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyIndex      int32                  `protobuf:"varint,1,opt,name=key_index,json=keyIndex,proto3" json:"key_index"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RatchetSharedKeyRequest) Reset() {
	*x = RatchetSharedKeyRequest{}
	mi := &file_e2ee_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RatchetSharedKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatchetSharedKeyRequest) ProtoMessage() {}

func (x *RatchetSharedKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatchetSharedKeyRequest.ProtoReflect.Descriptor instead.
func (*RatchetSharedKeyRequest) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{13}
}

func (x *RatchetSharedKeyRequest) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type RatchetSharedKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NewKey        []byte                 `protobuf:"bytes,1,opt,name=new_key,json=newKey,proto3" json:"new_key"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RatchetSharedKeyResponse) Reset() {
	*x = RatchetSharedKeyResponse{}
	mi := &file_e2ee_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RatchetSharedKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatchetSharedKeyResponse) ProtoMessage() {}

func (x *RatchetSharedKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatchetSharedKeyResponse.ProtoReflect.Descriptor instead.
func (*RatchetSharedKeyResponse) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{14}
}

func (x *RatchetSharedKeyResponse) GetNewKey() []byte {
	if x != nil {
		return x.NewKey
	}
	return nil
}

type GetSharedKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyIndex      int32                  `protobuf:"varint,1,opt,name=key_index,json=keyIndex,proto3" json:"key_index"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSharedKeyRequest) Reset() {
	*x = GetSharedKeyRequest{}
	mi := &file_e2ee_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSharedKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSharedKeyRequest) ProtoMessage() {}

func (x *GetSharedKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSharedKeyRequest.ProtoReflect.Descriptor instead.
func (*GetSharedKeyRequest) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{15}
}

func (x *GetSharedKeyRequest) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type GetSharedKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSharedKeyResponse) Reset() {
	*x = GetSharedKeyResponse{}
	mi := &file_e2ee_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSharedKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSharedKeyResponse) ProtoMessage() {}

func (x *GetSharedKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSharedKeyResponse.ProtoReflect.Descriptor instead.
func (*GetSharedKeyResponse) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{16}
}

func (x *GetSharedKeyResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type SetKeyRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ParticipantIdentity string                 `protobuf:"bytes,1,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity"`
	Key                 []byte                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	KeyIndex            int32                  `protobuf:"varint,3,opt,name=key_index,json=keyIndex,proto3" json:"key_index"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SetKeyRequest) Reset() {
	*x = SetKeyRequest{}
	mi := &file_e2ee_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyRequest) ProtoMessage() {}

func (x *SetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyRequest.ProtoReflect.Descriptor instead.
func (*SetKeyRequest) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{17}
}

func (x *SetKeyRequest) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *SetKeyRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SetKeyRequest) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type SetKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetKeyResponse) Reset() {
	*x = SetKeyResponse{}
	mi := &file_e2ee_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeyResponse) ProtoMessage() {}

func (x *SetKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeyResponse.ProtoReflect.Descriptor instead.
func (*SetKeyResponse) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{18}
}

type RatchetKeyRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ParticipantIdentity string                 `protobuf:"bytes,1,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity"`
	KeyIndex            int32                  `protobuf:"varint,2,opt,name=key_index,json=keyIndex,proto3" json:"key_index"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RatchetKeyRequest) Reset() {
	*x = RatchetKeyRequest{}
	mi := &file_e2ee_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RatchetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatchetKeyRequest) ProtoMessage() {}

func (x *RatchetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatchetKeyRequest.ProtoReflect.Descriptor instead.
func (*RatchetKeyRequest) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{19}
}

func (x *RatchetKeyRequest) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *RatchetKeyRequest) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type RatchetKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NewKey        []byte                 `protobuf:"bytes,1,opt,name=new_key,json=newKey,proto3" json:"new_key"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RatchetKeyResponse) Reset() {
	*x = RatchetKeyResponse{}
	mi := &file_e2ee_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RatchetKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatchetKeyResponse) ProtoMessage() {}

func (x *RatchetKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatchetKeyResponse.ProtoReflect.Descriptor instead.
func (*RatchetKeyResponse) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{20}
}

func (x *RatchetKeyResponse) GetNewKey() []byte {
	if x != nil {
		return x.NewKey
	}
	return nil
}

type GetKeyRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ParticipantIdentity string                 `protobuf:"bytes,1,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity"`
	KeyIndex            int32                  `protobuf:"varint,2,opt,name=key_index,json=keyIndex,proto3" json:"key_index"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetKeyRequest) Reset() {
	*x = GetKeyRequest{}
	mi := &file_e2ee_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRequest) ProtoMessage() {}

func (x *GetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRequest) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{21}
}

func (x *GetKeyRequest) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *GetKeyRequest) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type GetKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKeyResponse) Reset() {
	*x = GetKeyResponse{}
	mi := &file_e2ee_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyResponse) ProtoMessage() {}

func (x *GetKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyResponse.ProtoReflect.Descriptor instead.
func (*GetKeyResponse) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{22}
}

func (x *GetKeyResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type E2EeRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	RoomHandle uint64                 `protobuf:"varint,1,opt,name=room_handle,json=roomHandle,proto3" json:"room_handle"`
	// Types that are valid to be assigned to Message:
	//
	//	*E2EeRequest_ManagerSetEnabled
	//	*E2EeRequest_ManagerGetFrameCryptors
	//	*E2EeRequest_CryptorSetEnabled
	//	*E2EeRequest_CryptorSetKeyIndex
	//	*E2EeRequest_SetSharedKey
	//	*E2EeRequest_RatchetSharedKey
	//	*E2EeRequest_GetSharedKey
	//	*E2EeRequest_SetKey
	//	*E2EeRequest_RatchetKey
	//	*E2EeRequest_GetKey
	Message       isE2EeRequest_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2EeRequest) Reset() {
	*x = E2EeRequest{}
	mi := &file_e2ee_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2EeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2EeRequest) ProtoMessage() {}

func (x *E2EeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2EeRequest.ProtoReflect.Descriptor instead.
func (*E2EeRequest) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{23}
}

func (x *E2EeRequest) GetRoomHandle() uint64 {
	if x != nil {
		return x.RoomHandle
	}
	return 0
}

func (x *E2EeRequest) GetMessage() isE2EeRequest_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *E2EeRequest) GetManagerSetEnabled() *E2EeManagerSetEnabledRequest {
	if x != nil {
		if x, ok := x.Message.(*E2EeRequest_ManagerSetEnabled); ok {
			return x.ManagerSetEnabled
		}
	}
	return nil
}

func (x *E2EeRequest) GetManagerGetFrameCryptors() *E2EeManagerGetFrameCryptorsRequest {
	if x != nil {
		if x, ok := x.Message.(*E2EeRequest_ManagerGetFrameCryptors); ok {
			return x.ManagerGetFrameCryptors
		}
	}
	return nil
}

func (x *E2EeRequest) GetCryptorSetEnabled() *FrameCryptorSetEnabledRequest {
	if x != nil {
		if x, ok := x.Message.(*E2EeRequest_CryptorSetEnabled); ok {
			return x.CryptorSetEnabled
		}
	}
	return nil
}

func (x *E2EeRequest) GetCryptorSetKeyIndex() *FrameCryptorSetKeyIndexRequest {
	if x != nil {
		if x, ok := x.Message.(*E2EeRequest_CryptorSetKeyIndex); ok {
			return x.CryptorSetKeyIndex
		}
	}
	return nil
}

func (x *E2EeRequest) GetSetSharedKey() *SetSharedKeyRequest {
	if x != nil {
		if x, ok := x.Message.(*E2EeRequest_SetSharedKey); ok {
			return x.SetSharedKey
		}
	}
	return nil
}

func (x *E2EeRequest) GetRatchetSharedKey() *RatchetSharedKeyRequest {
	if x != nil {
		if x, ok := x.Message.(*E2EeRequest_RatchetSharedKey); ok {
			return x.RatchetSharedKey
		}
	}
	return nil
}

func (x *E2EeRequest) GetGetSharedKey() *GetSharedKeyRequest {
	if x != nil {
		if x, ok := x.Message.(*E2EeRequest_GetSharedKey); ok {
			return x.GetSharedKey
		}
	}
	return nil
}

func (x *E2EeRequest) GetSetKey() *SetKeyRequest {
	if x != nil {
		if x, ok := x.Message.(*E2EeRequest_SetKey); ok {
			return x.SetKey
		}
	}
	return nil
}

func (x *E2EeRequest) GetRatchetKey() *RatchetKeyRequest {
	if x != nil {
		if x, ok := x.Message.(*E2EeRequest_RatchetKey); ok {
			return x.RatchetKey
		}
	}
	return nil
}

func (x *E2EeRequest) GetGetKey() *GetKeyRequest {
	if x != nil {
		if x, ok := x.Message.(*E2EeRequest_GetKey); ok {
			return x.GetKey
		}
	}
	return nil
}

type isE2EeRequest_Message interface {
	isE2EeRequest_Message()
}

type E2EeRequest_ManagerSetEnabled struct {
	ManagerSetEnabled *E2EeManagerSetEnabledRequest `protobuf:"bytes,2,opt,name=manager_set_enabled,json=managerSetEnabled,proto3,oneof"`
}

type E2EeRequest_ManagerGetFrameCryptors struct {
	ManagerGetFrameCryptors *E2EeManagerGetFrameCryptorsRequest `protobuf:"bytes,3,opt,name=manager_get_frame_cryptors,json=managerGetFrameCryptors,proto3,oneof"`
}

type E2EeRequest_CryptorSetEnabled struct {
	CryptorSetEnabled *FrameCryptorSetEnabledRequest `protobuf:"bytes,4,opt,name=cryptor_set_enabled,json=cryptorSetEnabled,proto3,oneof"`
}

type E2EeRequest_CryptorSetKeyIndex struct {
	CryptorSetKeyIndex *FrameCryptorSetKeyIndexRequest `protobuf:"bytes,5,opt,name=cryptor_set_key_index,json=cryptorSetKeyIndex,proto3,oneof"`
}

type E2EeRequest_SetSharedKey struct {
	SetSharedKey *SetSharedKeyRequest `protobuf:"bytes,6,opt,name=set_shared_key,json=setSharedKey,proto3,oneof"`
}

type E2EeRequest_RatchetSharedKey struct {
	RatchetSharedKey *RatchetSharedKeyRequest `protobuf:"bytes,7,opt,name=ratchet_shared_key,json=ratchetSharedKey,proto3,oneof"`
}

type E2EeRequest_GetSharedKey struct {
	GetSharedKey *GetSharedKeyRequest `protobuf:"bytes,8,opt,name=get_shared_key,json=getSharedKey,proto3,oneof"`
}

type E2EeRequest_SetKey struct {
	SetKey *SetKeyRequest `protobuf:"bytes,9,opt,name=set_key,json=setKey,proto3,oneof"`
}

type E2EeRequest_RatchetKey struct {
	RatchetKey *RatchetKeyRequest `protobuf:"bytes,10,opt,name=ratchet_key,json=ratchetKey,proto3,oneof"`
}

type E2EeRequest_GetKey struct {
	GetKey *GetKeyRequest `protobuf:"bytes,11,opt,name=get_key,json=getKey,proto3,oneof"`
}

func (*E2EeRequest_ManagerSetEnabled) isE2EeRequest_Message() {}

func (*E2EeRequest_ManagerGetFrameCryptors) isE2EeRequest_Message() {}

func (*E2EeRequest_CryptorSetEnabled) isE2EeRequest_Message() {}

func (*E2EeRequest_CryptorSetKeyIndex) isE2EeRequest_Message() {}

func (*E2EeRequest_SetSharedKey) isE2EeRequest_Message() {}

func (*E2EeRequest_RatchetSharedKey) isE2EeRequest_Message() {}

func (*E2EeRequest_GetSharedKey) isE2EeRequest_Message() {}

func (*E2EeRequest_SetKey) isE2EeRequest_Message() {}

func (*E2EeRequest_RatchetKey) isE2EeRequest_Message() {}

func (*E2EeRequest_GetKey) isE2EeRequest_Message() {}

type E2EeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*E2EeResponse_ManagerSetEnabled
	//	*E2EeResponse_ManagerGetFrameCryptors
	//	*E2EeResponse_CryptorSetEnabled
	//	*E2EeResponse_CryptorSetKeyIndex
	//	*E2EeResponse_SetSharedKey
	//	*E2EeResponse_RatchetSharedKey
	//	*E2EeResponse_GetSharedKey
	//	*E2EeResponse_SetKey
	//	*E2EeResponse_RatchetKey
	//	*E2EeResponse_GetKey
	Message       isE2EeResponse_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *E2EeResponse) Reset() {
	*x = E2EeResponse{}
	mi := &file_e2ee_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2EeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2EeResponse) ProtoMessage() {}

func (x *E2EeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_e2ee_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2EeResponse.ProtoReflect.Descriptor instead.
func (*E2EeResponse) Descriptor() ([]byte, []int) {
	return file_e2ee_proto_rawDescGZIP(), []int{24}
}

func (x *E2EeResponse) GetMessage() isE2EeResponse_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *E2EeResponse) GetManagerSetEnabled() *E2EeManagerSetEnabledResponse {
	if x != nil {
		if x, ok := x.Message.(*E2EeResponse_ManagerSetEnabled); ok {
			return x.ManagerSetEnabled
		}
	}
	return nil
}

func (x *E2EeResponse) GetManagerGetFrameCryptors() *E2EeManagerGetFrameCryptorsResponse {
	if x != nil {
		if x, ok := x.Message.(*E2EeResponse_ManagerGetFrameCryptors); ok {
			return x.ManagerGetFrameCryptors
		}
	}
	return nil
}

func (x *E2EeResponse) GetCryptorSetEnabled() *FrameCryptorSetEnabledResponse {
	if x != nil {
		if x, ok := x.Message.(*E2EeResponse_CryptorSetEnabled); ok {
			return x.CryptorSetEnabled
		}
	}
	return nil
}

func (x *E2EeResponse) GetCryptorSetKeyIndex() *FrameCryptorSetKeyIndexResponse {
	if x != nil {
		if x, ok := x.Message.(*E2EeResponse_CryptorSetKeyIndex); ok {
			return x.CryptorSetKeyIndex
		}
	}
	return nil
}

func (x *E2EeResponse) GetSetSharedKey() *SetSharedKeyResponse {
	if x != nil {
		if x, ok := x.Message.(*E2EeResponse_SetSharedKey); ok {
			return x.SetSharedKey
		}
	}
	return nil
}

func (x *E2EeResponse) GetRatchetSharedKey() *RatchetSharedKeyResponse {
	if x != nil {
		if x, ok := x.Message.(*E2EeResponse_RatchetSharedKey); ok {
			return x.RatchetSharedKey
		}
	}
	return nil
}

func (x *E2EeResponse) GetGetSharedKey() *GetSharedKeyResponse {
	if x != nil {
		if x, ok := x.Message.(*E2EeResponse_GetSharedKey); ok {
			return x.GetSharedKey
		}
	}
	return nil
}

func (x *E2EeResponse) GetSetKey() *SetKeyResponse {
	if x != nil {
		if x, ok := x.Message.(*E2EeResponse_SetKey); ok {
			return x.SetKey
		}
	}
	return nil
}

func (x *E2EeResponse) GetRatchetKey() *RatchetKeyResponse {
	if x != nil {
		if x, ok := x.Message.(*E2EeResponse_RatchetKey); ok {
			return x.RatchetKey
		}
	}
	return nil
}

func (x *E2EeResponse) GetGetKey() *GetKeyResponse {
	if x != nil {
		if x, ok := x.Message.(*E2EeResponse_GetKey); ok {
			return x.GetKey
		}
	}
	return nil
}

type isE2EeResponse_Message interface {
	isE2EeResponse_Message()
}

type E2EeResponse_ManagerSetEnabled struct {
	ManagerSetEnabled *E2EeManagerSetEnabledResponse `protobuf:"bytes,1,opt,name=manager_set_enabled,json=managerSetEnabled,proto3,oneof"`
}

type E2EeResponse_ManagerGetFrameCryptors struct {
	ManagerGetFrameCryptors *E2EeManagerGetFrameCryptorsResponse `protobuf:"bytes,2,opt,name=manager_get_frame_cryptors,json=managerGetFrameCryptors,proto3,oneof"`
}

type E2EeResponse_CryptorSetEnabled struct {
	CryptorSetEnabled *FrameCryptorSetEnabledResponse `protobuf:"bytes,3,opt,name=cryptor_set_enabled,json=cryptorSetEnabled,proto3,oneof"`
}

type E2EeResponse_CryptorSetKeyIndex struct {
	CryptorSetKeyIndex *FrameCryptorSetKeyIndexResponse `protobuf:"bytes,4,opt,name=cryptor_set_key_index,json=cryptorSetKeyIndex,proto3,oneof"`
}

type E2EeResponse_SetSharedKey struct {
	SetSharedKey *SetSharedKeyResponse `protobuf:"bytes,5,opt,name=set_shared_key,json=setSharedKey,proto3,oneof"`
}

type E2EeResponse_RatchetSharedKey struct {
	RatchetSharedKey *RatchetSharedKeyResponse `protobuf:"bytes,6,opt,name=ratchet_shared_key,json=ratchetSharedKey,proto3,oneof"`
}

type E2EeResponse_GetSharedKey struct {
	GetSharedKey *GetSharedKeyResponse `protobuf:"bytes,7,opt,name=get_shared_key,json=getSharedKey,proto3,oneof"`
}

type E2EeResponse_SetKey struct {
	SetKey *SetKeyResponse `protobuf:"bytes,8,opt,name=set_key,json=setKey,proto3,oneof"`
}

type E2EeResponse_RatchetKey struct {
	RatchetKey *RatchetKeyResponse `protobuf:"bytes,9,opt,name=ratchet_key,json=ratchetKey,proto3,oneof"`
}

type E2EeResponse_GetKey struct {
	GetKey *GetKeyResponse `protobuf:"bytes,10,opt,name=get_key,json=getKey,proto3,oneof"`
}

func (*E2EeResponse_ManagerSetEnabled) isE2EeResponse_Message() {}

func (*E2EeResponse_ManagerGetFrameCryptors) isE2EeResponse_Message() {}

func (*E2EeResponse_CryptorSetEnabled) isE2EeResponse_Message() {}

func (*E2EeResponse_CryptorSetKeyIndex) isE2EeResponse_Message() {}

func (*E2EeResponse_SetSharedKey) isE2EeResponse_Message() {}

func (*E2EeResponse_RatchetSharedKey) isE2EeResponse_Message() {}

func (*E2EeResponse_GetSharedKey) isE2EeResponse_Message() {}

func (*E2EeResponse_SetKey) isE2EeResponse_Message() {}

func (*E2EeResponse_RatchetKey) isE2EeResponse_Message() {}

func (*E2EeResponse_GetKey) isE2EeResponse_Message() {}

var File_e2ee_proto protoreflect.FileDescriptor

var file_e2ee_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x65, 0x32, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x0c,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x14,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0b, 0x45, 0x32,
	0x65, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x53, 0x0a, 0x14, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x12, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x38, 0x0a, 0x1c, 0x45, 0x32, 0x65, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x1f, 0x0a, 0x1d, 0x45, 0x32, 0x65, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x0a, 0x22, 0x45, 0x32, 0x65, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x23, 0x45, 0x32, 0x65, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x53, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x20,
	0x0a, 0x1e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x1e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x21, 0x0a, 0x1f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36,
	0x0a, 0x17, 0x52, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x33, 0x0a, 0x18, 0x52, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x22, 0x32, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x28, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x71, 0x0a, 0x0d, 0x53, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x10, 0x0a, 0x0e,
	0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63,
	0x0a, 0x11, 0x52, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x2d, 0x0a, 0x12, 0x52, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x4b,
	0x65, 0x79, 0x22, 0x5f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xf5, 0x06, 0x0a, 0x0b, 0x45, 0x32, 0x65, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x6f,
	0x6f, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x5d, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x32, 0x65, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x32, 0x65, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x17, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x13, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x53,
	0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x15, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4a, 0x0a,
	0x0e, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x12, 0x72, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x67, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x07, 0x73, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x67,
	0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xdf, 0x06, 0x0a, 0x0c, 0x45, 0x32, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5e, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x32,
	0x65, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x71, 0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x32, 0x65, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x15, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x65, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x57, 0x0a, 0x12, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x72,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12,
	0x4b, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x67, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x07,
	0x73, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x61, 0x74, 0x63, 0x68, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x07,
	0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2a, 0x2f, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x43, 0x4d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x10, 0x02, 0x2a, 0x88, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x43, 0x52, 0x59,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x41,
	0x54, 0x43, 0x48, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x42, 0x3f, 0x5a,
	0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2d, 0x72, 0x74, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x32, 0x65, 0x65, 0xaa, 0x02,
	0x0d, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_e2ee_proto_rawDescOnce sync.Once
	file_e2ee_proto_rawDescData = file_e2ee_proto_rawDesc
)

func file_e2ee_proto_rawDescGZIP() []byte {
	file_e2ee_proto_rawDescOnce.Do(func() {
		file_e2ee_proto_rawDescData = protoimpl.X.CompressGZIP(file_e2ee_proto_rawDescData)
	})
	return file_e2ee_proto_rawDescData
}

var file_e2ee_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_e2ee_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_e2ee_proto_goTypes = []any{
	(EncryptionType)(0),                         // 0: livekit.proto.EncryptionType
	(EncryptionState)(0),                        // 1: livekit.proto.EncryptionState
	(*FrameCryptor)(nil),                        // 2: livekit.proto.FrameCryptor
	(*KeyProviderOptions)(nil),                  // 3: livekit.proto.KeyProviderOptions
	(*E2EeOptions)(nil),                         // 4: livekit.proto.E2eeOptions
	(*E2EeManagerSetEnabledRequest)(nil),        // 5: livekit.proto.E2eeManagerSetEnabledRequest
	(*E2EeManagerSetEnabledResponse)(nil),       // 6: livekit.proto.E2eeManagerSetEnabledResponse
	(*E2EeManagerGetFrameCryptorsRequest)(nil),  // 7: livekit.proto.E2eeManagerGetFrameCryptorsRequest
	(*E2EeManagerGetFrameCryptorsResponse)(nil), // 8: livekit.proto.E2eeManagerGetFrameCryptorsResponse
	(*FrameCryptorSetEnabledRequest)(nil),       // 9: livekit.proto.FrameCryptorSetEnabledRequest
	(*FrameCryptorSetEnabledResponse)(nil),      // 10: livekit.proto.FrameCryptorSetEnabledResponse
	(*FrameCryptorSetKeyIndexRequest)(nil),      // 11: livekit.proto.FrameCryptorSetKeyIndexRequest
	(*FrameCryptorSetKeyIndexResponse)(nil),     // 12: livekit.proto.FrameCryptorSetKeyIndexResponse
	(*SetSharedKeyRequest)(nil),                 // 13: livekit.proto.SetSharedKeyRequest
	(*SetSharedKeyResponse)(nil),                // 14: livekit.proto.SetSharedKeyResponse
	(*RatchetSharedKeyRequest)(nil),             // 15: livekit.proto.RatchetSharedKeyRequest
	(*RatchetSharedKeyResponse)(nil),            // 16: livekit.proto.RatchetSharedKeyResponse
	(*GetSharedKeyRequest)(nil),                 // 17: livekit.proto.GetSharedKeyRequest
	(*GetSharedKeyResponse)(nil),                // 18: livekit.proto.GetSharedKeyResponse
	(*SetKeyRequest)(nil),                       // 19: livekit.proto.SetKeyRequest
	(*SetKeyResponse)(nil),                      // 20: livekit.proto.SetKeyResponse
	(*RatchetKeyRequest)(nil),                   // 21: livekit.proto.RatchetKeyRequest
	(*RatchetKeyResponse)(nil),                  // 22: livekit.proto.RatchetKeyResponse
	(*GetKeyRequest)(nil),                       // 23: livekit.proto.GetKeyRequest
	(*GetKeyResponse)(nil),                      // 24: livekit.proto.GetKeyResponse
	(*E2EeRequest)(nil),                         // 25: livekit.proto.E2eeRequest
	(*E2EeResponse)(nil),                        // 26: livekit.proto.E2eeResponse
}
var file_e2ee_proto_depIdxs = []int32{
	0,  // 0: livekit.proto.E2eeOptions.encryption_type:type_name -> livekit.proto.EncryptionType
	3,  // 1: livekit.proto.E2eeOptions.key_provider_options:type_name -> livekit.proto.KeyProviderOptions
	2,  // 2: livekit.proto.E2eeManagerGetFrameCryptorsResponse.frame_cryptors:type_name -> livekit.proto.FrameCryptor
	5,  // 3: livekit.proto.E2eeRequest.manager_set_enabled:type_name -> livekit.proto.E2eeManagerSetEnabledRequest
	7,  // 4: livekit.proto.E2eeRequest.manager_get_frame_cryptors:type_name -> livekit.proto.E2eeManagerGetFrameCryptorsRequest
	9,  // 5: livekit.proto.E2eeRequest.cryptor_set_enabled:type_name -> livekit.proto.FrameCryptorSetEnabledRequest
	11, // 6: livekit.proto.E2eeRequest.cryptor_set_key_index:type_name -> livekit.proto.FrameCryptorSetKeyIndexRequest
	13, // 7: livekit.proto.E2eeRequest.set_shared_key:type_name -> livekit.proto.SetSharedKeyRequest
	15, // 8: livekit.proto.E2eeRequest.ratchet_shared_key:type_name -> livekit.proto.RatchetSharedKeyRequest
	17, // 9: livekit.proto.E2eeRequest.get_shared_key:type_name -> livekit.proto.GetSharedKeyRequest
	19, // 10: livekit.proto.E2eeRequest.set_key:type_name -> livekit.proto.SetKeyRequest
	21, // 11: livekit.proto.E2eeRequest.ratchet_key:type_name -> livekit.proto.RatchetKeyRequest
	23, // 12: livekit.proto.E2eeRequest.get_key:type_name -> livekit.proto.GetKeyRequest
	6,  // 13: livekit.proto.E2eeResponse.manager_set_enabled:type_name -> livekit.proto.E2eeManagerSetEnabledResponse
	8,  // 14: livekit.proto.E2eeResponse.manager_get_frame_cryptors:type_name -> livekit.proto.E2eeManagerGetFrameCryptorsResponse
	10, // 15: livekit.proto.E2eeResponse.cryptor_set_enabled:type_name -> livekit.proto.FrameCryptorSetEnabledResponse
	12, // 16: livekit.proto.E2eeResponse.cryptor_set_key_index:type_name -> livekit.proto.FrameCryptorSetKeyIndexResponse
	14, // 17: livekit.proto.E2eeResponse.set_shared_key:type_name -> livekit.proto.SetSharedKeyResponse
	16, // 18: livekit.proto.E2eeResponse.ratchet_shared_key:type_name -> livekit.proto.RatchetSharedKeyResponse
	18, // 19: livekit.proto.E2eeResponse.get_shared_key:type_name -> livekit.proto.GetSharedKeyResponse
	20, // 20: livekit.proto.E2eeResponse.set_key:type_name -> livekit.proto.SetKeyResponse
	22, // 21: livekit.proto.E2eeResponse.ratchet_key:type_name -> livekit.proto.RatchetKeyResponse
	24, // 22: livekit.proto.E2eeResponse.get_key:type_name -> livekit.proto.GetKeyResponse
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_e2ee_proto_init() }
func file_e2ee_proto_init() {
	if File_e2ee_proto != nil {
		return
	}
	file_e2ee_proto_msgTypes[23].OneofWrappers = []any{
		(*E2EeRequest_ManagerSetEnabled)(nil),
		(*E2EeRequest_ManagerGetFrameCryptors)(nil),
		(*E2EeRequest_CryptorSetEnabled)(nil),
		(*E2EeRequest_CryptorSetKeyIndex)(nil),
		(*E2EeRequest_SetSharedKey)(nil),
		(*E2EeRequest_RatchetSharedKey)(nil),
		(*E2EeRequest_GetSharedKey)(nil),
		(*E2EeRequest_SetKey)(nil),
		(*E2EeRequest_RatchetKey)(nil),
		(*E2EeRequest_GetKey)(nil),
	}
	file_e2ee_proto_msgTypes[24].OneofWrappers = []any{
		(*E2EeResponse_ManagerSetEnabled)(nil),
		(*E2EeResponse_ManagerGetFrameCryptors)(nil),
		(*E2EeResponse_CryptorSetEnabled)(nil),
		(*E2EeResponse_CryptorSetKeyIndex)(nil),
		(*E2EeResponse_SetSharedKey)(nil),
		(*E2EeResponse_RatchetSharedKey)(nil),
		(*E2EeResponse_GetSharedKey)(nil),
		(*E2EeResponse_SetKey)(nil),
		(*E2EeResponse_RatchetKey)(nil),
		(*E2EeResponse_GetKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_e2ee_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_e2ee_proto_goTypes,
		DependencyIndexes: file_e2ee_proto_depIdxs,
		EnumInfos:         file_e2ee_proto_enumTypes,
		MessageInfos:      file_e2ee_proto_msgTypes,
	}.Build()
	File_e2ee_proto = out.File
	file_e2ee_proto_rawDesc = nil
	file_e2ee_proto_goTypes = nil
	file_e2ee_proto_depIdxs = nil
}
