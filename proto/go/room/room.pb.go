// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.27.1
// source: room.proto

package room

import (
	e2ee "github.com/openimsdk/openim-rtc/proto/go/e2ee"
	handle "github.com/openimsdk/openim-rtc/proto/go/handle"
	participant "github.com/openimsdk/openim-rtc/proto/go/participant"
	stats "github.com/openimsdk/openim-rtc/proto/go/stats"
	track "github.com/openimsdk/openim-rtc/proto/go/track"
	video_frame "github.com/openimsdk/openim-rtc/proto/go/video_frame"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IceTransportType int32

const (
	IceTransportType_TRANSPORT_RELAY  IceTransportType = 0
	IceTransportType_TRANSPORT_NOHOST IceTransportType = 1
	IceTransportType_TRANSPORT_ALL    IceTransportType = 2
)

// Enum value maps for IceTransportType.
var (
	IceTransportType_name = map[int32]string{
		0: "TRANSPORT_RELAY",
		1: "TRANSPORT_NOHOST",
		2: "TRANSPORT_ALL",
	}
	IceTransportType_value = map[string]int32{
		"TRANSPORT_RELAY":  0,
		"TRANSPORT_NOHOST": 1,
		"TRANSPORT_ALL":    2,
	}
)

func (x IceTransportType) Enum() *IceTransportType {
	p := new(IceTransportType)
	*p = x
	return p
}

func (x IceTransportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IceTransportType) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[0].Descriptor()
}

func (IceTransportType) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[0]
}

func (x IceTransportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IceTransportType.Descriptor instead.
func (IceTransportType) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{0}
}

type ContinualGatheringPolicy int32

const (
	ContinualGatheringPolicy_GATHER_ONCE        ContinualGatheringPolicy = 0
	ContinualGatheringPolicy_GATHER_CONTINUALLY ContinualGatheringPolicy = 1
)

// Enum value maps for ContinualGatheringPolicy.
var (
	ContinualGatheringPolicy_name = map[int32]string{
		0: "GATHER_ONCE",
		1: "GATHER_CONTINUALLY",
	}
	ContinualGatheringPolicy_value = map[string]int32{
		"GATHER_ONCE":        0,
		"GATHER_CONTINUALLY": 1,
	}
)

func (x ContinualGatheringPolicy) Enum() *ContinualGatheringPolicy {
	p := new(ContinualGatheringPolicy)
	*p = x
	return p
}

func (x ContinualGatheringPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContinualGatheringPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[1].Descriptor()
}

func (ContinualGatheringPolicy) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[1]
}

func (x ContinualGatheringPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContinualGatheringPolicy.Descriptor instead.
func (ContinualGatheringPolicy) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{1}
}

type ConnectionQuality int32

const (
	ConnectionQuality_QUALITY_POOR      ConnectionQuality = 0
	ConnectionQuality_QUALITY_GOOD      ConnectionQuality = 1
	ConnectionQuality_QUALITY_EXCELLENT ConnectionQuality = 2
	ConnectionQuality_QUALITY_LOST      ConnectionQuality = 3
)

// Enum value maps for ConnectionQuality.
var (
	ConnectionQuality_name = map[int32]string{
		0: "QUALITY_POOR",
		1: "QUALITY_GOOD",
		2: "QUALITY_EXCELLENT",
		3: "QUALITY_LOST",
	}
	ConnectionQuality_value = map[string]int32{
		"QUALITY_POOR":      0,
		"QUALITY_GOOD":      1,
		"QUALITY_EXCELLENT": 2,
		"QUALITY_LOST":      3,
	}
)

func (x ConnectionQuality) Enum() *ConnectionQuality {
	p := new(ConnectionQuality)
	*p = x
	return p
}

func (x ConnectionQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[2].Descriptor()
}

func (ConnectionQuality) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[2]
}

func (x ConnectionQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionQuality.Descriptor instead.
func (ConnectionQuality) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{2}
}

type ConnectionState int32

const (
	ConnectionState_CONN_DISCONNECTED ConnectionState = 0
	ConnectionState_CONN_CONNECTED    ConnectionState = 1
	ConnectionState_CONN_RECONNECTING ConnectionState = 2
)

// Enum value maps for ConnectionState.
var (
	ConnectionState_name = map[int32]string{
		0: "CONN_DISCONNECTED",
		1: "CONN_CONNECTED",
		2: "CONN_RECONNECTING",
	}
	ConnectionState_value = map[string]int32{
		"CONN_DISCONNECTED": 0,
		"CONN_CONNECTED":    1,
		"CONN_RECONNECTING": 2,
	}
)

func (x ConnectionState) Enum() *ConnectionState {
	p := new(ConnectionState)
	*p = x
	return p
}

func (x ConnectionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionState) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[3].Descriptor()
}

func (ConnectionState) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[3]
}

func (x ConnectionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionState.Descriptor instead.
func (ConnectionState) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{3}
}

type DataPacketKind int32

const (
	DataPacketKind_KIND_LOSSY    DataPacketKind = 0
	DataPacketKind_KIND_RELIABLE DataPacketKind = 1
)

// Enum value maps for DataPacketKind.
var (
	DataPacketKind_name = map[int32]string{
		0: "KIND_LOSSY",
		1: "KIND_RELIABLE",
	}
	DataPacketKind_value = map[string]int32{
		"KIND_LOSSY":    0,
		"KIND_RELIABLE": 1,
	}
)

func (x DataPacketKind) Enum() *DataPacketKind {
	p := new(DataPacketKind)
	*p = x
	return p
}

func (x DataPacketKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataPacketKind) Descriptor() protoreflect.EnumDescriptor {
	return file_room_proto_enumTypes[4].Descriptor()
}

func (DataPacketKind) Type() protoreflect.EnumType {
	return &file_room_proto_enumTypes[4]
}

func (x DataPacketKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataPacketKind.Descriptor instead.
func (DataPacketKind) EnumDescriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{4}
}

// Connect to a new LiveKit room
type ConnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
	Options       *RoomOptions           `protobuf:"bytes,3,opt,name=options,proto3" json:"options"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	mi := &file_room_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ConnectRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConnectRequest) GetOptions() *RoomOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ConnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	mi := &file_room_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectResponse) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

type ConnectCallback struct {
	state            protoimpl.MessageState                   `protogen:"open.v1"`
	AsyncId          uint64                                   `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	Error            string                                   `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	Room             *OwnedRoom                               `protobuf:"bytes,3,opt,name=room,proto3" json:"room"`
	LocalParticipant *participant.OwnedParticipant            `protobuf:"bytes,4,opt,name=local_participant,json=localParticipant,proto3" json:"local_participant"`
	Participants     []*ConnectCallback_ParticipantWithTracks `protobuf:"bytes,5,rep,name=participants,proto3" json:"participants"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConnectCallback) Reset() {
	*x = ConnectCallback{}
	mi := &file_room_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectCallback) ProtoMessage() {}

func (x *ConnectCallback) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectCallback.ProtoReflect.Descriptor instead.
func (*ConnectCallback) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectCallback) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

func (x *ConnectCallback) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ConnectCallback) GetRoom() *OwnedRoom {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *ConnectCallback) GetLocalParticipant() *participant.OwnedParticipant {
	if x != nil {
		return x.LocalParticipant
	}
	return nil
}

func (x *ConnectCallback) GetParticipants() []*ConnectCallback_ParticipantWithTracks {
	if x != nil {
		return x.Participants
	}
	return nil
}

// Disconnect from the a room
type DisconnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomHandle    uint64                 `protobuf:"varint,1,opt,name=room_handle,json=roomHandle,proto3" json:"room_handle"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	mi := &file_room_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{3}
}

func (x *DisconnectRequest) GetRoomHandle() uint64 {
	if x != nil {
		return x.RoomHandle
	}
	return 0
}

type DisconnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectResponse) Reset() {
	*x = DisconnectResponse{}
	mi := &file_room_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponse) ProtoMessage() {}

func (x *DisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponse.ProtoReflect.Descriptor instead.
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{4}
}

func (x *DisconnectResponse) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

type DisconnectCallback struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectCallback) Reset() {
	*x = DisconnectCallback{}
	mi := &file_room_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectCallback) ProtoMessage() {}

func (x *DisconnectCallback) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectCallback.ProtoReflect.Descriptor instead.
func (*DisconnectCallback) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{5}
}

func (x *DisconnectCallback) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

// Publish a track to the room
type PublishTrackRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	LocalParticipantHandle uint64                 `protobuf:"varint,1,opt,name=local_participant_handle,json=localParticipantHandle,proto3" json:"local_participant_handle"`
	TrackHandle            uint64                 `protobuf:"varint,2,opt,name=track_handle,json=trackHandle,proto3" json:"track_handle"`
	Options                *TrackPublishOptions   `protobuf:"bytes,3,opt,name=options,proto3" json:"options"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PublishTrackRequest) Reset() {
	*x = PublishTrackRequest{}
	mi := &file_room_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishTrackRequest) ProtoMessage() {}

func (x *PublishTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishTrackRequest.ProtoReflect.Descriptor instead.
func (*PublishTrackRequest) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{6}
}

func (x *PublishTrackRequest) GetLocalParticipantHandle() uint64 {
	if x != nil {
		return x.LocalParticipantHandle
	}
	return 0
}

func (x *PublishTrackRequest) GetTrackHandle() uint64 {
	if x != nil {
		return x.TrackHandle
	}
	return 0
}

func (x *PublishTrackRequest) GetOptions() *TrackPublishOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type PublishTrackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishTrackResponse) Reset() {
	*x = PublishTrackResponse{}
	mi := &file_room_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishTrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishTrackResponse) ProtoMessage() {}

func (x *PublishTrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishTrackResponse.ProtoReflect.Descriptor instead.
func (*PublishTrackResponse) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{7}
}

func (x *PublishTrackResponse) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

type PublishTrackCallback struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	AsyncId       uint64                       `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	Error         string                       `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	Publication   *track.OwnedTrackPublication `protobuf:"bytes,3,opt,name=publication,proto3" json:"publication"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishTrackCallback) Reset() {
	*x = PublishTrackCallback{}
	mi := &file_room_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishTrackCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishTrackCallback) ProtoMessage() {}

func (x *PublishTrackCallback) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishTrackCallback.ProtoReflect.Descriptor instead.
func (*PublishTrackCallback) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{8}
}

func (x *PublishTrackCallback) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

func (x *PublishTrackCallback) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PublishTrackCallback) GetPublication() *track.OwnedTrackPublication {
	if x != nil {
		return x.Publication
	}
	return nil
}

// Unpublish a track from the room
type UnpublishTrackRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	LocalParticipantHandle uint64                 `protobuf:"varint,1,opt,name=local_participant_handle,json=localParticipantHandle,proto3" json:"local_participant_handle"`
	TrackSid               string                 `protobuf:"bytes,2,opt,name=track_sid,json=trackSid,proto3" json:"track_sid"`
	StopOnUnpublish        bool                   `protobuf:"varint,3,opt,name=stop_on_unpublish,json=stopOnUnpublish,proto3" json:"stop_on_unpublish"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UnpublishTrackRequest) Reset() {
	*x = UnpublishTrackRequest{}
	mi := &file_room_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpublishTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpublishTrackRequest) ProtoMessage() {}

func (x *UnpublishTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpublishTrackRequest.ProtoReflect.Descriptor instead.
func (*UnpublishTrackRequest) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{9}
}

func (x *UnpublishTrackRequest) GetLocalParticipantHandle() uint64 {
	if x != nil {
		return x.LocalParticipantHandle
	}
	return 0
}

func (x *UnpublishTrackRequest) GetTrackSid() string {
	if x != nil {
		return x.TrackSid
	}
	return ""
}

func (x *UnpublishTrackRequest) GetStopOnUnpublish() bool {
	if x != nil {
		return x.StopOnUnpublish
	}
	return false
}

type UnpublishTrackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpublishTrackResponse) Reset() {
	*x = UnpublishTrackResponse{}
	mi := &file_room_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpublishTrackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpublishTrackResponse) ProtoMessage() {}

func (x *UnpublishTrackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpublishTrackResponse.ProtoReflect.Descriptor instead.
func (*UnpublishTrackResponse) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{10}
}

func (x *UnpublishTrackResponse) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

type UnpublishTrackCallback struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpublishTrackCallback) Reset() {
	*x = UnpublishTrackCallback{}
	mi := &file_room_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpublishTrackCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpublishTrackCallback) ProtoMessage() {}

func (x *UnpublishTrackCallback) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpublishTrackCallback.ProtoReflect.Descriptor instead.
func (*UnpublishTrackCallback) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{11}
}

func (x *UnpublishTrackCallback) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

func (x *UnpublishTrackCallback) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Publish data to other participants
type PublishDataRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	LocalParticipantHandle uint64                 `protobuf:"varint,1,opt,name=local_participant_handle,json=localParticipantHandle,proto3" json:"local_participant_handle"`
	DataPtr                uint64                 `protobuf:"varint,2,opt,name=data_ptr,json=dataPtr,proto3" json:"data_ptr"`
	DataLen                uint64                 `protobuf:"varint,3,opt,name=data_len,json=dataLen,proto3" json:"data_len"`
	Kind                   DataPacketKind         `protobuf:"varint,4,opt,name=kind,proto3,enum=livekit.proto.DataPacketKind" json:"kind"`
	DestinationSids        []string               `protobuf:"bytes,5,rep,name=destination_sids,json=destinationSids,proto3" json:"destination_sids"` // destination
	Topic                  string                 `protobuf:"bytes,6,opt,name=topic,proto3" json:"topic"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PublishDataRequest) Reset() {
	*x = PublishDataRequest{}
	mi := &file_room_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDataRequest) ProtoMessage() {}

func (x *PublishDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDataRequest.ProtoReflect.Descriptor instead.
func (*PublishDataRequest) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{12}
}

func (x *PublishDataRequest) GetLocalParticipantHandle() uint64 {
	if x != nil {
		return x.LocalParticipantHandle
	}
	return 0
}

func (x *PublishDataRequest) GetDataPtr() uint64 {
	if x != nil {
		return x.DataPtr
	}
	return 0
}

func (x *PublishDataRequest) GetDataLen() uint64 {
	if x != nil {
		return x.DataLen
	}
	return 0
}

func (x *PublishDataRequest) GetKind() DataPacketKind {
	if x != nil {
		return x.Kind
	}
	return DataPacketKind_KIND_LOSSY
}

func (x *PublishDataRequest) GetDestinationSids() []string {
	if x != nil {
		return x.DestinationSids
	}
	return nil
}

func (x *PublishDataRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type PublishDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishDataResponse) Reset() {
	*x = PublishDataResponse{}
	mi := &file_room_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDataResponse) ProtoMessage() {}

func (x *PublishDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDataResponse.ProtoReflect.Descriptor instead.
func (*PublishDataResponse) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{13}
}

func (x *PublishDataResponse) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

type PublishDataCallback struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishDataCallback) Reset() {
	*x = PublishDataCallback{}
	mi := &file_room_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishDataCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishDataCallback) ProtoMessage() {}

func (x *PublishDataCallback) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishDataCallback.ProtoReflect.Descriptor instead.
func (*PublishDataCallback) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{14}
}

func (x *PublishDataCallback) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

func (x *PublishDataCallback) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Change the local participant's metadata
type UpdateLocalMetadataRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	LocalParticipantHandle uint64                 `protobuf:"varint,1,opt,name=local_participant_handle,json=localParticipantHandle,proto3" json:"local_participant_handle"`
	Metadata               string                 `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateLocalMetadataRequest) Reset() {
	*x = UpdateLocalMetadataRequest{}
	mi := &file_room_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLocalMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocalMetadataRequest) ProtoMessage() {}

func (x *UpdateLocalMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocalMetadataRequest.ProtoReflect.Descriptor instead.
func (*UpdateLocalMetadataRequest) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateLocalMetadataRequest) GetLocalParticipantHandle() uint64 {
	if x != nil {
		return x.LocalParticipantHandle
	}
	return 0
}

func (x *UpdateLocalMetadataRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type UpdateLocalMetadataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLocalMetadataResponse) Reset() {
	*x = UpdateLocalMetadataResponse{}
	mi := &file_room_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLocalMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocalMetadataResponse) ProtoMessage() {}

func (x *UpdateLocalMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocalMetadataResponse.ProtoReflect.Descriptor instead.
func (*UpdateLocalMetadataResponse) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateLocalMetadataResponse) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

type UpdateLocalMetadataCallback struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLocalMetadataCallback) Reset() {
	*x = UpdateLocalMetadataCallback{}
	mi := &file_room_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLocalMetadataCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocalMetadataCallback) ProtoMessage() {}

func (x *UpdateLocalMetadataCallback) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocalMetadataCallback.ProtoReflect.Descriptor instead.
func (*UpdateLocalMetadataCallback) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateLocalMetadataCallback) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

// Change the local participant's name
type UpdateLocalNameRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	LocalParticipantHandle uint64                 `protobuf:"varint,1,opt,name=local_participant_handle,json=localParticipantHandle,proto3" json:"local_participant_handle"`
	Name                   string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateLocalNameRequest) Reset() {
	*x = UpdateLocalNameRequest{}
	mi := &file_room_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLocalNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocalNameRequest) ProtoMessage() {}

func (x *UpdateLocalNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocalNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateLocalNameRequest) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateLocalNameRequest) GetLocalParticipantHandle() uint64 {
	if x != nil {
		return x.LocalParticipantHandle
	}
	return 0
}

func (x *UpdateLocalNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateLocalNameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLocalNameResponse) Reset() {
	*x = UpdateLocalNameResponse{}
	mi := &file_room_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLocalNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocalNameResponse) ProtoMessage() {}

func (x *UpdateLocalNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocalNameResponse.ProtoReflect.Descriptor instead.
func (*UpdateLocalNameResponse) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateLocalNameResponse) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

type UpdateLocalNameCallback struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLocalNameCallback) Reset() {
	*x = UpdateLocalNameCallback{}
	mi := &file_room_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLocalNameCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLocalNameCallback) ProtoMessage() {}

func (x *UpdateLocalNameCallback) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLocalNameCallback.ProtoReflect.Descriptor instead.
func (*UpdateLocalNameCallback) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateLocalNameCallback) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

// Change the "desire" to subs2ribe to a track
type SetSubscribedRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Subscribe         bool                   `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe"`
	PublicationHandle uint64                 `protobuf:"varint,2,opt,name=publication_handle,json=publicationHandle,proto3" json:"publication_handle"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SetSubscribedRequest) Reset() {
	*x = SetSubscribedRequest{}
	mi := &file_room_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSubscribedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubscribedRequest) ProtoMessage() {}

func (x *SetSubscribedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubscribedRequest.ProtoReflect.Descriptor instead.
func (*SetSubscribedRequest) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{21}
}

func (x *SetSubscribedRequest) GetSubscribe() bool {
	if x != nil {
		return x.Subscribe
	}
	return false
}

func (x *SetSubscribedRequest) GetPublicationHandle() uint64 {
	if x != nil {
		return x.PublicationHandle
	}
	return 0
}

type SetSubscribedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetSubscribedResponse) Reset() {
	*x = SetSubscribedResponse{}
	mi := &file_room_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSubscribedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubscribedResponse) ProtoMessage() {}

func (x *SetSubscribedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubscribedResponse.ProtoReflect.Descriptor instead.
func (*SetSubscribedResponse) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{22}
}

type GetSessionStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomHandle    uint64                 `protobuf:"varint,1,opt,name=room_handle,json=roomHandle,proto3" json:"room_handle"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionStatsRequest) Reset() {
	*x = GetSessionStatsRequest{}
	mi := &file_room_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionStatsRequest) ProtoMessage() {}

func (x *GetSessionStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionStatsRequest.ProtoReflect.Descriptor instead.
func (*GetSessionStatsRequest) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{23}
}

func (x *GetSessionStatsRequest) GetRoomHandle() uint64 {
	if x != nil {
		return x.RoomHandle
	}
	return 0
}

type GetSessionStatsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AsyncId       uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSessionStatsResponse) Reset() {
	*x = GetSessionStatsResponse{}
	mi := &file_room_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionStatsResponse) ProtoMessage() {}

func (x *GetSessionStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionStatsResponse.ProtoReflect.Descriptor instead.
func (*GetSessionStatsResponse) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{24}
}

func (x *GetSessionStatsResponse) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

type GetSessionStatsCallback struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AsyncId         uint64                 `protobuf:"varint,1,opt,name=async_id,json=asyncId,proto3" json:"async_id"`
	Error           string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
	PublisherStats  []*stats.RtcStats      `protobuf:"bytes,3,rep,name=publisher_stats,json=publisherStats,proto3" json:"publisher_stats"`
	SubscriberStats []*stats.RtcStats      `protobuf:"bytes,4,rep,name=subscriber_stats,json=subscriberStats,proto3" json:"subscriber_stats"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetSessionStatsCallback) Reset() {
	*x = GetSessionStatsCallback{}
	mi := &file_room_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSessionStatsCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionStatsCallback) ProtoMessage() {}

func (x *GetSessionStatsCallback) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionStatsCallback.ProtoReflect.Descriptor instead.
func (*GetSessionStatsCallback) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{25}
}

func (x *GetSessionStatsCallback) GetAsyncId() uint64 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

func (x *GetSessionStatsCallback) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetSessionStatsCallback) GetPublisherStats() []*stats.RtcStats {
	if x != nil {
		return x.PublisherStats
	}
	return nil
}

func (x *GetSessionStatsCallback) GetSubscriberStats() []*stats.RtcStats {
	if x != nil {
		return x.SubscriberStats
	}
	return nil
}

type VideoEncoding struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxBitrate    uint64                 `protobuf:"varint,1,opt,name=max_bitrate,json=maxBitrate,proto3" json:"max_bitrate"`
	MaxFramerate  float64                `protobuf:"fixed64,2,opt,name=max_framerate,json=maxFramerate,proto3" json:"max_framerate"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoEncoding) Reset() {
	*x = VideoEncoding{}
	mi := &file_room_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoEncoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoEncoding) ProtoMessage() {}

func (x *VideoEncoding) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoEncoding.ProtoReflect.Descriptor instead.
func (*VideoEncoding) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{26}
}

func (x *VideoEncoding) GetMaxBitrate() uint64 {
	if x != nil {
		return x.MaxBitrate
	}
	return 0
}

func (x *VideoEncoding) GetMaxFramerate() float64 {
	if x != nil {
		return x.MaxFramerate
	}
	return 0
}

type AudioEncoding struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxBitrate    uint64                 `protobuf:"varint,1,opt,name=max_bitrate,json=maxBitrate,proto3" json:"max_bitrate"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioEncoding) Reset() {
	*x = AudioEncoding{}
	mi := &file_room_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioEncoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioEncoding) ProtoMessage() {}

func (x *AudioEncoding) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioEncoding.ProtoReflect.Descriptor instead.
func (*AudioEncoding) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{27}
}

func (x *AudioEncoding) GetMaxBitrate() uint64 {
	if x != nil {
		return x.MaxBitrate
	}
	return 0
}

type TrackPublishOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// encodings are
	VideoEncoding *VideoEncoding         `protobuf:"bytes,1,opt,name=video_encoding,json=videoEncoding,proto3" json:"video_encoding"`
	AudioEncoding *AudioEncoding         `protobuf:"bytes,2,opt,name=audio_encoding,json=audioEncoding,proto3" json:"audio_encoding"`
	VideoCodec    video_frame.VideoCodec `protobuf:"varint,3,opt,name=video_codec,json=videoCodec,proto3,enum=livekit.proto.VideoCodec" json:"video_codec"`
	Dtx           bool                   `protobuf:"varint,4,opt,name=dtx,proto3" json:"dtx"`
	Red           bool                   `protobuf:"varint,5,opt,name=red,proto3" json:"red"`
	Simulcast     bool                   `protobuf:"varint,6,opt,name=simulcast,proto3" json:"simulcast"`
	Source        track.TrackSource      `protobuf:"varint,7,opt,name=source,proto3,enum=livekit.proto.TrackSource" json:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackPublishOptions) Reset() {
	*x = TrackPublishOptions{}
	mi := &file_room_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackPublishOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPublishOptions) ProtoMessage() {}

func (x *TrackPublishOptions) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPublishOptions.ProtoReflect.Descriptor instead.
func (*TrackPublishOptions) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{28}
}

func (x *TrackPublishOptions) GetVideoEncoding() *VideoEncoding {
	if x != nil {
		return x.VideoEncoding
	}
	return nil
}

func (x *TrackPublishOptions) GetAudioEncoding() *AudioEncoding {
	if x != nil {
		return x.AudioEncoding
	}
	return nil
}

func (x *TrackPublishOptions) GetVideoCodec() video_frame.VideoCodec {
	if x != nil {
		return x.VideoCodec
	}
	return video_frame.VideoCodec(0)
}

func (x *TrackPublishOptions) GetDtx() bool {
	if x != nil {
		return x.Dtx
	}
	return false
}

func (x *TrackPublishOptions) GetRed() bool {
	if x != nil {
		return x.Red
	}
	return false
}

func (x *TrackPublishOptions) GetSimulcast() bool {
	if x != nil {
		return x.Simulcast
	}
	return false
}

func (x *TrackPublishOptions) GetSource() track.TrackSource {
	if x != nil {
		return x.Source
	}
	return track.TrackSource(0)
}

type IceServer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Urls          []string               `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username"`
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IceServer) Reset() {
	*x = IceServer{}
	mi := &file_room_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IceServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceServer) ProtoMessage() {}

func (x *IceServer) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceServer.ProtoReflect.Descriptor instead.
func (*IceServer) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{29}
}

func (x *IceServer) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *IceServer) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *IceServer) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RtcConfig struct {
	state                    protoimpl.MessageState   `protogen:"open.v1"`
	IceTransportType         IceTransportType         `protobuf:"varint,1,opt,name=ice_transport_type,json=iceTransportType,proto3,enum=livekit.proto.IceTransportType" json:"ice_transport_type"`
	ContinualGatheringPolicy ContinualGatheringPolicy `protobuf:"varint,2,opt,name=continual_gathering_policy,json=continualGatheringPolicy,proto3,enum=livekit.proto.ContinualGatheringPolicy" json:"continual_gathering_policy"`
	IceServers               []*IceServer             `protobuf:"bytes,3,rep,name=ice_servers,json=iceServers,proto3" json:"ice_servers"` // empty fallback to default
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *RtcConfig) Reset() {
	*x = RtcConfig{}
	mi := &file_room_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcConfig) ProtoMessage() {}

func (x *RtcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcConfig.ProtoReflect.Descriptor instead.
func (*RtcConfig) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{30}
}

func (x *RtcConfig) GetIceTransportType() IceTransportType {
	if x != nil {
		return x.IceTransportType
	}
	return IceTransportType_TRANSPORT_RELAY
}

func (x *RtcConfig) GetContinualGatheringPolicy() ContinualGatheringPolicy {
	if x != nil {
		return x.ContinualGatheringPolicy
	}
	return ContinualGatheringPolicy_GATHER_ONCE
}

func (x *RtcConfig) GetIceServers() []*IceServer {
	if x != nil {
		return x.IceServers
	}
	return nil
}

type RoomOptions struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AutoSubscribe  bool                   `protobuf:"varint,1,opt,name=auto_subscribe,json=autoSubscribe,proto3" json:"auto_subscribe"`
	AdaptiveStream bool                   `protobuf:"varint,2,opt,name=adaptive_stream,json=adaptiveStream,proto3" json:"adaptive_stream"`
	Dynacast       bool                   `protobuf:"varint,3,opt,name=dynacast,proto3" json:"dynacast"`
	E2Ee           *e2ee.E2EeOptions      `protobuf:"bytes,4,opt,name=e2ee,proto3" json:"e2ee"`
	RtcConfig      *RtcConfig             `protobuf:"bytes,5,opt,name=rtc_config,json=rtcConfig,proto3" json:"rtc_config"` // allow to setup a custom RtcConfiguration
	JoinRetries    uint32                 `protobuf:"varint,6,opt,name=join_retries,json=joinRetries,proto3" json:"join_retries"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RoomOptions) Reset() {
	*x = RoomOptions{}
	mi := &file_room_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOptions) ProtoMessage() {}

func (x *RoomOptions) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOptions.ProtoReflect.Descriptor instead.
func (*RoomOptions) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{31}
}

func (x *RoomOptions) GetAutoSubscribe() bool {
	if x != nil {
		return x.AutoSubscribe
	}
	return false
}

func (x *RoomOptions) GetAdaptiveStream() bool {
	if x != nil {
		return x.AdaptiveStream
	}
	return false
}

func (x *RoomOptions) GetDynacast() bool {
	if x != nil {
		return x.Dynacast
	}
	return false
}

func (x *RoomOptions) GetE2Ee() *e2ee.E2EeOptions {
	if x != nil {
		return x.E2Ee
	}
	return nil
}

func (x *RoomOptions) GetRtcConfig() *RtcConfig {
	if x != nil {
		return x.RtcConfig
	}
	return nil
}

func (x *RoomOptions) GetJoinRetries() uint32 {
	if x != nil {
		return x.JoinRetries
	}
	return 0
}

type BufferInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataPtr       uint64                 `protobuf:"varint,1,opt,name=data_ptr,json=dataPtr,proto3" json:"data_ptr"`
	DataLen       uint64                 `protobuf:"varint,2,opt,name=data_len,json=dataLen,proto3" json:"data_len"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BufferInfo) Reset() {
	*x = BufferInfo{}
	mi := &file_room_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BufferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferInfo) ProtoMessage() {}

func (x *BufferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferInfo.ProtoReflect.Descriptor instead.
func (*BufferInfo) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{32}
}

func (x *BufferInfo) GetDataPtr() uint64 {
	if x != nil {
		return x.DataPtr
	}
	return 0
}

func (x *BufferInfo) GetDataLen() uint64 {
	if x != nil {
		return x.DataLen
	}
	return 0
}

type OwnedBuffer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Handle        *handle.FfiOwnedHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle"`
	Data          *BufferInfo            `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnedBuffer) Reset() {
	*x = OwnedBuffer{}
	mi := &file_room_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnedBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedBuffer) ProtoMessage() {}

func (x *OwnedBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedBuffer.ProtoReflect.Descriptor instead.
func (*OwnedBuffer) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{33}
}

func (x *OwnedBuffer) GetHandle() *handle.FfiOwnedHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *OwnedBuffer) GetData() *BufferInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type RoomEvent struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	RoomHandle uint64                 `protobuf:"varint,1,opt,name=room_handle,json=roomHandle,proto3" json:"room_handle"`
	// Types that are valid to be assigned to Message:
	//
	//	*RoomEvent_ParticipantConnected
	//	*RoomEvent_ParticipantDisconnected
	//	*RoomEvent_LocalTrackPublished
	//	*RoomEvent_LocalTrackUnpublished
	//	*RoomEvent_TrackPublished
	//	*RoomEvent_TrackUnpublished
	//	*RoomEvent_TrackSubscribed
	//	*RoomEvent_TrackUnsubscribed
	//	*RoomEvent_TrackSubscriptionFailed
	//	*RoomEvent_TrackMuted
	//	*RoomEvent_TrackUnmuted
	//	*RoomEvent_ActiveSpeakersChanged
	//	*RoomEvent_RoomMetadataChanged
	//	*RoomEvent_ParticipantMetadataChanged
	//	*RoomEvent_ParticipantNameChanged
	//	*RoomEvent_ConnectionQualityChanged
	//	*RoomEvent_ConnectionStateChanged
	//	*RoomEvent_Disconnected
	//	*RoomEvent_Reconnecting
	//	*RoomEvent_Reconnected
	//	*RoomEvent_E2EeStateChanged
	//	*RoomEvent_Eos
	//	*RoomEvent_DataPacketReceived
	Message       isRoomEvent_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomEvent) Reset() {
	*x = RoomEvent{}
	mi := &file_room_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEvent) ProtoMessage() {}

func (x *RoomEvent) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEvent.ProtoReflect.Descriptor instead.
func (*RoomEvent) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{34}
}

func (x *RoomEvent) GetRoomHandle() uint64 {
	if x != nil {
		return x.RoomHandle
	}
	return 0
}

func (x *RoomEvent) GetMessage() isRoomEvent_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *RoomEvent) GetParticipantConnected() *ParticipantConnected {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_ParticipantConnected); ok {
			return x.ParticipantConnected
		}
	}
	return nil
}

func (x *RoomEvent) GetParticipantDisconnected() *ParticipantDisconnected {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_ParticipantDisconnected); ok {
			return x.ParticipantDisconnected
		}
	}
	return nil
}

func (x *RoomEvent) GetLocalTrackPublished() *LocalTrackPublished {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_LocalTrackPublished); ok {
			return x.LocalTrackPublished
		}
	}
	return nil
}

func (x *RoomEvent) GetLocalTrackUnpublished() *LocalTrackUnpublished {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_LocalTrackUnpublished); ok {
			return x.LocalTrackUnpublished
		}
	}
	return nil
}

func (x *RoomEvent) GetTrackPublished() *TrackPublished {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_TrackPublished); ok {
			return x.TrackPublished
		}
	}
	return nil
}

func (x *RoomEvent) GetTrackUnpublished() *TrackUnpublished {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_TrackUnpublished); ok {
			return x.TrackUnpublished
		}
	}
	return nil
}

func (x *RoomEvent) GetTrackSubscribed() *TrackSubscribed {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_TrackSubscribed); ok {
			return x.TrackSubscribed
		}
	}
	return nil
}

func (x *RoomEvent) GetTrackUnsubscribed() *TrackUnsubscribed {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_TrackUnsubscribed); ok {
			return x.TrackUnsubscribed
		}
	}
	return nil
}

func (x *RoomEvent) GetTrackSubscriptionFailed() *TrackSubscriptionFailed {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_TrackSubscriptionFailed); ok {
			return x.TrackSubscriptionFailed
		}
	}
	return nil
}

func (x *RoomEvent) GetTrackMuted() *TrackMuted {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_TrackMuted); ok {
			return x.TrackMuted
		}
	}
	return nil
}

func (x *RoomEvent) GetTrackUnmuted() *TrackUnmuted {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_TrackUnmuted); ok {
			return x.TrackUnmuted
		}
	}
	return nil
}

func (x *RoomEvent) GetActiveSpeakersChanged() *ActiveSpeakersChanged {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_ActiveSpeakersChanged); ok {
			return x.ActiveSpeakersChanged
		}
	}
	return nil
}

func (x *RoomEvent) GetRoomMetadataChanged() *RoomMetadataChanged {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_RoomMetadataChanged); ok {
			return x.RoomMetadataChanged
		}
	}
	return nil
}

func (x *RoomEvent) GetParticipantMetadataChanged() *ParticipantMetadataChanged {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_ParticipantMetadataChanged); ok {
			return x.ParticipantMetadataChanged
		}
	}
	return nil
}

func (x *RoomEvent) GetParticipantNameChanged() *ParticipantNameChanged {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_ParticipantNameChanged); ok {
			return x.ParticipantNameChanged
		}
	}
	return nil
}

func (x *RoomEvent) GetConnectionQualityChanged() *ConnectionQualityChanged {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_ConnectionQualityChanged); ok {
			return x.ConnectionQualityChanged
		}
	}
	return nil
}

func (x *RoomEvent) GetConnectionStateChanged() *ConnectionStateChanged {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_ConnectionStateChanged); ok {
			return x.ConnectionStateChanged
		}
	}
	return nil
}

func (x *RoomEvent) GetDisconnected() *Disconnected {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_Disconnected); ok {
			return x.Disconnected
		}
	}
	return nil
}

func (x *RoomEvent) GetReconnecting() *Reconnecting {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_Reconnecting); ok {
			return x.Reconnecting
		}
	}
	return nil
}

func (x *RoomEvent) GetReconnected() *Reconnected {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_Reconnected); ok {
			return x.Reconnected
		}
	}
	return nil
}

func (x *RoomEvent) GetE2EeStateChanged() *E2EeStateChanged {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_E2EeStateChanged); ok {
			return x.E2EeStateChanged
		}
	}
	return nil
}

func (x *RoomEvent) GetEos() *RoomEOS {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_Eos); ok {
			return x.Eos
		}
	}
	return nil
}

func (x *RoomEvent) GetDataPacketReceived() *DataPacketReceived {
	if x != nil {
		if x, ok := x.Message.(*RoomEvent_DataPacketReceived); ok {
			return x.DataPacketReceived
		}
	}
	return nil
}

type isRoomEvent_Message interface {
	isRoomEvent_Message()
}

type RoomEvent_ParticipantConnected struct {
	ParticipantConnected *ParticipantConnected `protobuf:"bytes,2,opt,name=participant_connected,json=participantConnected,proto3,oneof"`
}

type RoomEvent_ParticipantDisconnected struct {
	ParticipantDisconnected *ParticipantDisconnected `protobuf:"bytes,3,opt,name=participant_disconnected,json=participantDisconnected,proto3,oneof"`
}

type RoomEvent_LocalTrackPublished struct {
	LocalTrackPublished *LocalTrackPublished `protobuf:"bytes,4,opt,name=local_track_published,json=localTrackPublished,proto3,oneof"`
}

type RoomEvent_LocalTrackUnpublished struct {
	LocalTrackUnpublished *LocalTrackUnpublished `protobuf:"bytes,5,opt,name=local_track_unpublished,json=localTrackUnpublished,proto3,oneof"`
}

type RoomEvent_TrackPublished struct {
	TrackPublished *TrackPublished `protobuf:"bytes,6,opt,name=track_published,json=trackPublished,proto3,oneof"`
}

type RoomEvent_TrackUnpublished struct {
	TrackUnpublished *TrackUnpublished `protobuf:"bytes,7,opt,name=track_unpublished,json=trackUnpublished,proto3,oneof"`
}

type RoomEvent_TrackSubscribed struct {
	TrackSubscribed *TrackSubscribed `protobuf:"bytes,8,opt,name=track_subscribed,json=trackSubscribed,proto3,oneof"`
}

type RoomEvent_TrackUnsubscribed struct {
	TrackUnsubscribed *TrackUnsubscribed `protobuf:"bytes,9,opt,name=track_unsubscribed,json=trackUnsubscribed,proto3,oneof"`
}

type RoomEvent_TrackSubscriptionFailed struct {
	TrackSubscriptionFailed *TrackSubscriptionFailed `protobuf:"bytes,10,opt,name=track_subscription_failed,json=trackSubscriptionFailed,proto3,oneof"`
}

type RoomEvent_TrackMuted struct {
	TrackMuted *TrackMuted `protobuf:"bytes,11,opt,name=track_muted,json=trackMuted,proto3,oneof"`
}

type RoomEvent_TrackUnmuted struct {
	TrackUnmuted *TrackUnmuted `protobuf:"bytes,12,opt,name=track_unmuted,json=trackUnmuted,proto3,oneof"`
}

type RoomEvent_ActiveSpeakersChanged struct {
	ActiveSpeakersChanged *ActiveSpeakersChanged `protobuf:"bytes,13,opt,name=active_speakers_changed,json=activeSpeakersChanged,proto3,oneof"`
}

type RoomEvent_RoomMetadataChanged struct {
	RoomMetadataChanged *RoomMetadataChanged `protobuf:"bytes,14,opt,name=room_metadata_changed,json=roomMetadataChanged,proto3,oneof"`
}

type RoomEvent_ParticipantMetadataChanged struct {
	ParticipantMetadataChanged *ParticipantMetadataChanged `protobuf:"bytes,15,opt,name=participant_metadata_changed,json=participantMetadataChanged,proto3,oneof"`
}

type RoomEvent_ParticipantNameChanged struct {
	ParticipantNameChanged *ParticipantNameChanged `protobuf:"bytes,16,opt,name=participant_name_changed,json=participantNameChanged,proto3,oneof"`
}

type RoomEvent_ConnectionQualityChanged struct {
	ConnectionQualityChanged *ConnectionQualityChanged `protobuf:"bytes,17,opt,name=connection_quality_changed,json=connectionQualityChanged,proto3,oneof"`
}

type RoomEvent_ConnectionStateChanged struct {
	ConnectionStateChanged *ConnectionStateChanged `protobuf:"bytes,19,opt,name=connection_state_changed,json=connectionStateChanged,proto3,oneof"`
}

type RoomEvent_Disconnected struct {
	// Connected connected = 20;
	Disconnected *Disconnected `protobuf:"bytes,21,opt,name=disconnected,proto3,oneof"`
}

type RoomEvent_Reconnecting struct {
	Reconnecting *Reconnecting `protobuf:"bytes,22,opt,name=reconnecting,proto3,oneof"`
}

type RoomEvent_Reconnected struct {
	Reconnected *Reconnected `protobuf:"bytes,23,opt,name=reconnected,proto3,oneof"`
}

type RoomEvent_E2EeStateChanged struct {
	E2EeStateChanged *E2EeStateChanged `protobuf:"bytes,24,opt,name=e2ee_state_changed,json=e2eeStateChanged,proto3,oneof"`
}

type RoomEvent_Eos struct {
	Eos *RoomEOS `protobuf:"bytes,25,opt,name=eos,proto3,oneof"` // The stream of room events has ended
}

type RoomEvent_DataPacketReceived struct {
	DataPacketReceived *DataPacketReceived `protobuf:"bytes,26,opt,name=data_packet_received,json=dataPacketReceived,proto3,oneof"`
}

func (*RoomEvent_ParticipantConnected) isRoomEvent_Message() {}

func (*RoomEvent_ParticipantDisconnected) isRoomEvent_Message() {}

func (*RoomEvent_LocalTrackPublished) isRoomEvent_Message() {}

func (*RoomEvent_LocalTrackUnpublished) isRoomEvent_Message() {}

func (*RoomEvent_TrackPublished) isRoomEvent_Message() {}

func (*RoomEvent_TrackUnpublished) isRoomEvent_Message() {}

func (*RoomEvent_TrackSubscribed) isRoomEvent_Message() {}

func (*RoomEvent_TrackUnsubscribed) isRoomEvent_Message() {}

func (*RoomEvent_TrackSubscriptionFailed) isRoomEvent_Message() {}

func (*RoomEvent_TrackMuted) isRoomEvent_Message() {}

func (*RoomEvent_TrackUnmuted) isRoomEvent_Message() {}

func (*RoomEvent_ActiveSpeakersChanged) isRoomEvent_Message() {}

func (*RoomEvent_RoomMetadataChanged) isRoomEvent_Message() {}

func (*RoomEvent_ParticipantMetadataChanged) isRoomEvent_Message() {}

func (*RoomEvent_ParticipantNameChanged) isRoomEvent_Message() {}

func (*RoomEvent_ConnectionQualityChanged) isRoomEvent_Message() {}

func (*RoomEvent_ConnectionStateChanged) isRoomEvent_Message() {}

func (*RoomEvent_Disconnected) isRoomEvent_Message() {}

func (*RoomEvent_Reconnecting) isRoomEvent_Message() {}

func (*RoomEvent_Reconnected) isRoomEvent_Message() {}

func (*RoomEvent_E2EeStateChanged) isRoomEvent_Message() {}

func (*RoomEvent_Eos) isRoomEvent_Message() {}

func (*RoomEvent_DataPacketReceived) isRoomEvent_Message() {}

type RoomInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sid           string                 `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Metadata      string                 `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	mi := &file_room_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{35}
}

func (x *RoomInfo) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *RoomInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoomInfo) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type OwnedRoom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Handle        *handle.FfiOwnedHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle"`
	Info          *RoomInfo              `protobuf:"bytes,2,opt,name=info,proto3" json:"info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OwnedRoom) Reset() {
	*x = OwnedRoom{}
	mi := &file_room_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OwnedRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedRoom) ProtoMessage() {}

func (x *OwnedRoom) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedRoom.ProtoReflect.Descriptor instead.
func (*OwnedRoom) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{36}
}

func (x *OwnedRoom) GetHandle() *handle.FfiOwnedHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *OwnedRoom) GetInfo() *RoomInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ParticipantConnected struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Info          *participant.OwnedParticipant `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParticipantConnected) Reset() {
	*x = ParticipantConnected{}
	mi := &file_room_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantConnected) ProtoMessage() {}

func (x *ParticipantConnected) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantConnected.ProtoReflect.Descriptor instead.
func (*ParticipantConnected) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{37}
}

func (x *ParticipantConnected) GetInfo() *participant.OwnedParticipant {
	if x != nil {
		return x.Info
	}
	return nil
}

type ParticipantDisconnected struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSid string                 `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ParticipantDisconnected) Reset() {
	*x = ParticipantDisconnected{}
	mi := &file_room_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantDisconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantDisconnected) ProtoMessage() {}

func (x *ParticipantDisconnected) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantDisconnected.ProtoReflect.Descriptor instead.
func (*ParticipantDisconnected) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{38}
}

func (x *ParticipantDisconnected) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

type LocalTrackPublished struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The TrackPublicationInfo comes from the PublishTrack response
	// and the FfiClient musts wait for it before firing this event
	TrackSid      string `protobuf:"bytes,1,opt,name=track_sid,json=trackSid,proto3" json:"track_sid"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalTrackPublished) Reset() {
	*x = LocalTrackPublished{}
	mi := &file_room_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalTrackPublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalTrackPublished) ProtoMessage() {}

func (x *LocalTrackPublished) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalTrackPublished.ProtoReflect.Descriptor instead.
func (*LocalTrackPublished) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{39}
}

func (x *LocalTrackPublished) GetTrackSid() string {
	if x != nil {
		return x.TrackSid
	}
	return ""
}

type LocalTrackUnpublished struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PublicationSid string                 `protobuf:"bytes,1,opt,name=publication_sid,json=publicationSid,proto3" json:"publication_sid"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LocalTrackUnpublished) Reset() {
	*x = LocalTrackUnpublished{}
	mi := &file_room_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalTrackUnpublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalTrackUnpublished) ProtoMessage() {}

func (x *LocalTrackUnpublished) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalTrackUnpublished.ProtoReflect.Descriptor instead.
func (*LocalTrackUnpublished) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{40}
}

func (x *LocalTrackUnpublished) GetPublicationSid() string {
	if x != nil {
		return x.PublicationSid
	}
	return ""
}

type TrackPublished struct {
	state          protoimpl.MessageState       `protogen:"open.v1"`
	ParticipantSid string                       `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"`
	Publication    *track.OwnedTrackPublication `protobuf:"bytes,2,opt,name=publication,proto3" json:"publication"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrackPublished) Reset() {
	*x = TrackPublished{}
	mi := &file_room_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackPublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPublished) ProtoMessage() {}

func (x *TrackPublished) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPublished.ProtoReflect.Descriptor instead.
func (*TrackPublished) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{41}
}

func (x *TrackPublished) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *TrackPublished) GetPublication() *track.OwnedTrackPublication {
	if x != nil {
		return x.Publication
	}
	return nil
}

type TrackUnpublished struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSid string                 `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"`
	PublicationSid string                 `protobuf:"bytes,2,opt,name=publication_sid,json=publicationSid,proto3" json:"publication_sid"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrackUnpublished) Reset() {
	*x = TrackUnpublished{}
	mi := &file_room_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackUnpublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackUnpublished) ProtoMessage() {}

func (x *TrackUnpublished) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackUnpublished.ProtoReflect.Descriptor instead.
func (*TrackUnpublished) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{42}
}

func (x *TrackUnpublished) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *TrackUnpublished) GetPublicationSid() string {
	if x != nil {
		return x.PublicationSid
	}
	return ""
}

// Publication isn't needed for subscription events on the FFI
// The FFI will retrieve the publication using the Track sid
type TrackSubscribed struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSid string                 `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"`
	Track          *track.OwnedTrack      `protobuf:"bytes,2,opt,name=track,proto3" json:"track"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrackSubscribed) Reset() {
	*x = TrackSubscribed{}
	mi := &file_room_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackSubscribed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSubscribed) ProtoMessage() {}

func (x *TrackSubscribed) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSubscribed.ProtoReflect.Descriptor instead.
func (*TrackSubscribed) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{43}
}

func (x *TrackSubscribed) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *TrackSubscribed) GetTrack() *track.OwnedTrack {
	if x != nil {
		return x.Track
	}
	return nil
}

type TrackUnsubscribed struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The FFI language can dispose/remove the VideoSink here
	ParticipantSid string `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"`
	TrackSid       string `protobuf:"bytes,2,opt,name=track_sid,json=trackSid,proto3" json:"track_sid"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrackUnsubscribed) Reset() {
	*x = TrackUnsubscribed{}
	mi := &file_room_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackUnsubscribed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackUnsubscribed) ProtoMessage() {}

func (x *TrackUnsubscribed) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackUnsubscribed.ProtoReflect.Descriptor instead.
func (*TrackUnsubscribed) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{44}
}

func (x *TrackUnsubscribed) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *TrackUnsubscribed) GetTrackSid() string {
	if x != nil {
		return x.TrackSid
	}
	return ""
}

type TrackSubscriptionFailed struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSid string                 `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"`
	TrackSid       string                 `protobuf:"bytes,2,opt,name=track_sid,json=trackSid,proto3" json:"track_sid"`
	Error          string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrackSubscriptionFailed) Reset() {
	*x = TrackSubscriptionFailed{}
	mi := &file_room_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackSubscriptionFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSubscriptionFailed) ProtoMessage() {}

func (x *TrackSubscriptionFailed) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSubscriptionFailed.ProtoReflect.Descriptor instead.
func (*TrackSubscriptionFailed) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{45}
}

func (x *TrackSubscriptionFailed) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *TrackSubscriptionFailed) GetTrackSid() string {
	if x != nil {
		return x.TrackSid
	}
	return ""
}

func (x *TrackSubscriptionFailed) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TrackMuted struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSid string                 `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"`
	TrackSid       string                 `protobuf:"bytes,2,opt,name=track_sid,json=trackSid,proto3" json:"track_sid"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrackMuted) Reset() {
	*x = TrackMuted{}
	mi := &file_room_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackMuted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackMuted) ProtoMessage() {}

func (x *TrackMuted) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackMuted.ProtoReflect.Descriptor instead.
func (*TrackMuted) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{46}
}

func (x *TrackMuted) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *TrackMuted) GetTrackSid() string {
	if x != nil {
		return x.TrackSid
	}
	return ""
}

type TrackUnmuted struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSid string                 `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"`
	TrackSid       string                 `protobuf:"bytes,2,opt,name=track_sid,json=trackSid,proto3" json:"track_sid"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrackUnmuted) Reset() {
	*x = TrackUnmuted{}
	mi := &file_room_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackUnmuted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackUnmuted) ProtoMessage() {}

func (x *TrackUnmuted) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackUnmuted.ProtoReflect.Descriptor instead.
func (*TrackUnmuted) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{47}
}

func (x *TrackUnmuted) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *TrackUnmuted) GetTrackSid() string {
	if x != nil {
		return x.TrackSid
	}
	return ""
}

type E2EeStateChanged struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSid string                 `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"` // Using sid instead of identity for ffi communication
	State          e2ee.EncryptionState   `protobuf:"varint,2,opt,name=state,proto3,enum=livekit.proto.EncryptionState" json:"state"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *E2EeStateChanged) Reset() {
	*x = E2EeStateChanged{}
	mi := &file_room_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E2EeStateChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2EeStateChanged) ProtoMessage() {}

func (x *E2EeStateChanged) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2EeStateChanged.ProtoReflect.Descriptor instead.
func (*E2EeStateChanged) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{48}
}

func (x *E2EeStateChanged) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *E2EeStateChanged) GetState() e2ee.EncryptionState {
	if x != nil {
		return x.State
	}
	return e2ee.EncryptionState(0)
}

type ActiveSpeakersChanged struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSids []string               `protobuf:"bytes,1,rep,name=participant_sids,json=participantSids,proto3" json:"participant_sids"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ActiveSpeakersChanged) Reset() {
	*x = ActiveSpeakersChanged{}
	mi := &file_room_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveSpeakersChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveSpeakersChanged) ProtoMessage() {}

func (x *ActiveSpeakersChanged) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveSpeakersChanged.ProtoReflect.Descriptor instead.
func (*ActiveSpeakersChanged) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{49}
}

func (x *ActiveSpeakersChanged) GetParticipantSids() []string {
	if x != nil {
		return x.ParticipantSids
	}
	return nil
}

type RoomMetadataChanged struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      string                 `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomMetadataChanged) Reset() {
	*x = RoomMetadataChanged{}
	mi := &file_room_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomMetadataChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomMetadataChanged) ProtoMessage() {}

func (x *RoomMetadataChanged) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomMetadataChanged.ProtoReflect.Descriptor instead.
func (*RoomMetadataChanged) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{50}
}

func (x *RoomMetadataChanged) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type ParticipantMetadataChanged struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSid string                 `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"`
	Metadata       string                 `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ParticipantMetadataChanged) Reset() {
	*x = ParticipantMetadataChanged{}
	mi := &file_room_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantMetadataChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantMetadataChanged) ProtoMessage() {}

func (x *ParticipantMetadataChanged) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantMetadataChanged.ProtoReflect.Descriptor instead.
func (*ParticipantMetadataChanged) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{51}
}

func (x *ParticipantMetadataChanged) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *ParticipantMetadataChanged) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type ParticipantNameChanged struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSid string                 `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ParticipantNameChanged) Reset() {
	*x = ParticipantNameChanged{}
	mi := &file_room_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantNameChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantNameChanged) ProtoMessage() {}

func (x *ParticipantNameChanged) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantNameChanged.ProtoReflect.Descriptor instead.
func (*ParticipantNameChanged) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{52}
}

func (x *ParticipantNameChanged) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *ParticipantNameChanged) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ConnectionQualityChanged struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSid string                 `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"`
	Quality        ConnectionQuality      `protobuf:"varint,2,opt,name=quality,proto3,enum=livekit.proto.ConnectionQuality" json:"quality"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConnectionQualityChanged) Reset() {
	*x = ConnectionQualityChanged{}
	mi := &file_room_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionQualityChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionQualityChanged) ProtoMessage() {}

func (x *ConnectionQualityChanged) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionQualityChanged.ProtoReflect.Descriptor instead.
func (*ConnectionQualityChanged) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{53}
}

func (x *ConnectionQualityChanged) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *ConnectionQualityChanged) GetQuality() ConnectionQuality {
	if x != nil {
		return x.Quality
	}
	return ConnectionQuality_QUALITY_POOR
}

type UserPacket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *OwnedBuffer           `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPacket) Reset() {
	*x = UserPacket{}
	mi := &file_room_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPacket) ProtoMessage() {}

func (x *UserPacket) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPacket.ProtoReflect.Descriptor instead.
func (*UserPacket) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{54}
}

func (x *UserPacket) GetData() *OwnedBuffer {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UserPacket) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type SipDTMF struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Digit         string                 `protobuf:"bytes,2,opt,name=digit,proto3" json:"digit"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SipDTMF) Reset() {
	*x = SipDTMF{}
	mi := &file_room_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SipDTMF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipDTMF) ProtoMessage() {}

func (x *SipDTMF) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipDTMF.ProtoReflect.Descriptor instead.
func (*SipDTMF) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{55}
}

func (x *SipDTMF) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SipDTMF) GetDigit() string {
	if x != nil {
		return x.Digit
	}
	return ""
}

type DataPacketReceived struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Kind                DataPacketKind         `protobuf:"varint,1,opt,name=kind,proto3,enum=livekit.proto.DataPacketKind" json:"kind"`
	ParticipantIdentity string                 `protobuf:"bytes,2,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity"` // Can be empty if the data is sent a server SDK
	// Deprecated: Marked as deprecated in room.proto.
	ParticipantSid string `protobuf:"bytes,3,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid"` // Can be empty if the data is sent a server SDK
	// Types that are valid to be assigned to Value:
	//
	//	*DataPacketReceived_User
	//	*DataPacketReceived_SipDtmf
	Value         isDataPacketReceived_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataPacketReceived) Reset() {
	*x = DataPacketReceived{}
	mi := &file_room_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataPacketReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPacketReceived) ProtoMessage() {}

func (x *DataPacketReceived) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPacketReceived.ProtoReflect.Descriptor instead.
func (*DataPacketReceived) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{56}
}

func (x *DataPacketReceived) GetKind() DataPacketKind {
	if x != nil {
		return x.Kind
	}
	return DataPacketKind_KIND_LOSSY
}

func (x *DataPacketReceived) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

// Deprecated: Marked as deprecated in room.proto.
func (x *DataPacketReceived) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *DataPacketReceived) GetValue() isDataPacketReceived_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DataPacketReceived) GetUser() *UserPacket {
	if x != nil {
		if x, ok := x.Value.(*DataPacketReceived_User); ok {
			return x.User
		}
	}
	return nil
}

func (x *DataPacketReceived) GetSipDtmf() *SipDTMF {
	if x != nil {
		if x, ok := x.Value.(*DataPacketReceived_SipDtmf); ok {
			return x.SipDtmf
		}
	}
	return nil
}

type isDataPacketReceived_Value interface {
	isDataPacketReceived_Value()
}

type DataPacketReceived_User struct {
	User *UserPacket `protobuf:"bytes,4,opt,name=user,proto3,oneof"`
}

type DataPacketReceived_SipDtmf struct {
	SipDtmf *SipDTMF `protobuf:"bytes,5,opt,name=sip_dtmf,json=sipDtmf,proto3,oneof"`
}

func (*DataPacketReceived_User) isDataPacketReceived_Value() {}

func (*DataPacketReceived_SipDtmf) isDataPacketReceived_Value() {}

type ConnectionStateChanged struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         ConnectionState        `protobuf:"varint,1,opt,name=state,proto3,enum=livekit.proto.ConnectionState" json:"state"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionStateChanged) Reset() {
	*x = ConnectionStateChanged{}
	mi := &file_room_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionStateChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionStateChanged) ProtoMessage() {}

func (x *ConnectionStateChanged) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionStateChanged.ProtoReflect.Descriptor instead.
func (*ConnectionStateChanged) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{57}
}

func (x *ConnectionStateChanged) GetState() ConnectionState {
	if x != nil {
		return x.State
	}
	return ConnectionState_CONN_DISCONNECTED
}

type Connected struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connected) Reset() {
	*x = Connected{}
	mi := &file_room_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connected) ProtoMessage() {}

func (x *Connected) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connected.ProtoReflect.Descriptor instead.
func (*Connected) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{58}
}

type Disconnected struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Disconnected) Reset() {
	*x = Disconnected{}
	mi := &file_room_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disconnected) ProtoMessage() {}

func (x *Disconnected) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disconnected.ProtoReflect.Descriptor instead.
func (*Disconnected) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{59}
}

type Reconnecting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reconnecting) Reset() {
	*x = Reconnecting{}
	mi := &file_room_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reconnecting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reconnecting) ProtoMessage() {}

func (x *Reconnecting) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reconnecting.ProtoReflect.Descriptor instead.
func (*Reconnecting) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{60}
}

type Reconnected struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reconnected) Reset() {
	*x = Reconnected{}
	mi := &file_room_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reconnected) ProtoMessage() {}

func (x *Reconnected) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reconnected.ProtoReflect.Descriptor instead.
func (*Reconnected) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{61}
}

type RoomEOS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomEOS) Reset() {
	*x = RoomEOS{}
	mi := &file_room_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomEOS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomEOS) ProtoMessage() {}

func (x *RoomEOS) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomEOS.ProtoReflect.Descriptor instead.
func (*RoomEOS) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{62}
}

type ConnectCallback_ParticipantWithTracks struct {
	state       protoimpl.MessageState        `protogen:"open.v1"`
	Participant *participant.OwnedParticipant `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant"`
	// TrackInfo are not needed here, if we're subscribed to a track, the
	// FfiServer will send a TrackSubscribed event
	Publications  []*track.OwnedTrackPublication `protobuf:"bytes,2,rep,name=publications,proto3" json:"publications"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectCallback_ParticipantWithTracks) Reset() {
	*x = ConnectCallback_ParticipantWithTracks{}
	mi := &file_room_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectCallback_ParticipantWithTracks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectCallback_ParticipantWithTracks) ProtoMessage() {}

func (x *ConnectCallback_ParticipantWithTracks) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectCallback_ParticipantWithTracks.ProtoReflect.Descriptor instead.
func (*ConnectCallback_ParticipantWithTracks) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ConnectCallback_ParticipantWithTracks) GetParticipant() *participant.OwnedParticipant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *ConnectCallback_ParticipantWithTracks) GetPublications() []*track.OwnedTrackPublication {
	if x != nil {
		return x.Publications
	}
	return nil
}

var File_room_proto protoreflect.FileDescriptor

var file_room_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x65, 0x32, 0x65,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x34, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2c, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x49, 0x64, 0x22, 0xbf, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x4c, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0xa4,
	0x01, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x2f, 0x0a, 0x12, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x12,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0xb0, 0x01,
	0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x31, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x46, 0x0a,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x53, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f,
	0x6e, 0x5f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x6e, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x22, 0x33, 0x0a, 0x16, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x16, 0x55, 0x6e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xf8, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x50, 0x74, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x30, 0x0a,
	0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22,
	0x46, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x72, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22,
	0x66, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0x34, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x39, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x34, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x40, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x22, 0x30, 0x0a, 0x0d,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22, 0xd1,
	0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0e, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x3a, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x64, 0x74, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x63, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x63, 0x61, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x57, 0x0a, 0x09, 0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x09,
	0x52, 0x74, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x12, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x6c,
	0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x39, 0x0a, 0x0b, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0a,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x0b, 0x52,
	0x6f, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x79,
	0x6e, 0x61, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x79,
	0x6e, 0x61, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x65, 0x32, 0x65, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x32, 0x65, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x04, 0x65, 0x32, 0x65, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x74, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x72, 0x74, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x42, 0x0a, 0x0a, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x50, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x22, 0x73, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x66, 0x69, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc6, 0x0f, 0x0a, 0x09,
	0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x72, 0x6f, 0x6f, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x15, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x17, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x15, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x15,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x4e, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x4b, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12,
	0x64, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d,
	0x75, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x4d, 0x75, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x75,
	0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x6d,
	0x75, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x15, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x72, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x6d, 0x0a, 0x1c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x61, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x16, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x18,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12,
	0x41, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x12, 0x65, 0x32, 0x65, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x32, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x65, 0x32, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x65, 0x6f, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x4f, 0x53, 0x48, 0x00, 0x52, 0x03, 0x65,
	0x6f, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x6f, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x35, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x66, 0x69, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x42, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x53, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x77, 0x6e, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64,
	0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x77, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x22, 0x59, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x17,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x52, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x64, 0x22, 0x71, 0x0a,
	0x10, 0x45, 0x32, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x42, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x53, 0x69, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x13, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x61, 0x0a, 0x1a, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x16, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x7f, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0x52, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x77, 0x6e, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x33, 0x0a, 0x07, 0x53, 0x69, 0x70, 0x44, 0x54, 0x4d,
	0x46, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x67, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x69, 0x67, 0x69, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x12,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x69, 0x70, 0x5f, 0x64, 0x74,
	0x6d, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x70, 0x44, 0x54, 0x4d, 0x46,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x69, 0x70, 0x44, 0x74, 0x6d, 0x66, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x0b, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x22, 0x09, 0x0a, 0x07, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x4f, 0x53, 0x2a, 0x50, 0x0a, 0x10, 0x49,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x59, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4e, 0x4f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x43, 0x0a,
	0x18, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x41, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x41,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x41, 0x4c, 0x4c, 0x59,
	0x10, 0x01, 0x2a, 0x60, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x4f, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f,
	0x53, 0x54, 0x10, 0x03, 0x2a, 0x53, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x4e, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x33, 0x0a, 0x0e, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x59, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x42, 0x3f,
	0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2d, 0x72, 0x74,
	0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0xaa,
	0x02, 0x0d, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_room_proto_rawDescOnce sync.Once
	file_room_proto_rawDescData = file_room_proto_rawDesc
)

func file_room_proto_rawDescGZIP() []byte {
	file_room_proto_rawDescOnce.Do(func() {
		file_room_proto_rawDescData = protoimpl.X.CompressGZIP(file_room_proto_rawDescData)
	})
	return file_room_proto_rawDescData
}

var file_room_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_room_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_room_proto_goTypes = []any{
	(IceTransportType)(0),                         // 0: livekit.proto.IceTransportType
	(ContinualGatheringPolicy)(0),                 // 1: livekit.proto.ContinualGatheringPolicy
	(ConnectionQuality)(0),                        // 2: livekit.proto.ConnectionQuality
	(ConnectionState)(0),                          // 3: livekit.proto.ConnectionState
	(DataPacketKind)(0),                           // 4: livekit.proto.DataPacketKind
	(*ConnectRequest)(nil),                        // 5: livekit.proto.ConnectRequest
	(*ConnectResponse)(nil),                       // 6: livekit.proto.ConnectResponse
	(*ConnectCallback)(nil),                       // 7: livekit.proto.ConnectCallback
	(*DisconnectRequest)(nil),                     // 8: livekit.proto.DisconnectRequest
	(*DisconnectResponse)(nil),                    // 9: livekit.proto.DisconnectResponse
	(*DisconnectCallback)(nil),                    // 10: livekit.proto.DisconnectCallback
	(*PublishTrackRequest)(nil),                   // 11: livekit.proto.PublishTrackRequest
	(*PublishTrackResponse)(nil),                  // 12: livekit.proto.PublishTrackResponse
	(*PublishTrackCallback)(nil),                  // 13: livekit.proto.PublishTrackCallback
	(*UnpublishTrackRequest)(nil),                 // 14: livekit.proto.UnpublishTrackRequest
	(*UnpublishTrackResponse)(nil),                // 15: livekit.proto.UnpublishTrackResponse
	(*UnpublishTrackCallback)(nil),                // 16: livekit.proto.UnpublishTrackCallback
	(*PublishDataRequest)(nil),                    // 17: livekit.proto.PublishDataRequest
	(*PublishDataResponse)(nil),                   // 18: livekit.proto.PublishDataResponse
	(*PublishDataCallback)(nil),                   // 19: livekit.proto.PublishDataCallback
	(*UpdateLocalMetadataRequest)(nil),            // 20: livekit.proto.UpdateLocalMetadataRequest
	(*UpdateLocalMetadataResponse)(nil),           // 21: livekit.proto.UpdateLocalMetadataResponse
	(*UpdateLocalMetadataCallback)(nil),           // 22: livekit.proto.UpdateLocalMetadataCallback
	(*UpdateLocalNameRequest)(nil),                // 23: livekit.proto.UpdateLocalNameRequest
	(*UpdateLocalNameResponse)(nil),               // 24: livekit.proto.UpdateLocalNameResponse
	(*UpdateLocalNameCallback)(nil),               // 25: livekit.proto.UpdateLocalNameCallback
	(*SetSubscribedRequest)(nil),                  // 26: livekit.proto.SetSubscribedRequest
	(*SetSubscribedResponse)(nil),                 // 27: livekit.proto.SetSubscribedResponse
	(*GetSessionStatsRequest)(nil),                // 28: livekit.proto.GetSessionStatsRequest
	(*GetSessionStatsResponse)(nil),               // 29: livekit.proto.GetSessionStatsResponse
	(*GetSessionStatsCallback)(nil),               // 30: livekit.proto.GetSessionStatsCallback
	(*VideoEncoding)(nil),                         // 31: livekit.proto.VideoEncoding
	(*AudioEncoding)(nil),                         // 32: livekit.proto.AudioEncoding
	(*TrackPublishOptions)(nil),                   // 33: livekit.proto.TrackPublishOptions
	(*IceServer)(nil),                             // 34: livekit.proto.IceServer
	(*RtcConfig)(nil),                             // 35: livekit.proto.RtcConfig
	(*RoomOptions)(nil),                           // 36: livekit.proto.RoomOptions
	(*BufferInfo)(nil),                            // 37: livekit.proto.BufferInfo
	(*OwnedBuffer)(nil),                           // 38: livekit.proto.OwnedBuffer
	(*RoomEvent)(nil),                             // 39: livekit.proto.RoomEvent
	(*RoomInfo)(nil),                              // 40: livekit.proto.RoomInfo
	(*OwnedRoom)(nil),                             // 41: livekit.proto.OwnedRoom
	(*ParticipantConnected)(nil),                  // 42: livekit.proto.ParticipantConnected
	(*ParticipantDisconnected)(nil),               // 43: livekit.proto.ParticipantDisconnected
	(*LocalTrackPublished)(nil),                   // 44: livekit.proto.LocalTrackPublished
	(*LocalTrackUnpublished)(nil),                 // 45: livekit.proto.LocalTrackUnpublished
	(*TrackPublished)(nil),                        // 46: livekit.proto.TrackPublished
	(*TrackUnpublished)(nil),                      // 47: livekit.proto.TrackUnpublished
	(*TrackSubscribed)(nil),                       // 48: livekit.proto.TrackSubscribed
	(*TrackUnsubscribed)(nil),                     // 49: livekit.proto.TrackUnsubscribed
	(*TrackSubscriptionFailed)(nil),               // 50: livekit.proto.TrackSubscriptionFailed
	(*TrackMuted)(nil),                            // 51: livekit.proto.TrackMuted
	(*TrackUnmuted)(nil),                          // 52: livekit.proto.TrackUnmuted
	(*E2EeStateChanged)(nil),                      // 53: livekit.proto.E2eeStateChanged
	(*ActiveSpeakersChanged)(nil),                 // 54: livekit.proto.ActiveSpeakersChanged
	(*RoomMetadataChanged)(nil),                   // 55: livekit.proto.RoomMetadataChanged
	(*ParticipantMetadataChanged)(nil),            // 56: livekit.proto.ParticipantMetadataChanged
	(*ParticipantNameChanged)(nil),                // 57: livekit.proto.ParticipantNameChanged
	(*ConnectionQualityChanged)(nil),              // 58: livekit.proto.ConnectionQualityChanged
	(*UserPacket)(nil),                            // 59: livekit.proto.UserPacket
	(*SipDTMF)(nil),                               // 60: livekit.proto.SipDTMF
	(*DataPacketReceived)(nil),                    // 61: livekit.proto.DataPacketReceived
	(*ConnectionStateChanged)(nil),                // 62: livekit.proto.ConnectionStateChanged
	(*Connected)(nil),                             // 63: livekit.proto.Connected
	(*Disconnected)(nil),                          // 64: livekit.proto.Disconnected
	(*Reconnecting)(nil),                          // 65: livekit.proto.Reconnecting
	(*Reconnected)(nil),                           // 66: livekit.proto.Reconnected
	(*RoomEOS)(nil),                               // 67: livekit.proto.RoomEOS
	(*ConnectCallback_ParticipantWithTracks)(nil), // 68: livekit.proto.ConnectCallback.ParticipantWithTracks
	(*participant.OwnedParticipant)(nil),          // 69: livekit.proto.OwnedParticipant
	(*track.OwnedTrackPublication)(nil),           // 70: livekit.proto.OwnedTrackPublication
	(*stats.RtcStats)(nil),                        // 71: livekit.proto.RtcStats
	(video_frame.VideoCodec)(0),                   // 72: livekit.proto.VideoCodec
	(track.TrackSource)(0),                        // 73: livekit.proto.TrackSource
	(*e2ee.E2EeOptions)(nil),                      // 74: livekit.proto.E2eeOptions
	(*handle.FfiOwnedHandle)(nil),                 // 75: livekit.proto.FfiOwnedHandle
	(*track.OwnedTrack)(nil),                      // 76: livekit.proto.OwnedTrack
	(e2ee.EncryptionState)(0),                     // 77: livekit.proto.EncryptionState
}
var file_room_proto_depIdxs = []int32{
	36, // 0: livekit.proto.ConnectRequest.options:type_name -> livekit.proto.RoomOptions
	41, // 1: livekit.proto.ConnectCallback.room:type_name -> livekit.proto.OwnedRoom
	69, // 2: livekit.proto.ConnectCallback.local_participant:type_name -> livekit.proto.OwnedParticipant
	68, // 3: livekit.proto.ConnectCallback.participants:type_name -> livekit.proto.ConnectCallback.ParticipantWithTracks
	33, // 4: livekit.proto.PublishTrackRequest.options:type_name -> livekit.proto.TrackPublishOptions
	70, // 5: livekit.proto.PublishTrackCallback.publication:type_name -> livekit.proto.OwnedTrackPublication
	4,  // 6: livekit.proto.PublishDataRequest.kind:type_name -> livekit.proto.DataPacketKind
	71, // 7: livekit.proto.GetSessionStatsCallback.publisher_stats:type_name -> livekit.proto.RtcStats
	71, // 8: livekit.proto.GetSessionStatsCallback.subscriber_stats:type_name -> livekit.proto.RtcStats
	31, // 9: livekit.proto.TrackPublishOptions.video_encoding:type_name -> livekit.proto.VideoEncoding
	32, // 10: livekit.proto.TrackPublishOptions.audio_encoding:type_name -> livekit.proto.AudioEncoding
	72, // 11: livekit.proto.TrackPublishOptions.video_codec:type_name -> livekit.proto.VideoCodec
	73, // 12: livekit.proto.TrackPublishOptions.source:type_name -> livekit.proto.TrackSource
	0,  // 13: livekit.proto.RtcConfig.ice_transport_type:type_name -> livekit.proto.IceTransportType
	1,  // 14: livekit.proto.RtcConfig.continual_gathering_policy:type_name -> livekit.proto.ContinualGatheringPolicy
	34, // 15: livekit.proto.RtcConfig.ice_servers:type_name -> livekit.proto.IceServer
	74, // 16: livekit.proto.RoomOptions.e2ee:type_name -> livekit.proto.E2eeOptions
	35, // 17: livekit.proto.RoomOptions.rtc_config:type_name -> livekit.proto.RtcConfig
	75, // 18: livekit.proto.OwnedBuffer.handle:type_name -> livekit.proto.FfiOwnedHandle
	37, // 19: livekit.proto.OwnedBuffer.data:type_name -> livekit.proto.BufferInfo
	42, // 20: livekit.proto.RoomEvent.participant_connected:type_name -> livekit.proto.ParticipantConnected
	43, // 21: livekit.proto.RoomEvent.participant_disconnected:type_name -> livekit.proto.ParticipantDisconnected
	44, // 22: livekit.proto.RoomEvent.local_track_published:type_name -> livekit.proto.LocalTrackPublished
	45, // 23: livekit.proto.RoomEvent.local_track_unpublished:type_name -> livekit.proto.LocalTrackUnpublished
	46, // 24: livekit.proto.RoomEvent.track_published:type_name -> livekit.proto.TrackPublished
	47, // 25: livekit.proto.RoomEvent.track_unpublished:type_name -> livekit.proto.TrackUnpublished
	48, // 26: livekit.proto.RoomEvent.track_subscribed:type_name -> livekit.proto.TrackSubscribed
	49, // 27: livekit.proto.RoomEvent.track_unsubscribed:type_name -> livekit.proto.TrackUnsubscribed
	50, // 28: livekit.proto.RoomEvent.track_subscription_failed:type_name -> livekit.proto.TrackSubscriptionFailed
	51, // 29: livekit.proto.RoomEvent.track_muted:type_name -> livekit.proto.TrackMuted
	52, // 30: livekit.proto.RoomEvent.track_unmuted:type_name -> livekit.proto.TrackUnmuted
	54, // 31: livekit.proto.RoomEvent.active_speakers_changed:type_name -> livekit.proto.ActiveSpeakersChanged
	55, // 32: livekit.proto.RoomEvent.room_metadata_changed:type_name -> livekit.proto.RoomMetadataChanged
	56, // 33: livekit.proto.RoomEvent.participant_metadata_changed:type_name -> livekit.proto.ParticipantMetadataChanged
	57, // 34: livekit.proto.RoomEvent.participant_name_changed:type_name -> livekit.proto.ParticipantNameChanged
	58, // 35: livekit.proto.RoomEvent.connection_quality_changed:type_name -> livekit.proto.ConnectionQualityChanged
	62, // 36: livekit.proto.RoomEvent.connection_state_changed:type_name -> livekit.proto.ConnectionStateChanged
	64, // 37: livekit.proto.RoomEvent.disconnected:type_name -> livekit.proto.Disconnected
	65, // 38: livekit.proto.RoomEvent.reconnecting:type_name -> livekit.proto.Reconnecting
	66, // 39: livekit.proto.RoomEvent.reconnected:type_name -> livekit.proto.Reconnected
	53, // 40: livekit.proto.RoomEvent.e2ee_state_changed:type_name -> livekit.proto.E2eeStateChanged
	67, // 41: livekit.proto.RoomEvent.eos:type_name -> livekit.proto.RoomEOS
	61, // 42: livekit.proto.RoomEvent.data_packet_received:type_name -> livekit.proto.DataPacketReceived
	75, // 43: livekit.proto.OwnedRoom.handle:type_name -> livekit.proto.FfiOwnedHandle
	40, // 44: livekit.proto.OwnedRoom.info:type_name -> livekit.proto.RoomInfo
	69, // 45: livekit.proto.ParticipantConnected.info:type_name -> livekit.proto.OwnedParticipant
	70, // 46: livekit.proto.TrackPublished.publication:type_name -> livekit.proto.OwnedTrackPublication
	76, // 47: livekit.proto.TrackSubscribed.track:type_name -> livekit.proto.OwnedTrack
	77, // 48: livekit.proto.E2eeStateChanged.state:type_name -> livekit.proto.EncryptionState
	2,  // 49: livekit.proto.ConnectionQualityChanged.quality:type_name -> livekit.proto.ConnectionQuality
	38, // 50: livekit.proto.UserPacket.data:type_name -> livekit.proto.OwnedBuffer
	4,  // 51: livekit.proto.DataPacketReceived.kind:type_name -> livekit.proto.DataPacketKind
	59, // 52: livekit.proto.DataPacketReceived.user:type_name -> livekit.proto.UserPacket
	60, // 53: livekit.proto.DataPacketReceived.sip_dtmf:type_name -> livekit.proto.SipDTMF
	3,  // 54: livekit.proto.ConnectionStateChanged.state:type_name -> livekit.proto.ConnectionState
	69, // 55: livekit.proto.ConnectCallback.ParticipantWithTracks.participant:type_name -> livekit.proto.OwnedParticipant
	70, // 56: livekit.proto.ConnectCallback.ParticipantWithTracks.publications:type_name -> livekit.proto.OwnedTrackPublication
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_room_proto_init() }
func file_room_proto_init() {
	if File_room_proto != nil {
		return
	}
	file_room_proto_msgTypes[34].OneofWrappers = []any{
		(*RoomEvent_ParticipantConnected)(nil),
		(*RoomEvent_ParticipantDisconnected)(nil),
		(*RoomEvent_LocalTrackPublished)(nil),
		(*RoomEvent_LocalTrackUnpublished)(nil),
		(*RoomEvent_TrackPublished)(nil),
		(*RoomEvent_TrackUnpublished)(nil),
		(*RoomEvent_TrackSubscribed)(nil),
		(*RoomEvent_TrackUnsubscribed)(nil),
		(*RoomEvent_TrackSubscriptionFailed)(nil),
		(*RoomEvent_TrackMuted)(nil),
		(*RoomEvent_TrackUnmuted)(nil),
		(*RoomEvent_ActiveSpeakersChanged)(nil),
		(*RoomEvent_RoomMetadataChanged)(nil),
		(*RoomEvent_ParticipantMetadataChanged)(nil),
		(*RoomEvent_ParticipantNameChanged)(nil),
		(*RoomEvent_ConnectionQualityChanged)(nil),
		(*RoomEvent_ConnectionStateChanged)(nil),
		(*RoomEvent_Disconnected)(nil),
		(*RoomEvent_Reconnecting)(nil),
		(*RoomEvent_Reconnected)(nil),
		(*RoomEvent_E2EeStateChanged)(nil),
		(*RoomEvent_Eos)(nil),
		(*RoomEvent_DataPacketReceived)(nil),
	}
	file_room_proto_msgTypes[56].OneofWrappers = []any{
		(*DataPacketReceived_User)(nil),
		(*DataPacketReceived_SipDtmf)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_room_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_room_proto_goTypes,
		DependencyIndexes: file_room_proto_depIdxs,
		EnumInfos:         file_room_proto_enumTypes,
		MessageInfos:      file_room_proto_msgTypes,
	}.Build()
	File_room_proto = out.File
	file_room_proto_rawDesc = nil
	file_room_proto_goTypes = nil
	file_room_proto_depIdxs = nil
}
