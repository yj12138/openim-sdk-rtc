// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.27.1
// source: stats.proto

package stats

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataChannelState int32

const (
	DataChannelState_DC_CONNECTING DataChannelState = 0
	DataChannelState_DC_OPEN       DataChannelState = 1
	DataChannelState_DC_CLOSING    DataChannelState = 2
	DataChannelState_DC_CLOSED     DataChannelState = 3
)

// Enum value maps for DataChannelState.
var (
	DataChannelState_name = map[int32]string{
		0: "DC_CONNECTING",
		1: "DC_OPEN",
		2: "DC_CLOSING",
		3: "DC_CLOSED",
	}
	DataChannelState_value = map[string]int32{
		"DC_CONNECTING": 0,
		"DC_OPEN":       1,
		"DC_CLOSING":    2,
		"DC_CLOSED":     3,
	}
)

func (x DataChannelState) Enum() *DataChannelState {
	p := new(DataChannelState)
	*p = x
	return p
}

func (x DataChannelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataChannelState) Descriptor() protoreflect.EnumDescriptor {
	return file_stats_proto_enumTypes[0].Descriptor()
}

func (DataChannelState) Type() protoreflect.EnumType {
	return &file_stats_proto_enumTypes[0]
}

func (x DataChannelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataChannelState.Descriptor instead.
func (DataChannelState) EnumDescriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0}
}

type QualityLimitationReason int32

const (
	QualityLimitationReason_LIMITATION_NONE      QualityLimitationReason = 0
	QualityLimitationReason_LIMITATION_CPU       QualityLimitationReason = 1
	QualityLimitationReason_LIMITATION_BANDWIDTH QualityLimitationReason = 2
	QualityLimitationReason_LIMITATION_OTHER     QualityLimitationReason = 3
)

// Enum value maps for QualityLimitationReason.
var (
	QualityLimitationReason_name = map[int32]string{
		0: "LIMITATION_NONE",
		1: "LIMITATION_CPU",
		2: "LIMITATION_BANDWIDTH",
		3: "LIMITATION_OTHER",
	}
	QualityLimitationReason_value = map[string]int32{
		"LIMITATION_NONE":      0,
		"LIMITATION_CPU":       1,
		"LIMITATION_BANDWIDTH": 2,
		"LIMITATION_OTHER":     3,
	}
)

func (x QualityLimitationReason) Enum() *QualityLimitationReason {
	p := new(QualityLimitationReason)
	*p = x
	return p
}

func (x QualityLimitationReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QualityLimitationReason) Descriptor() protoreflect.EnumDescriptor {
	return file_stats_proto_enumTypes[1].Descriptor()
}

func (QualityLimitationReason) Type() protoreflect.EnumType {
	return &file_stats_proto_enumTypes[1]
}

func (x QualityLimitationReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QualityLimitationReason.Descriptor instead.
func (QualityLimitationReason) EnumDescriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{1}
}

type IceRole int32

const (
	IceRole_ICE_UNKNOWN     IceRole = 0
	IceRole_ICE_CONTROLLING IceRole = 1
	IceRole_ICE_CONTROLLED  IceRole = 2
)

// Enum value maps for IceRole.
var (
	IceRole_name = map[int32]string{
		0: "ICE_UNKNOWN",
		1: "ICE_CONTROLLING",
		2: "ICE_CONTROLLED",
	}
	IceRole_value = map[string]int32{
		"ICE_UNKNOWN":     0,
		"ICE_CONTROLLING": 1,
		"ICE_CONTROLLED":  2,
	}
)

func (x IceRole) Enum() *IceRole {
	p := new(IceRole)
	*p = x
	return p
}

func (x IceRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IceRole) Descriptor() protoreflect.EnumDescriptor {
	return file_stats_proto_enumTypes[2].Descriptor()
}

func (IceRole) Type() protoreflect.EnumType {
	return &file_stats_proto_enumTypes[2]
}

func (x IceRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IceRole.Descriptor instead.
func (IceRole) EnumDescriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{2}
}

type DtlsTransportState int32

const (
	DtlsTransportState_DTLS_TRANSPORT_NEW        DtlsTransportState = 0
	DtlsTransportState_DTLS_TRANSPORT_CONNECTING DtlsTransportState = 1
	DtlsTransportState_DTLS_TRANSPORT_CONNECTED  DtlsTransportState = 2
	DtlsTransportState_DTLS_TRANSPORT_CLOSED     DtlsTransportState = 3
	DtlsTransportState_DTLS_TRANSPORT_FAILED     DtlsTransportState = 4
)

// Enum value maps for DtlsTransportState.
var (
	DtlsTransportState_name = map[int32]string{
		0: "DTLS_TRANSPORT_NEW",
		1: "DTLS_TRANSPORT_CONNECTING",
		2: "DTLS_TRANSPORT_CONNECTED",
		3: "DTLS_TRANSPORT_CLOSED",
		4: "DTLS_TRANSPORT_FAILED",
	}
	DtlsTransportState_value = map[string]int32{
		"DTLS_TRANSPORT_NEW":        0,
		"DTLS_TRANSPORT_CONNECTING": 1,
		"DTLS_TRANSPORT_CONNECTED":  2,
		"DTLS_TRANSPORT_CLOSED":     3,
		"DTLS_TRANSPORT_FAILED":     4,
	}
)

func (x DtlsTransportState) Enum() *DtlsTransportState {
	p := new(DtlsTransportState)
	*p = x
	return p
}

func (x DtlsTransportState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DtlsTransportState) Descriptor() protoreflect.EnumDescriptor {
	return file_stats_proto_enumTypes[3].Descriptor()
}

func (DtlsTransportState) Type() protoreflect.EnumType {
	return &file_stats_proto_enumTypes[3]
}

func (x DtlsTransportState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DtlsTransportState.Descriptor instead.
func (DtlsTransportState) EnumDescriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{3}
}

type IceTransportState int32

const (
	IceTransportState_ICE_TRANSPORT_NEW          IceTransportState = 0
	IceTransportState_ICE_TRANSPORT_CHECKING     IceTransportState = 1
	IceTransportState_ICE_TRANSPORT_CONNECTED    IceTransportState = 2
	IceTransportState_ICE_TRANSPORT_COMPLETED    IceTransportState = 3
	IceTransportState_ICE_TRANSPORT_DISCONNECTED IceTransportState = 4
	IceTransportState_ICE_TRANSPORT_FAILED       IceTransportState = 5
	IceTransportState_ICE_TRANSPORT_CLOSED       IceTransportState = 6
)

// Enum value maps for IceTransportState.
var (
	IceTransportState_name = map[int32]string{
		0: "ICE_TRANSPORT_NEW",
		1: "ICE_TRANSPORT_CHECKING",
		2: "ICE_TRANSPORT_CONNECTED",
		3: "ICE_TRANSPORT_COMPLETED",
		4: "ICE_TRANSPORT_DISCONNECTED",
		5: "ICE_TRANSPORT_FAILED",
		6: "ICE_TRANSPORT_CLOSED",
	}
	IceTransportState_value = map[string]int32{
		"ICE_TRANSPORT_NEW":          0,
		"ICE_TRANSPORT_CHECKING":     1,
		"ICE_TRANSPORT_CONNECTED":    2,
		"ICE_TRANSPORT_COMPLETED":    3,
		"ICE_TRANSPORT_DISCONNECTED": 4,
		"ICE_TRANSPORT_FAILED":       5,
		"ICE_TRANSPORT_CLOSED":       6,
	}
)

func (x IceTransportState) Enum() *IceTransportState {
	p := new(IceTransportState)
	*p = x
	return p
}

func (x IceTransportState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IceTransportState) Descriptor() protoreflect.EnumDescriptor {
	return file_stats_proto_enumTypes[4].Descriptor()
}

func (IceTransportState) Type() protoreflect.EnumType {
	return &file_stats_proto_enumTypes[4]
}

func (x IceTransportState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IceTransportState.Descriptor instead.
func (IceTransportState) EnumDescriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{4}
}

type DtlsRole int32

const (
	DtlsRole_DTLS_CLIENT  DtlsRole = 0
	DtlsRole_DTLS_SERVER  DtlsRole = 1
	DtlsRole_DTLS_UNKNOWN DtlsRole = 2
)

// Enum value maps for DtlsRole.
var (
	DtlsRole_name = map[int32]string{
		0: "DTLS_CLIENT",
		1: "DTLS_SERVER",
		2: "DTLS_UNKNOWN",
	}
	DtlsRole_value = map[string]int32{
		"DTLS_CLIENT":  0,
		"DTLS_SERVER":  1,
		"DTLS_UNKNOWN": 2,
	}
)

func (x DtlsRole) Enum() *DtlsRole {
	p := new(DtlsRole)
	*p = x
	return p
}

func (x DtlsRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DtlsRole) Descriptor() protoreflect.EnumDescriptor {
	return file_stats_proto_enumTypes[5].Descriptor()
}

func (DtlsRole) Type() protoreflect.EnumType {
	return &file_stats_proto_enumTypes[5]
}

func (x DtlsRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DtlsRole.Descriptor instead.
func (DtlsRole) EnumDescriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{5}
}

type IceCandidatePairState int32

const (
	IceCandidatePairState_PAIR_FROZEN      IceCandidatePairState = 0
	IceCandidatePairState_PAIR_WAITING     IceCandidatePairState = 1
	IceCandidatePairState_PAIR_IN_PROGRESS IceCandidatePairState = 2
	IceCandidatePairState_PAIR_FAILED      IceCandidatePairState = 3
	IceCandidatePairState_PAIR_SUCCEEDED   IceCandidatePairState = 4
)

// Enum value maps for IceCandidatePairState.
var (
	IceCandidatePairState_name = map[int32]string{
		0: "PAIR_FROZEN",
		1: "PAIR_WAITING",
		2: "PAIR_IN_PROGRESS",
		3: "PAIR_FAILED",
		4: "PAIR_SUCCEEDED",
	}
	IceCandidatePairState_value = map[string]int32{
		"PAIR_FROZEN":      0,
		"PAIR_WAITING":     1,
		"PAIR_IN_PROGRESS": 2,
		"PAIR_FAILED":      3,
		"PAIR_SUCCEEDED":   4,
	}
)

func (x IceCandidatePairState) Enum() *IceCandidatePairState {
	p := new(IceCandidatePairState)
	*p = x
	return p
}

func (x IceCandidatePairState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IceCandidatePairState) Descriptor() protoreflect.EnumDescriptor {
	return file_stats_proto_enumTypes[6].Descriptor()
}

func (IceCandidatePairState) Type() protoreflect.EnumType {
	return &file_stats_proto_enumTypes[6]
}

func (x IceCandidatePairState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IceCandidatePairState.Descriptor instead.
func (IceCandidatePairState) EnumDescriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{6}
}

type IceCandidateType int32

const (
	IceCandidateType_HOST  IceCandidateType = 0
	IceCandidateType_SRFLX IceCandidateType = 1
	IceCandidateType_PRFLX IceCandidateType = 2
	IceCandidateType_RELAY IceCandidateType = 3
)

// Enum value maps for IceCandidateType.
var (
	IceCandidateType_name = map[int32]string{
		0: "HOST",
		1: "SRFLX",
		2: "PRFLX",
		3: "RELAY",
	}
	IceCandidateType_value = map[string]int32{
		"HOST":  0,
		"SRFLX": 1,
		"PRFLX": 2,
		"RELAY": 3,
	}
)

func (x IceCandidateType) Enum() *IceCandidateType {
	p := new(IceCandidateType)
	*p = x
	return p
}

func (x IceCandidateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IceCandidateType) Descriptor() protoreflect.EnumDescriptor {
	return file_stats_proto_enumTypes[7].Descriptor()
}

func (IceCandidateType) Type() protoreflect.EnumType {
	return &file_stats_proto_enumTypes[7]
}

func (x IceCandidateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IceCandidateType.Descriptor instead.
func (IceCandidateType) EnumDescriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{7}
}

type IceServerTransportProtocol int32

const (
	IceServerTransportProtocol_TRANSPORT_UDP IceServerTransportProtocol = 0
	IceServerTransportProtocol_TRANSPORT_TCP IceServerTransportProtocol = 1
	IceServerTransportProtocol_TRANSPORT_TLS IceServerTransportProtocol = 2
)

// Enum value maps for IceServerTransportProtocol.
var (
	IceServerTransportProtocol_name = map[int32]string{
		0: "TRANSPORT_UDP",
		1: "TRANSPORT_TCP",
		2: "TRANSPORT_TLS",
	}
	IceServerTransportProtocol_value = map[string]int32{
		"TRANSPORT_UDP": 0,
		"TRANSPORT_TCP": 1,
		"TRANSPORT_TLS": 2,
	}
)

func (x IceServerTransportProtocol) Enum() *IceServerTransportProtocol {
	p := new(IceServerTransportProtocol)
	*p = x
	return p
}

func (x IceServerTransportProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IceServerTransportProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_stats_proto_enumTypes[8].Descriptor()
}

func (IceServerTransportProtocol) Type() protoreflect.EnumType {
	return &file_stats_proto_enumTypes[8]
}

func (x IceServerTransportProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IceServerTransportProtocol.Descriptor instead.
func (IceServerTransportProtocol) EnumDescriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{8}
}

type IceTcpCandidateType int32

const (
	IceTcpCandidateType_CANDIDATE_ACTIVE  IceTcpCandidateType = 0
	IceTcpCandidateType_CANDIDATE_PASSIVE IceTcpCandidateType = 1
	IceTcpCandidateType_CANDIDATE_SO      IceTcpCandidateType = 2
)

// Enum value maps for IceTcpCandidateType.
var (
	IceTcpCandidateType_name = map[int32]string{
		0: "CANDIDATE_ACTIVE",
		1: "CANDIDATE_PASSIVE",
		2: "CANDIDATE_SO",
	}
	IceTcpCandidateType_value = map[string]int32{
		"CANDIDATE_ACTIVE":  0,
		"CANDIDATE_PASSIVE": 1,
		"CANDIDATE_SO":      2,
	}
)

func (x IceTcpCandidateType) Enum() *IceTcpCandidateType {
	p := new(IceTcpCandidateType)
	*p = x
	return p
}

func (x IceTcpCandidateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IceTcpCandidateType) Descriptor() protoreflect.EnumDescriptor {
	return file_stats_proto_enumTypes[9].Descriptor()
}

func (IceTcpCandidateType) Type() protoreflect.EnumType {
	return &file_stats_proto_enumTypes[9]
}

func (x IceTcpCandidateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IceTcpCandidateType.Descriptor instead.
func (IceTcpCandidateType) EnumDescriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{9}
}

type RtcStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Stats:
	//
	//	*RtcStats_Codec_
	//	*RtcStats_InboundRtp_
	//	*RtcStats_OutboundRtp_
	//	*RtcStats_RemoteInboundRtp_
	//	*RtcStats_RemoteOutboundRtp_
	//	*RtcStats_MediaSource_
	//	*RtcStats_MediaPlayout_
	//	*RtcStats_PeerConnection_
	//	*RtcStats_DataChannel_
	//	*RtcStats_Transport_
	//	*RtcStats_CandidatePair_
	//	*RtcStats_LocalCandidate_
	//	*RtcStats_RemoteCandidate_
	//	*RtcStats_Certificate_
	//	*RtcStats_Track_
	Stats         isRtcStats_Stats `protobuf_oneof:"stats"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats) Reset() {
	*x = RtcStats{}
	mi := &file_stats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats) ProtoMessage() {}

func (x *RtcStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats.ProtoReflect.Descriptor instead.
func (*RtcStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0}
}

func (x *RtcStats) GetStats() isRtcStats_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *RtcStats) GetCodec() *RtcStats_Codec {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_Codec_); ok {
			return x.Codec
		}
	}
	return nil
}

func (x *RtcStats) GetInboundRtp() *RtcStats_InboundRtp {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_InboundRtp_); ok {
			return x.InboundRtp
		}
	}
	return nil
}

func (x *RtcStats) GetOutboundRtp() *RtcStats_OutboundRtp {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_OutboundRtp_); ok {
			return x.OutboundRtp
		}
	}
	return nil
}

func (x *RtcStats) GetRemoteInboundRtp() *RtcStats_RemoteInboundRtp {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_RemoteInboundRtp_); ok {
			return x.RemoteInboundRtp
		}
	}
	return nil
}

func (x *RtcStats) GetRemoteOutboundRtp() *RtcStats_RemoteOutboundRtp {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_RemoteOutboundRtp_); ok {
			return x.RemoteOutboundRtp
		}
	}
	return nil
}

func (x *RtcStats) GetMediaSource() *RtcStats_MediaSource {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_MediaSource_); ok {
			return x.MediaSource
		}
	}
	return nil
}

func (x *RtcStats) GetMediaPlayout() *RtcStats_MediaPlayout {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_MediaPlayout_); ok {
			return x.MediaPlayout
		}
	}
	return nil
}

func (x *RtcStats) GetPeerConnection() *RtcStats_PeerConnection {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_PeerConnection_); ok {
			return x.PeerConnection
		}
	}
	return nil
}

func (x *RtcStats) GetDataChannel() *RtcStats_DataChannel {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_DataChannel_); ok {
			return x.DataChannel
		}
	}
	return nil
}

func (x *RtcStats) GetTransport() *RtcStats_Transport {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_Transport_); ok {
			return x.Transport
		}
	}
	return nil
}

func (x *RtcStats) GetCandidatePair() *RtcStats_CandidatePair {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_CandidatePair_); ok {
			return x.CandidatePair
		}
	}
	return nil
}

func (x *RtcStats) GetLocalCandidate() *RtcStats_LocalCandidate {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_LocalCandidate_); ok {
			return x.LocalCandidate
		}
	}
	return nil
}

func (x *RtcStats) GetRemoteCandidate() *RtcStats_RemoteCandidate {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_RemoteCandidate_); ok {
			return x.RemoteCandidate
		}
	}
	return nil
}

func (x *RtcStats) GetCertificate() *RtcStats_Certificate {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_Certificate_); ok {
			return x.Certificate
		}
	}
	return nil
}

func (x *RtcStats) GetTrack() *RtcStats_Track {
	if x != nil {
		if x, ok := x.Stats.(*RtcStats_Track_); ok {
			return x.Track
		}
	}
	return nil
}

type isRtcStats_Stats interface {
	isRtcStats_Stats()
}

type RtcStats_Codec_ struct {
	Codec *RtcStats_Codec `protobuf:"bytes,3,opt,name=codec,proto3,oneof"`
}

type RtcStats_InboundRtp_ struct {
	InboundRtp *RtcStats_InboundRtp `protobuf:"bytes,4,opt,name=inbound_rtp,json=inboundRtp,proto3,oneof"`
}

type RtcStats_OutboundRtp_ struct {
	OutboundRtp *RtcStats_OutboundRtp `protobuf:"bytes,5,opt,name=outbound_rtp,json=outboundRtp,proto3,oneof"`
}

type RtcStats_RemoteInboundRtp_ struct {
	RemoteInboundRtp *RtcStats_RemoteInboundRtp `protobuf:"bytes,6,opt,name=remote_inbound_rtp,json=remoteInboundRtp,proto3,oneof"`
}

type RtcStats_RemoteOutboundRtp_ struct {
	RemoteOutboundRtp *RtcStats_RemoteOutboundRtp `protobuf:"bytes,7,opt,name=remote_outbound_rtp,json=remoteOutboundRtp,proto3,oneof"`
}

type RtcStats_MediaSource_ struct {
	MediaSource *RtcStats_MediaSource `protobuf:"bytes,8,opt,name=media_source,json=mediaSource,proto3,oneof"`
}

type RtcStats_MediaPlayout_ struct {
	MediaPlayout *RtcStats_MediaPlayout `protobuf:"bytes,9,opt,name=media_playout,json=mediaPlayout,proto3,oneof"`
}

type RtcStats_PeerConnection_ struct {
	PeerConnection *RtcStats_PeerConnection `protobuf:"bytes,10,opt,name=peer_connection,json=peerConnection,proto3,oneof"`
}

type RtcStats_DataChannel_ struct {
	DataChannel *RtcStats_DataChannel `protobuf:"bytes,11,opt,name=data_channel,json=dataChannel,proto3,oneof"`
}

type RtcStats_Transport_ struct {
	Transport *RtcStats_Transport `protobuf:"bytes,12,opt,name=transport,proto3,oneof"`
}

type RtcStats_CandidatePair_ struct {
	CandidatePair *RtcStats_CandidatePair `protobuf:"bytes,13,opt,name=candidate_pair,json=candidatePair,proto3,oneof"`
}

type RtcStats_LocalCandidate_ struct {
	LocalCandidate *RtcStats_LocalCandidate `protobuf:"bytes,14,opt,name=local_candidate,json=localCandidate,proto3,oneof"`
}

type RtcStats_RemoteCandidate_ struct {
	RemoteCandidate *RtcStats_RemoteCandidate `protobuf:"bytes,15,opt,name=remote_candidate,json=remoteCandidate,proto3,oneof"`
}

type RtcStats_Certificate_ struct {
	Certificate *RtcStats_Certificate `protobuf:"bytes,16,opt,name=certificate,proto3,oneof"`
}

type RtcStats_Track_ struct {
	Track *RtcStats_Track `protobuf:"bytes,17,opt,name=track,proto3,oneof"`
}

func (*RtcStats_Codec_) isRtcStats_Stats() {}

func (*RtcStats_InboundRtp_) isRtcStats_Stats() {}

func (*RtcStats_OutboundRtp_) isRtcStats_Stats() {}

func (*RtcStats_RemoteInboundRtp_) isRtcStats_Stats() {}

func (*RtcStats_RemoteOutboundRtp_) isRtcStats_Stats() {}

func (*RtcStats_MediaSource_) isRtcStats_Stats() {}

func (*RtcStats_MediaPlayout_) isRtcStats_Stats() {}

func (*RtcStats_PeerConnection_) isRtcStats_Stats() {}

func (*RtcStats_DataChannel_) isRtcStats_Stats() {}

func (*RtcStats_Transport_) isRtcStats_Stats() {}

func (*RtcStats_CandidatePair_) isRtcStats_Stats() {}

func (*RtcStats_LocalCandidate_) isRtcStats_Stats() {}

func (*RtcStats_RemoteCandidate_) isRtcStats_Stats() {}

func (*RtcStats_Certificate_) isRtcStats_Stats() {}

func (*RtcStats_Track_) isRtcStats_Stats() {}

type RtcStatsData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStatsData) Reset() {
	*x = RtcStatsData{}
	mi := &file_stats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStatsData) ProtoMessage() {}

func (x *RtcStatsData) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStatsData.ProtoReflect.Descriptor instead.
func (*RtcStatsData) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{1}
}

func (x *RtcStatsData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RtcStatsData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type CodecStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayloadType   uint32                 `protobuf:"varint,1,opt,name=payload_type,json=payloadType,proto3" json:"payload_type"`
	TransportId   string                 `protobuf:"bytes,2,opt,name=transport_id,json=transportId,proto3" json:"transport_id"`
	MimeType      string                 `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type"`
	ClockRate     uint32                 `protobuf:"varint,4,opt,name=clock_rate,json=clockRate,proto3" json:"clock_rate"`
	Channels      uint32                 `protobuf:"varint,5,opt,name=channels,proto3" json:"channels"`
	SdpFmtpLine   string                 `protobuf:"bytes,6,opt,name=sdp_fmtp_line,json=sdpFmtpLine,proto3" json:"sdp_fmtp_line"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodecStats) Reset() {
	*x = CodecStats{}
	mi := &file_stats_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecStats) ProtoMessage() {}

func (x *CodecStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecStats.ProtoReflect.Descriptor instead.
func (*CodecStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{2}
}

func (x *CodecStats) GetPayloadType() uint32 {
	if x != nil {
		return x.PayloadType
	}
	return 0
}

func (x *CodecStats) GetTransportId() string {
	if x != nil {
		return x.TransportId
	}
	return ""
}

func (x *CodecStats) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *CodecStats) GetClockRate() uint32 {
	if x != nil {
		return x.ClockRate
	}
	return 0
}

func (x *CodecStats) GetChannels() uint32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *CodecStats) GetSdpFmtpLine() string {
	if x != nil {
		return x.SdpFmtpLine
	}
	return ""
}

type RtpStreamStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ssrc          uint32                 `protobuf:"varint,1,opt,name=ssrc,proto3" json:"ssrc"`
	Kind          string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind"`
	TransportId   string                 `protobuf:"bytes,3,opt,name=transport_id,json=transportId,proto3" json:"transport_id"`
	CodecId       string                 `protobuf:"bytes,4,opt,name=codec_id,json=codecId,proto3" json:"codec_id"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtpStreamStats) Reset() {
	*x = RtpStreamStats{}
	mi := &file_stats_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtpStreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtpStreamStats) ProtoMessage() {}

func (x *RtpStreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtpStreamStats.ProtoReflect.Descriptor instead.
func (*RtpStreamStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{3}
}

func (x *RtpStreamStats) GetSsrc() uint32 {
	if x != nil {
		return x.Ssrc
	}
	return 0
}

func (x *RtpStreamStats) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RtpStreamStats) GetTransportId() string {
	if x != nil {
		return x.TransportId
	}
	return ""
}

func (x *RtpStreamStats) GetCodecId() string {
	if x != nil {
		return x.CodecId
	}
	return ""
}

type ReceivedRtpStreamStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PacketsReceived uint64                 `protobuf:"varint,1,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received"`
	PacketsLost     int64                  `protobuf:"varint,2,opt,name=packets_lost,json=packetsLost,proto3" json:"packets_lost"`
	Jitter          float64                `protobuf:"fixed64,3,opt,name=jitter,proto3" json:"jitter"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReceivedRtpStreamStats) Reset() {
	*x = ReceivedRtpStreamStats{}
	mi := &file_stats_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceivedRtpStreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedRtpStreamStats) ProtoMessage() {}

func (x *ReceivedRtpStreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedRtpStreamStats.ProtoReflect.Descriptor instead.
func (*ReceivedRtpStreamStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{4}
}

func (x *ReceivedRtpStreamStats) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *ReceivedRtpStreamStats) GetPacketsLost() int64 {
	if x != nil {
		return x.PacketsLost
	}
	return 0
}

func (x *ReceivedRtpStreamStats) GetJitter() float64 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

type InboundRtpStreamStats struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	TrackIdentifier                    string                 `protobuf:"bytes,1,opt,name=track_identifier,json=trackIdentifier,proto3" json:"track_identifier"`
	Mid                                string                 `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid"`
	RemoteId                           string                 `protobuf:"bytes,3,opt,name=remote_id,json=remoteId,proto3" json:"remote_id"`
	FramesDecoded                      uint32                 `protobuf:"varint,4,opt,name=frames_decoded,json=framesDecoded,proto3" json:"frames_decoded"`
	KeyFramesDecoded                   uint32                 `protobuf:"varint,5,opt,name=key_frames_decoded,json=keyFramesDecoded,proto3" json:"key_frames_decoded"`
	FramesRendered                     uint32                 `protobuf:"varint,6,opt,name=frames_rendered,json=framesRendered,proto3" json:"frames_rendered"`
	FramesDropped                      uint32                 `protobuf:"varint,7,opt,name=frames_dropped,json=framesDropped,proto3" json:"frames_dropped"`
	FrameWidth                         uint32                 `protobuf:"varint,8,opt,name=frame_width,json=frameWidth,proto3" json:"frame_width"`
	FrameHeight                        uint32                 `protobuf:"varint,9,opt,name=frame_height,json=frameHeight,proto3" json:"frame_height"`
	FramesPerSecond                    float64                `protobuf:"fixed64,10,opt,name=frames_per_second,json=framesPerSecond,proto3" json:"frames_per_second"`
	QpSum                              uint64                 `protobuf:"varint,11,opt,name=qp_sum,json=qpSum,proto3" json:"qp_sum"`
	TotalDecodeTime                    float64                `protobuf:"fixed64,12,opt,name=total_decode_time,json=totalDecodeTime,proto3" json:"total_decode_time"`
	TotalInterFrameDelay               float64                `protobuf:"fixed64,13,opt,name=total_inter_frame_delay,json=totalInterFrameDelay,proto3" json:"total_inter_frame_delay"`
	TotalSquaredInterFrameDelay        float64                `protobuf:"fixed64,14,opt,name=total_squared_inter_frame_delay,json=totalSquaredInterFrameDelay,proto3" json:"total_squared_inter_frame_delay"`
	PauseCount                         uint32                 `protobuf:"varint,15,opt,name=pause_count,json=pauseCount,proto3" json:"pause_count"`
	TotalPauseDuration                 float64                `protobuf:"fixed64,16,opt,name=total_pause_duration,json=totalPauseDuration,proto3" json:"total_pause_duration"`
	FreezeCount                        uint32                 `protobuf:"varint,17,opt,name=freeze_count,json=freezeCount,proto3" json:"freeze_count"`
	TotalFreezeDuration                float64                `protobuf:"fixed64,18,opt,name=total_freeze_duration,json=totalFreezeDuration,proto3" json:"total_freeze_duration"`
	LastPacketReceivedTimestamp        float64                `protobuf:"fixed64,19,opt,name=last_packet_received_timestamp,json=lastPacketReceivedTimestamp,proto3" json:"last_packet_received_timestamp"`
	HeaderBytesReceived                uint64                 `protobuf:"varint,20,opt,name=header_bytes_received,json=headerBytesReceived,proto3" json:"header_bytes_received"`
	PacketsDiscarded                   uint64                 `protobuf:"varint,21,opt,name=packets_discarded,json=packetsDiscarded,proto3" json:"packets_discarded"`
	FecBytesReceived                   uint64                 `protobuf:"varint,22,opt,name=fec_bytes_received,json=fecBytesReceived,proto3" json:"fec_bytes_received"`
	FecPacketsReceived                 uint64                 `protobuf:"varint,23,opt,name=fec_packets_received,json=fecPacketsReceived,proto3" json:"fec_packets_received"`
	FecPacketsDiscarded                uint64                 `protobuf:"varint,24,opt,name=fec_packets_discarded,json=fecPacketsDiscarded,proto3" json:"fec_packets_discarded"`
	BytesReceived                      uint64                 `protobuf:"varint,25,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received"`
	NackCount                          uint32                 `protobuf:"varint,26,opt,name=nack_count,json=nackCount,proto3" json:"nack_count"`
	FirCount                           uint32                 `protobuf:"varint,27,opt,name=fir_count,json=firCount,proto3" json:"fir_count"`
	PliCount                           uint32                 `protobuf:"varint,28,opt,name=pli_count,json=pliCount,proto3" json:"pli_count"`
	TotalProcessingDelay               float64                `protobuf:"fixed64,29,opt,name=total_processing_delay,json=totalProcessingDelay,proto3" json:"total_processing_delay"`
	EstimatedPlayoutTimestamp          float64                `protobuf:"fixed64,30,opt,name=estimated_playout_timestamp,json=estimatedPlayoutTimestamp,proto3" json:"estimated_playout_timestamp"`
	JitterBufferDelay                  float64                `protobuf:"fixed64,31,opt,name=jitter_buffer_delay,json=jitterBufferDelay,proto3" json:"jitter_buffer_delay"`
	JitterBufferTargetDelay            float64                `protobuf:"fixed64,32,opt,name=jitter_buffer_target_delay,json=jitterBufferTargetDelay,proto3" json:"jitter_buffer_target_delay"`
	JitterBufferEmittedCount           uint64                 `protobuf:"varint,33,opt,name=jitter_buffer_emitted_count,json=jitterBufferEmittedCount,proto3" json:"jitter_buffer_emitted_count"`
	JitterBufferMinimumDelay           float64                `protobuf:"fixed64,34,opt,name=jitter_buffer_minimum_delay,json=jitterBufferMinimumDelay,proto3" json:"jitter_buffer_minimum_delay"`
	TotalSamplesReceived               uint64                 `protobuf:"varint,35,opt,name=total_samples_received,json=totalSamplesReceived,proto3" json:"total_samples_received"`
	ConcealedSamples                   uint64                 `protobuf:"varint,36,opt,name=concealed_samples,json=concealedSamples,proto3" json:"concealed_samples"`
	SilentConcealedSamples             uint64                 `protobuf:"varint,37,opt,name=silent_concealed_samples,json=silentConcealedSamples,proto3" json:"silent_concealed_samples"`
	ConcealmentEvents                  uint64                 `protobuf:"varint,38,opt,name=concealment_events,json=concealmentEvents,proto3" json:"concealment_events"`
	InsertedSamplesForDeceleration     uint64                 `protobuf:"varint,39,opt,name=inserted_samples_for_deceleration,json=insertedSamplesForDeceleration,proto3" json:"inserted_samples_for_deceleration"`
	RemovedSamplesForAcceleration      uint64                 `protobuf:"varint,40,opt,name=removed_samples_for_acceleration,json=removedSamplesForAcceleration,proto3" json:"removed_samples_for_acceleration"`
	AudioLevel                         float64                `protobuf:"fixed64,41,opt,name=audio_level,json=audioLevel,proto3" json:"audio_level"`
	TotalAudioEnergy                   float64                `protobuf:"fixed64,42,opt,name=total_audio_energy,json=totalAudioEnergy,proto3" json:"total_audio_energy"`
	TotalSamplesDuration               float64                `protobuf:"fixed64,43,opt,name=total_samples_duration,json=totalSamplesDuration,proto3" json:"total_samples_duration"`
	FramesReceived                     uint64                 `protobuf:"varint,44,opt,name=frames_received,json=framesReceived,proto3" json:"frames_received"`
	DecoderImplementation              string                 `protobuf:"bytes,45,opt,name=decoder_implementation,json=decoderImplementation,proto3" json:"decoder_implementation"`
	PlayoutId                          string                 `protobuf:"bytes,46,opt,name=playout_id,json=playoutId,proto3" json:"playout_id"`
	PowerEfficientDecoder              bool                   `protobuf:"varint,47,opt,name=power_efficient_decoder,json=powerEfficientDecoder,proto3" json:"power_efficient_decoder"`
	FramesAssembledFromMultiplePackets uint64                 `protobuf:"varint,48,opt,name=frames_assembled_from_multiple_packets,json=framesAssembledFromMultiplePackets,proto3" json:"frames_assembled_from_multiple_packets"`
	TotalAssemblyTime                  float64                `protobuf:"fixed64,49,opt,name=total_assembly_time,json=totalAssemblyTime,proto3" json:"total_assembly_time"`
	RetransmittedPacketsReceived       uint64                 `protobuf:"varint,50,opt,name=retransmitted_packets_received,json=retransmittedPacketsReceived,proto3" json:"retransmitted_packets_received"`
	RetransmittedBytesReceived         uint64                 `protobuf:"varint,51,opt,name=retransmitted_bytes_received,json=retransmittedBytesReceived,proto3" json:"retransmitted_bytes_received"`
	RtxSsrc                            uint32                 `protobuf:"varint,52,opt,name=rtx_ssrc,json=rtxSsrc,proto3" json:"rtx_ssrc"`
	FecSsrc                            uint32                 `protobuf:"varint,53,opt,name=fec_ssrc,json=fecSsrc,proto3" json:"fec_ssrc"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *InboundRtpStreamStats) Reset() {
	*x = InboundRtpStreamStats{}
	mi := &file_stats_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InboundRtpStreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundRtpStreamStats) ProtoMessage() {}

func (x *InboundRtpStreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundRtpStreamStats.ProtoReflect.Descriptor instead.
func (*InboundRtpStreamStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{5}
}

func (x *InboundRtpStreamStats) GetTrackIdentifier() string {
	if x != nil {
		return x.TrackIdentifier
	}
	return ""
}

func (x *InboundRtpStreamStats) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *InboundRtpStreamStats) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *InboundRtpStreamStats) GetFramesDecoded() uint32 {
	if x != nil {
		return x.FramesDecoded
	}
	return 0
}

func (x *InboundRtpStreamStats) GetKeyFramesDecoded() uint32 {
	if x != nil {
		return x.KeyFramesDecoded
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFramesRendered() uint32 {
	if x != nil {
		return x.FramesRendered
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFramesDropped() uint32 {
	if x != nil {
		return x.FramesDropped
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFrameWidth() uint32 {
	if x != nil {
		return x.FrameWidth
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFrameHeight() uint32 {
	if x != nil {
		return x.FrameHeight
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFramesPerSecond() float64 {
	if x != nil {
		return x.FramesPerSecond
	}
	return 0
}

func (x *InboundRtpStreamStats) GetQpSum() uint64 {
	if x != nil {
		return x.QpSum
	}
	return 0
}

func (x *InboundRtpStreamStats) GetTotalDecodeTime() float64 {
	if x != nil {
		return x.TotalDecodeTime
	}
	return 0
}

func (x *InboundRtpStreamStats) GetTotalInterFrameDelay() float64 {
	if x != nil {
		return x.TotalInterFrameDelay
	}
	return 0
}

func (x *InboundRtpStreamStats) GetTotalSquaredInterFrameDelay() float64 {
	if x != nil {
		return x.TotalSquaredInterFrameDelay
	}
	return 0
}

func (x *InboundRtpStreamStats) GetPauseCount() uint32 {
	if x != nil {
		return x.PauseCount
	}
	return 0
}

func (x *InboundRtpStreamStats) GetTotalPauseDuration() float64 {
	if x != nil {
		return x.TotalPauseDuration
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFreezeCount() uint32 {
	if x != nil {
		return x.FreezeCount
	}
	return 0
}

func (x *InboundRtpStreamStats) GetTotalFreezeDuration() float64 {
	if x != nil {
		return x.TotalFreezeDuration
	}
	return 0
}

func (x *InboundRtpStreamStats) GetLastPacketReceivedTimestamp() float64 {
	if x != nil {
		return x.LastPacketReceivedTimestamp
	}
	return 0
}

func (x *InboundRtpStreamStats) GetHeaderBytesReceived() uint64 {
	if x != nil {
		return x.HeaderBytesReceived
	}
	return 0
}

func (x *InboundRtpStreamStats) GetPacketsDiscarded() uint64 {
	if x != nil {
		return x.PacketsDiscarded
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFecBytesReceived() uint64 {
	if x != nil {
		return x.FecBytesReceived
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFecPacketsReceived() uint64 {
	if x != nil {
		return x.FecPacketsReceived
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFecPacketsDiscarded() uint64 {
	if x != nil {
		return x.FecPacketsDiscarded
	}
	return 0
}

func (x *InboundRtpStreamStats) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *InboundRtpStreamStats) GetNackCount() uint32 {
	if x != nil {
		return x.NackCount
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFirCount() uint32 {
	if x != nil {
		return x.FirCount
	}
	return 0
}

func (x *InboundRtpStreamStats) GetPliCount() uint32 {
	if x != nil {
		return x.PliCount
	}
	return 0
}

func (x *InboundRtpStreamStats) GetTotalProcessingDelay() float64 {
	if x != nil {
		return x.TotalProcessingDelay
	}
	return 0
}

func (x *InboundRtpStreamStats) GetEstimatedPlayoutTimestamp() float64 {
	if x != nil {
		return x.EstimatedPlayoutTimestamp
	}
	return 0
}

func (x *InboundRtpStreamStats) GetJitterBufferDelay() float64 {
	if x != nil {
		return x.JitterBufferDelay
	}
	return 0
}

func (x *InboundRtpStreamStats) GetJitterBufferTargetDelay() float64 {
	if x != nil {
		return x.JitterBufferTargetDelay
	}
	return 0
}

func (x *InboundRtpStreamStats) GetJitterBufferEmittedCount() uint64 {
	if x != nil {
		return x.JitterBufferEmittedCount
	}
	return 0
}

func (x *InboundRtpStreamStats) GetJitterBufferMinimumDelay() float64 {
	if x != nil {
		return x.JitterBufferMinimumDelay
	}
	return 0
}

func (x *InboundRtpStreamStats) GetTotalSamplesReceived() uint64 {
	if x != nil {
		return x.TotalSamplesReceived
	}
	return 0
}

func (x *InboundRtpStreamStats) GetConcealedSamples() uint64 {
	if x != nil {
		return x.ConcealedSamples
	}
	return 0
}

func (x *InboundRtpStreamStats) GetSilentConcealedSamples() uint64 {
	if x != nil {
		return x.SilentConcealedSamples
	}
	return 0
}

func (x *InboundRtpStreamStats) GetConcealmentEvents() uint64 {
	if x != nil {
		return x.ConcealmentEvents
	}
	return 0
}

func (x *InboundRtpStreamStats) GetInsertedSamplesForDeceleration() uint64 {
	if x != nil {
		return x.InsertedSamplesForDeceleration
	}
	return 0
}

func (x *InboundRtpStreamStats) GetRemovedSamplesForAcceleration() uint64 {
	if x != nil {
		return x.RemovedSamplesForAcceleration
	}
	return 0
}

func (x *InboundRtpStreamStats) GetAudioLevel() float64 {
	if x != nil {
		return x.AudioLevel
	}
	return 0
}

func (x *InboundRtpStreamStats) GetTotalAudioEnergy() float64 {
	if x != nil {
		return x.TotalAudioEnergy
	}
	return 0
}

func (x *InboundRtpStreamStats) GetTotalSamplesDuration() float64 {
	if x != nil {
		return x.TotalSamplesDuration
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFramesReceived() uint64 {
	if x != nil {
		return x.FramesReceived
	}
	return 0
}

func (x *InboundRtpStreamStats) GetDecoderImplementation() string {
	if x != nil {
		return x.DecoderImplementation
	}
	return ""
}

func (x *InboundRtpStreamStats) GetPlayoutId() string {
	if x != nil {
		return x.PlayoutId
	}
	return ""
}

func (x *InboundRtpStreamStats) GetPowerEfficientDecoder() bool {
	if x != nil {
		return x.PowerEfficientDecoder
	}
	return false
}

func (x *InboundRtpStreamStats) GetFramesAssembledFromMultiplePackets() uint64 {
	if x != nil {
		return x.FramesAssembledFromMultiplePackets
	}
	return 0
}

func (x *InboundRtpStreamStats) GetTotalAssemblyTime() float64 {
	if x != nil {
		return x.TotalAssemblyTime
	}
	return 0
}

func (x *InboundRtpStreamStats) GetRetransmittedPacketsReceived() uint64 {
	if x != nil {
		return x.RetransmittedPacketsReceived
	}
	return 0
}

func (x *InboundRtpStreamStats) GetRetransmittedBytesReceived() uint64 {
	if x != nil {
		return x.RetransmittedBytesReceived
	}
	return 0
}

func (x *InboundRtpStreamStats) GetRtxSsrc() uint32 {
	if x != nil {
		return x.RtxSsrc
	}
	return 0
}

func (x *InboundRtpStreamStats) GetFecSsrc() uint32 {
	if x != nil {
		return x.FecSsrc
	}
	return 0
}

type SentRtpStreamStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PacketsSent   uint64                 `protobuf:"varint,1,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent"`
	BytesSent     uint64                 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SentRtpStreamStats) Reset() {
	*x = SentRtpStreamStats{}
	mi := &file_stats_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentRtpStreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentRtpStreamStats) ProtoMessage() {}

func (x *SentRtpStreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentRtpStreamStats.ProtoReflect.Descriptor instead.
func (*SentRtpStreamStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{6}
}

func (x *SentRtpStreamStats) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *SentRtpStreamStats) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

type OutboundRtpStreamStats struct {
	state                              protoimpl.MessageState  `protogen:"open.v1"`
	Mid                                string                  `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid"`
	MediaSourceId                      string                  `protobuf:"bytes,2,opt,name=media_source_id,json=mediaSourceId,proto3" json:"media_source_id"`
	RemoteId                           string                  `protobuf:"bytes,3,opt,name=remote_id,json=remoteId,proto3" json:"remote_id"`
	Rid                                string                  `protobuf:"bytes,4,opt,name=rid,proto3" json:"rid"`
	HeaderBytesSent                    uint64                  `protobuf:"varint,5,opt,name=header_bytes_sent,json=headerBytesSent,proto3" json:"header_bytes_sent"`
	RetransmittedPacketsSent           uint64                  `protobuf:"varint,6,opt,name=retransmitted_packets_sent,json=retransmittedPacketsSent,proto3" json:"retransmitted_packets_sent"`
	RetransmittedBytesSent             uint64                  `protobuf:"varint,7,opt,name=retransmitted_bytes_sent,json=retransmittedBytesSent,proto3" json:"retransmitted_bytes_sent"`
	RtxSsrc                            uint32                  `protobuf:"varint,8,opt,name=rtx_ssrc,json=rtxSsrc,proto3" json:"rtx_ssrc"`
	TargetBitrate                      float64                 `protobuf:"fixed64,9,opt,name=target_bitrate,json=targetBitrate,proto3" json:"target_bitrate"`
	TotalEncodedBytesTarget            uint64                  `protobuf:"varint,10,opt,name=total_encoded_bytes_target,json=totalEncodedBytesTarget,proto3" json:"total_encoded_bytes_target"`
	FrameWidth                         uint32                  `protobuf:"varint,11,opt,name=frame_width,json=frameWidth,proto3" json:"frame_width"`
	FrameHeight                        uint32                  `protobuf:"varint,12,opt,name=frame_height,json=frameHeight,proto3" json:"frame_height"`
	FramesPerSecond                    float64                 `protobuf:"fixed64,13,opt,name=frames_per_second,json=framesPerSecond,proto3" json:"frames_per_second"`
	FramesSent                         uint32                  `protobuf:"varint,14,opt,name=frames_sent,json=framesSent,proto3" json:"frames_sent"`
	HugeFramesSent                     uint32                  `protobuf:"varint,15,opt,name=huge_frames_sent,json=hugeFramesSent,proto3" json:"huge_frames_sent"`
	FramesEncoded                      uint32                  `protobuf:"varint,16,opt,name=frames_encoded,json=framesEncoded,proto3" json:"frames_encoded"`
	KeyFramesEncoded                   uint32                  `protobuf:"varint,17,opt,name=key_frames_encoded,json=keyFramesEncoded,proto3" json:"key_frames_encoded"`
	QpSum                              uint64                  `protobuf:"varint,18,opt,name=qp_sum,json=qpSum,proto3" json:"qp_sum"`
	TotalEncodeTime                    float64                 `protobuf:"fixed64,19,opt,name=total_encode_time,json=totalEncodeTime,proto3" json:"total_encode_time"`
	TotalPacketSendDelay               float64                 `protobuf:"fixed64,20,opt,name=total_packet_send_delay,json=totalPacketSendDelay,proto3" json:"total_packet_send_delay"`
	QualityLimitationReason            QualityLimitationReason `protobuf:"varint,21,opt,name=quality_limitation_reason,json=qualityLimitationReason,proto3,enum=livekit.proto.QualityLimitationReason" json:"quality_limitation_reason"`
	QualityLimitationDurations         map[string]float64      `protobuf:"bytes,22,rep,name=quality_limitation_durations,json=qualityLimitationDurations,proto3" json:"quality_limitation_durations" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	QualityLimitationResolutionChanges uint32                  `protobuf:"varint,23,opt,name=quality_limitation_resolution_changes,json=qualityLimitationResolutionChanges,proto3" json:"quality_limitation_resolution_changes"`
	NackCount                          uint32                  `protobuf:"varint,24,opt,name=nack_count,json=nackCount,proto3" json:"nack_count"`
	FirCount                           uint32                  `protobuf:"varint,25,opt,name=fir_count,json=firCount,proto3" json:"fir_count"`
	PliCount                           uint32                  `protobuf:"varint,26,opt,name=pli_count,json=pliCount,proto3" json:"pli_count"`
	EncoderImplementation              string                  `protobuf:"bytes,27,opt,name=encoder_implementation,json=encoderImplementation,proto3" json:"encoder_implementation"`
	PowerEfficientEncoder              bool                    `protobuf:"varint,28,opt,name=power_efficient_encoder,json=powerEfficientEncoder,proto3" json:"power_efficient_encoder"`
	Active                             bool                    `protobuf:"varint,29,opt,name=active,proto3" json:"active"`
	ScalibilityMode                    string                  `protobuf:"bytes,30,opt,name=scalibility_mode,json=scalibilityMode,proto3" json:"scalibility_mode"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *OutboundRtpStreamStats) Reset() {
	*x = OutboundRtpStreamStats{}
	mi := &file_stats_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutboundRtpStreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundRtpStreamStats) ProtoMessage() {}

func (x *OutboundRtpStreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundRtpStreamStats.ProtoReflect.Descriptor instead.
func (*OutboundRtpStreamStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{7}
}

func (x *OutboundRtpStreamStats) GetMid() string {
	if x != nil {
		return x.Mid
	}
	return ""
}

func (x *OutboundRtpStreamStats) GetMediaSourceId() string {
	if x != nil {
		return x.MediaSourceId
	}
	return ""
}

func (x *OutboundRtpStreamStats) GetRemoteId() string {
	if x != nil {
		return x.RemoteId
	}
	return ""
}

func (x *OutboundRtpStreamStats) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *OutboundRtpStreamStats) GetHeaderBytesSent() uint64 {
	if x != nil {
		return x.HeaderBytesSent
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetRetransmittedPacketsSent() uint64 {
	if x != nil {
		return x.RetransmittedPacketsSent
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetRetransmittedBytesSent() uint64 {
	if x != nil {
		return x.RetransmittedBytesSent
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetRtxSsrc() uint32 {
	if x != nil {
		return x.RtxSsrc
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetTargetBitrate() float64 {
	if x != nil {
		return x.TargetBitrate
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetTotalEncodedBytesTarget() uint64 {
	if x != nil {
		return x.TotalEncodedBytesTarget
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetFrameWidth() uint32 {
	if x != nil {
		return x.FrameWidth
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetFrameHeight() uint32 {
	if x != nil {
		return x.FrameHeight
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetFramesPerSecond() float64 {
	if x != nil {
		return x.FramesPerSecond
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetFramesSent() uint32 {
	if x != nil {
		return x.FramesSent
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetHugeFramesSent() uint32 {
	if x != nil {
		return x.HugeFramesSent
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetFramesEncoded() uint32 {
	if x != nil {
		return x.FramesEncoded
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetKeyFramesEncoded() uint32 {
	if x != nil {
		return x.KeyFramesEncoded
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetQpSum() uint64 {
	if x != nil {
		return x.QpSum
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetTotalEncodeTime() float64 {
	if x != nil {
		return x.TotalEncodeTime
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetTotalPacketSendDelay() float64 {
	if x != nil {
		return x.TotalPacketSendDelay
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetQualityLimitationReason() QualityLimitationReason {
	if x != nil {
		return x.QualityLimitationReason
	}
	return QualityLimitationReason_LIMITATION_NONE
}

func (x *OutboundRtpStreamStats) GetQualityLimitationDurations() map[string]float64 {
	if x != nil {
		return x.QualityLimitationDurations
	}
	return nil
}

func (x *OutboundRtpStreamStats) GetQualityLimitationResolutionChanges() uint32 {
	if x != nil {
		return x.QualityLimitationResolutionChanges
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetNackCount() uint32 {
	if x != nil {
		return x.NackCount
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetFirCount() uint32 {
	if x != nil {
		return x.FirCount
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetPliCount() uint32 {
	if x != nil {
		return x.PliCount
	}
	return 0
}

func (x *OutboundRtpStreamStats) GetEncoderImplementation() string {
	if x != nil {
		return x.EncoderImplementation
	}
	return ""
}

func (x *OutboundRtpStreamStats) GetPowerEfficientEncoder() bool {
	if x != nil {
		return x.PowerEfficientEncoder
	}
	return false
}

func (x *OutboundRtpStreamStats) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *OutboundRtpStreamStats) GetScalibilityMode() string {
	if x != nil {
		return x.ScalibilityMode
	}
	return ""
}

type RemoteInboundRtpStreamStats struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	LocalId                   string                 `protobuf:"bytes,1,opt,name=local_id,json=localId,proto3" json:"local_id"`
	RoundTripTime             float64                `protobuf:"fixed64,2,opt,name=round_trip_time,json=roundTripTime,proto3" json:"round_trip_time"`
	TotalRoundTripTime        float64                `protobuf:"fixed64,3,opt,name=total_round_trip_time,json=totalRoundTripTime,proto3" json:"total_round_trip_time"`
	FractionLost              float64                `protobuf:"fixed64,4,opt,name=fraction_lost,json=fractionLost,proto3" json:"fraction_lost"`
	RoundTripTimeMeasurements uint64                 `protobuf:"varint,5,opt,name=round_trip_time_measurements,json=roundTripTimeMeasurements,proto3" json:"round_trip_time_measurements"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *RemoteInboundRtpStreamStats) Reset() {
	*x = RemoteInboundRtpStreamStats{}
	mi := &file_stats_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteInboundRtpStreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteInboundRtpStreamStats) ProtoMessage() {}

func (x *RemoteInboundRtpStreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteInboundRtpStreamStats.ProtoReflect.Descriptor instead.
func (*RemoteInboundRtpStreamStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{8}
}

func (x *RemoteInboundRtpStreamStats) GetLocalId() string {
	if x != nil {
		return x.LocalId
	}
	return ""
}

func (x *RemoteInboundRtpStreamStats) GetRoundTripTime() float64 {
	if x != nil {
		return x.RoundTripTime
	}
	return 0
}

func (x *RemoteInboundRtpStreamStats) GetTotalRoundTripTime() float64 {
	if x != nil {
		return x.TotalRoundTripTime
	}
	return 0
}

func (x *RemoteInboundRtpStreamStats) GetFractionLost() float64 {
	if x != nil {
		return x.FractionLost
	}
	return 0
}

func (x *RemoteInboundRtpStreamStats) GetRoundTripTimeMeasurements() uint64 {
	if x != nil {
		return x.RoundTripTimeMeasurements
	}
	return 0
}

type RemoteOutboundRtpStreamStats struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	LocalId                   string                 `protobuf:"bytes,1,opt,name=local_id,json=localId,proto3" json:"local_id"`
	RemoteTimestamp           float64                `protobuf:"fixed64,2,opt,name=remote_timestamp,json=remoteTimestamp,proto3" json:"remote_timestamp"`
	ReportsSent               uint64                 `protobuf:"varint,3,opt,name=reports_sent,json=reportsSent,proto3" json:"reports_sent"`
	RoundTripTime             float64                `protobuf:"fixed64,4,opt,name=round_trip_time,json=roundTripTime,proto3" json:"round_trip_time"`
	TotalRoundTripTime        float64                `protobuf:"fixed64,5,opt,name=total_round_trip_time,json=totalRoundTripTime,proto3" json:"total_round_trip_time"`
	RoundTripTimeMeasurements uint64                 `protobuf:"varint,6,opt,name=round_trip_time_measurements,json=roundTripTimeMeasurements,proto3" json:"round_trip_time_measurements"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *RemoteOutboundRtpStreamStats) Reset() {
	*x = RemoteOutboundRtpStreamStats{}
	mi := &file_stats_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteOutboundRtpStreamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteOutboundRtpStreamStats) ProtoMessage() {}

func (x *RemoteOutboundRtpStreamStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteOutboundRtpStreamStats.ProtoReflect.Descriptor instead.
func (*RemoteOutboundRtpStreamStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{9}
}

func (x *RemoteOutboundRtpStreamStats) GetLocalId() string {
	if x != nil {
		return x.LocalId
	}
	return ""
}

func (x *RemoteOutboundRtpStreamStats) GetRemoteTimestamp() float64 {
	if x != nil {
		return x.RemoteTimestamp
	}
	return 0
}

func (x *RemoteOutboundRtpStreamStats) GetReportsSent() uint64 {
	if x != nil {
		return x.ReportsSent
	}
	return 0
}

func (x *RemoteOutboundRtpStreamStats) GetRoundTripTime() float64 {
	if x != nil {
		return x.RoundTripTime
	}
	return 0
}

func (x *RemoteOutboundRtpStreamStats) GetTotalRoundTripTime() float64 {
	if x != nil {
		return x.TotalRoundTripTime
	}
	return 0
}

func (x *RemoteOutboundRtpStreamStats) GetRoundTripTimeMeasurements() uint64 {
	if x != nil {
		return x.RoundTripTimeMeasurements
	}
	return 0
}

type MediaSourceStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TrackIdentifier string                 `protobuf:"bytes,1,opt,name=track_identifier,json=trackIdentifier,proto3" json:"track_identifier"`
	Kind            string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MediaSourceStats) Reset() {
	*x = MediaSourceStats{}
	mi := &file_stats_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaSourceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaSourceStats) ProtoMessage() {}

func (x *MediaSourceStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaSourceStats.ProtoReflect.Descriptor instead.
func (*MediaSourceStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{10}
}

func (x *MediaSourceStats) GetTrackIdentifier() string {
	if x != nil {
		return x.TrackIdentifier
	}
	return ""
}

func (x *MediaSourceStats) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type AudioSourceStats struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	AudioLevel                float64                `protobuf:"fixed64,1,opt,name=audio_level,json=audioLevel,proto3" json:"audio_level"`
	TotalAudioEnergy          float64                `protobuf:"fixed64,2,opt,name=total_audio_energy,json=totalAudioEnergy,proto3" json:"total_audio_energy"`
	TotalSamplesDuration      float64                `protobuf:"fixed64,3,opt,name=total_samples_duration,json=totalSamplesDuration,proto3" json:"total_samples_duration"`
	EchoReturnLoss            float64                `protobuf:"fixed64,4,opt,name=echo_return_loss,json=echoReturnLoss,proto3" json:"echo_return_loss"`
	EchoReturnLossEnhancement float64                `protobuf:"fixed64,5,opt,name=echo_return_loss_enhancement,json=echoReturnLossEnhancement,proto3" json:"echo_return_loss_enhancement"`
	DroppedSamplesDuration    float64                `protobuf:"fixed64,6,opt,name=dropped_samples_duration,json=droppedSamplesDuration,proto3" json:"dropped_samples_duration"`
	DroppedSamplesEvents      uint32                 `protobuf:"varint,7,opt,name=dropped_samples_events,json=droppedSamplesEvents,proto3" json:"dropped_samples_events"`
	TotalCaptureDelay         float64                `protobuf:"fixed64,8,opt,name=total_capture_delay,json=totalCaptureDelay,proto3" json:"total_capture_delay"`
	TotalSamplesCaptured      uint64                 `protobuf:"varint,9,opt,name=total_samples_captured,json=totalSamplesCaptured,proto3" json:"total_samples_captured"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *AudioSourceStats) Reset() {
	*x = AudioSourceStats{}
	mi := &file_stats_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioSourceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSourceStats) ProtoMessage() {}

func (x *AudioSourceStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSourceStats.ProtoReflect.Descriptor instead.
func (*AudioSourceStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{11}
}

func (x *AudioSourceStats) GetAudioLevel() float64 {
	if x != nil {
		return x.AudioLevel
	}
	return 0
}

func (x *AudioSourceStats) GetTotalAudioEnergy() float64 {
	if x != nil {
		return x.TotalAudioEnergy
	}
	return 0
}

func (x *AudioSourceStats) GetTotalSamplesDuration() float64 {
	if x != nil {
		return x.TotalSamplesDuration
	}
	return 0
}

func (x *AudioSourceStats) GetEchoReturnLoss() float64 {
	if x != nil {
		return x.EchoReturnLoss
	}
	return 0
}

func (x *AudioSourceStats) GetEchoReturnLossEnhancement() float64 {
	if x != nil {
		return x.EchoReturnLossEnhancement
	}
	return 0
}

func (x *AudioSourceStats) GetDroppedSamplesDuration() float64 {
	if x != nil {
		return x.DroppedSamplesDuration
	}
	return 0
}

func (x *AudioSourceStats) GetDroppedSamplesEvents() uint32 {
	if x != nil {
		return x.DroppedSamplesEvents
	}
	return 0
}

func (x *AudioSourceStats) GetTotalCaptureDelay() float64 {
	if x != nil {
		return x.TotalCaptureDelay
	}
	return 0
}

func (x *AudioSourceStats) GetTotalSamplesCaptured() uint64 {
	if x != nil {
		return x.TotalSamplesCaptured
	}
	return 0
}

type VideoSourceStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Width           uint32                 `protobuf:"varint,1,opt,name=width,proto3" json:"width"`
	Height          uint32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height"`
	Frames          uint32                 `protobuf:"varint,3,opt,name=frames,proto3" json:"frames"`
	FramesPerSecond float64                `protobuf:"fixed64,4,opt,name=frames_per_second,json=framesPerSecond,proto3" json:"frames_per_second"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VideoSourceStats) Reset() {
	*x = VideoSourceStats{}
	mi := &file_stats_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoSourceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSourceStats) ProtoMessage() {}

func (x *VideoSourceStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSourceStats.ProtoReflect.Descriptor instead.
func (*VideoSourceStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{12}
}

func (x *VideoSourceStats) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoSourceStats) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoSourceStats) GetFrames() uint32 {
	if x != nil {
		return x.Frames
	}
	return 0
}

func (x *VideoSourceStats) GetFramesPerSecond() float64 {
	if x != nil {
		return x.FramesPerSecond
	}
	return 0
}

type AudioPlayoutStats struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Kind                       string                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind"`
	SynthesizedSamplesDuration float64                `protobuf:"fixed64,2,opt,name=synthesized_samples_duration,json=synthesizedSamplesDuration,proto3" json:"synthesized_samples_duration"`
	SynthesizedSamplesEvents   uint32                 `protobuf:"varint,3,opt,name=synthesized_samples_events,json=synthesizedSamplesEvents,proto3" json:"synthesized_samples_events"`
	TotalSamplesDuration       float64                `protobuf:"fixed64,4,opt,name=total_samples_duration,json=totalSamplesDuration,proto3" json:"total_samples_duration"`
	TotalPlayoutDelay          float64                `protobuf:"fixed64,5,opt,name=total_playout_delay,json=totalPlayoutDelay,proto3" json:"total_playout_delay"`
	TotalSamplesCount          uint64                 `protobuf:"varint,6,opt,name=total_samples_count,json=totalSamplesCount,proto3" json:"total_samples_count"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *AudioPlayoutStats) Reset() {
	*x = AudioPlayoutStats{}
	mi := &file_stats_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioPlayoutStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioPlayoutStats) ProtoMessage() {}

func (x *AudioPlayoutStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioPlayoutStats.ProtoReflect.Descriptor instead.
func (*AudioPlayoutStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{13}
}

func (x *AudioPlayoutStats) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *AudioPlayoutStats) GetSynthesizedSamplesDuration() float64 {
	if x != nil {
		return x.SynthesizedSamplesDuration
	}
	return 0
}

func (x *AudioPlayoutStats) GetSynthesizedSamplesEvents() uint32 {
	if x != nil {
		return x.SynthesizedSamplesEvents
	}
	return 0
}

func (x *AudioPlayoutStats) GetTotalSamplesDuration() float64 {
	if x != nil {
		return x.TotalSamplesDuration
	}
	return 0
}

func (x *AudioPlayoutStats) GetTotalPlayoutDelay() float64 {
	if x != nil {
		return x.TotalPlayoutDelay
	}
	return 0
}

func (x *AudioPlayoutStats) GetTotalSamplesCount() uint64 {
	if x != nil {
		return x.TotalSamplesCount
	}
	return 0
}

type PeerConnectionStats struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DataChannelsOpened uint32                 `protobuf:"varint,1,opt,name=data_channels_opened,json=dataChannelsOpened,proto3" json:"data_channels_opened"`
	DataChannelsClosed uint32                 `protobuf:"varint,2,opt,name=data_channels_closed,json=dataChannelsClosed,proto3" json:"data_channels_closed"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PeerConnectionStats) Reset() {
	*x = PeerConnectionStats{}
	mi := &file_stats_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerConnectionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerConnectionStats) ProtoMessage() {}

func (x *PeerConnectionStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerConnectionStats.ProtoReflect.Descriptor instead.
func (*PeerConnectionStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{14}
}

func (x *PeerConnectionStats) GetDataChannelsOpened() uint32 {
	if x != nil {
		return x.DataChannelsOpened
	}
	return 0
}

func (x *PeerConnectionStats) GetDataChannelsClosed() uint32 {
	if x != nil {
		return x.DataChannelsClosed
	}
	return 0
}

type DataChannelStats struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Label                 string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label"`
	Protocol              string                 `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol"`
	DataChannelIdentifier int32                  `protobuf:"varint,3,opt,name=data_channel_identifier,json=dataChannelIdentifier,proto3" json:"data_channel_identifier"`
	State                 DataChannelState       `protobuf:"varint,4,opt,name=state,proto3,enum=livekit.proto.DataChannelState" json:"state"`
	MessagesSent          uint32                 `protobuf:"varint,5,opt,name=messages_sent,json=messagesSent,proto3" json:"messages_sent"`
	BytesSent             uint64                 `protobuf:"varint,6,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent"`
	MessagesReceived      uint32                 `protobuf:"varint,7,opt,name=messages_received,json=messagesReceived,proto3" json:"messages_received"`
	BytesReceived         uint64                 `protobuf:"varint,8,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *DataChannelStats) Reset() {
	*x = DataChannelStats{}
	mi := &file_stats_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChannelStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChannelStats) ProtoMessage() {}

func (x *DataChannelStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChannelStats.ProtoReflect.Descriptor instead.
func (*DataChannelStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{15}
}

func (x *DataChannelStats) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DataChannelStats) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *DataChannelStats) GetDataChannelIdentifier() int32 {
	if x != nil {
		return x.DataChannelIdentifier
	}
	return 0
}

func (x *DataChannelStats) GetState() DataChannelState {
	if x != nil {
		return x.State
	}
	return DataChannelState_DC_CONNECTING
}

func (x *DataChannelStats) GetMessagesSent() uint32 {
	if x != nil {
		return x.MessagesSent
	}
	return 0
}

func (x *DataChannelStats) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *DataChannelStats) GetMessagesReceived() uint32 {
	if x != nil {
		return x.MessagesReceived
	}
	return 0
}

func (x *DataChannelStats) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

type TransportStats struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	PacketsSent                  uint64                 `protobuf:"varint,1,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent"`
	PacketsReceived              uint64                 `protobuf:"varint,2,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received"`
	BytesSent                    uint64                 `protobuf:"varint,3,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent"`
	BytesReceived                uint64                 `protobuf:"varint,4,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received"`
	IceRole                      IceRole                `protobuf:"varint,5,opt,name=ice_role,json=iceRole,proto3,enum=livekit.proto.IceRole" json:"ice_role"`
	IceLocalUsernameFragment     string                 `protobuf:"bytes,6,opt,name=ice_local_username_fragment,json=iceLocalUsernameFragment,proto3" json:"ice_local_username_fragment"`
	DtlsState                    DtlsTransportState     `protobuf:"varint,7,opt,name=dtls_state,json=dtlsState,proto3,enum=livekit.proto.DtlsTransportState" json:"dtls_state"`
	IceState                     IceTransportState      `protobuf:"varint,8,opt,name=ice_state,json=iceState,proto3,enum=livekit.proto.IceTransportState" json:"ice_state"`
	SelectedCandidatePairId      string                 `protobuf:"bytes,9,opt,name=selected_candidate_pair_id,json=selectedCandidatePairId,proto3" json:"selected_candidate_pair_id"`
	LocalCertificateId           string                 `protobuf:"bytes,10,opt,name=local_certificate_id,json=localCertificateId,proto3" json:"local_certificate_id"`
	RemoteCertificateId          string                 `protobuf:"bytes,11,opt,name=remote_certificate_id,json=remoteCertificateId,proto3" json:"remote_certificate_id"`
	TlsVersion                   string                 `protobuf:"bytes,12,opt,name=tls_version,json=tlsVersion,proto3" json:"tls_version"`
	DtlsCipher                   string                 `protobuf:"bytes,13,opt,name=dtls_cipher,json=dtlsCipher,proto3" json:"dtls_cipher"`
	DtlsRole                     DtlsRole               `protobuf:"varint,14,opt,name=dtls_role,json=dtlsRole,proto3,enum=livekit.proto.DtlsRole" json:"dtls_role"`
	SrtpCipher                   string                 `protobuf:"bytes,15,opt,name=srtp_cipher,json=srtpCipher,proto3" json:"srtp_cipher"`
	SelectedCandidatePairChanges uint32                 `protobuf:"varint,16,opt,name=selected_candidate_pair_changes,json=selectedCandidatePairChanges,proto3" json:"selected_candidate_pair_changes"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *TransportStats) Reset() {
	*x = TransportStats{}
	mi := &file_stats_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportStats) ProtoMessage() {}

func (x *TransportStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportStats.ProtoReflect.Descriptor instead.
func (*TransportStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{16}
}

func (x *TransportStats) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *TransportStats) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *TransportStats) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *TransportStats) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *TransportStats) GetIceRole() IceRole {
	if x != nil {
		return x.IceRole
	}
	return IceRole_ICE_UNKNOWN
}

func (x *TransportStats) GetIceLocalUsernameFragment() string {
	if x != nil {
		return x.IceLocalUsernameFragment
	}
	return ""
}

func (x *TransportStats) GetDtlsState() DtlsTransportState {
	if x != nil {
		return x.DtlsState
	}
	return DtlsTransportState_DTLS_TRANSPORT_NEW
}

func (x *TransportStats) GetIceState() IceTransportState {
	if x != nil {
		return x.IceState
	}
	return IceTransportState_ICE_TRANSPORT_NEW
}

func (x *TransportStats) GetSelectedCandidatePairId() string {
	if x != nil {
		return x.SelectedCandidatePairId
	}
	return ""
}

func (x *TransportStats) GetLocalCertificateId() string {
	if x != nil {
		return x.LocalCertificateId
	}
	return ""
}

func (x *TransportStats) GetRemoteCertificateId() string {
	if x != nil {
		return x.RemoteCertificateId
	}
	return ""
}

func (x *TransportStats) GetTlsVersion() string {
	if x != nil {
		return x.TlsVersion
	}
	return ""
}

func (x *TransportStats) GetDtlsCipher() string {
	if x != nil {
		return x.DtlsCipher
	}
	return ""
}

func (x *TransportStats) GetDtlsRole() DtlsRole {
	if x != nil {
		return x.DtlsRole
	}
	return DtlsRole_DTLS_CLIENT
}

func (x *TransportStats) GetSrtpCipher() string {
	if x != nil {
		return x.SrtpCipher
	}
	return ""
}

func (x *TransportStats) GetSelectedCandidatePairChanges() uint32 {
	if x != nil {
		return x.SelectedCandidatePairChanges
	}
	return 0
}

type CandidatePairStats struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	TransportId                 string                 `protobuf:"bytes,1,opt,name=transport_id,json=transportId,proto3" json:"transport_id"`
	LocalCandidateId            string                 `protobuf:"bytes,2,opt,name=local_candidate_id,json=localCandidateId,proto3" json:"local_candidate_id"`
	RemoteCandidateId           string                 `protobuf:"bytes,3,opt,name=remote_candidate_id,json=remoteCandidateId,proto3" json:"remote_candidate_id"`
	State                       IceCandidatePairState  `protobuf:"varint,4,opt,name=state,proto3,enum=livekit.proto.IceCandidatePairState" json:"state"`
	Nominated                   bool                   `protobuf:"varint,5,opt,name=nominated,proto3" json:"nominated"`
	PacketsSent                 uint64                 `protobuf:"varint,6,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent"`
	PacketsReceived             uint64                 `protobuf:"varint,7,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received"`
	BytesSent                   uint64                 `protobuf:"varint,8,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent"`
	BytesReceived               uint64                 `protobuf:"varint,9,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received"`
	LastPacketSentTimestamp     float64                `protobuf:"fixed64,10,opt,name=last_packet_sent_timestamp,json=lastPacketSentTimestamp,proto3" json:"last_packet_sent_timestamp"`
	LastPacketReceivedTimestamp float64                `protobuf:"fixed64,11,opt,name=last_packet_received_timestamp,json=lastPacketReceivedTimestamp,proto3" json:"last_packet_received_timestamp"`
	TotalRoundTripTime          float64                `protobuf:"fixed64,12,opt,name=total_round_trip_time,json=totalRoundTripTime,proto3" json:"total_round_trip_time"`
	CurrentRoundTripTime        float64                `protobuf:"fixed64,13,opt,name=current_round_trip_time,json=currentRoundTripTime,proto3" json:"current_round_trip_time"`
	AvailableOutgoingBitrate    float64                `protobuf:"fixed64,14,opt,name=available_outgoing_bitrate,json=availableOutgoingBitrate,proto3" json:"available_outgoing_bitrate"`
	AvailableIncomingBitrate    float64                `protobuf:"fixed64,15,opt,name=available_incoming_bitrate,json=availableIncomingBitrate,proto3" json:"available_incoming_bitrate"`
	RequestsReceived            uint64                 `protobuf:"varint,16,opt,name=requests_received,json=requestsReceived,proto3" json:"requests_received"`
	RequestsSent                uint64                 `protobuf:"varint,17,opt,name=requests_sent,json=requestsSent,proto3" json:"requests_sent"`
	ResponsesReceived           uint64                 `protobuf:"varint,18,opt,name=responses_received,json=responsesReceived,proto3" json:"responses_received"`
	ResponsesSent               uint64                 `protobuf:"varint,19,opt,name=responses_sent,json=responsesSent,proto3" json:"responses_sent"`
	ConsentRequestsSent         uint64                 `protobuf:"varint,20,opt,name=consent_requests_sent,json=consentRequestsSent,proto3" json:"consent_requests_sent"`
	PacketsDiscardedOnSend      uint32                 `protobuf:"varint,21,opt,name=packets_discarded_on_send,json=packetsDiscardedOnSend,proto3" json:"packets_discarded_on_send"`
	BytesDiscardedOnSend        uint64                 `protobuf:"varint,22,opt,name=bytes_discarded_on_send,json=bytesDiscardedOnSend,proto3" json:"bytes_discarded_on_send"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CandidatePairStats) Reset() {
	*x = CandidatePairStats{}
	mi := &file_stats_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CandidatePairStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidatePairStats) ProtoMessage() {}

func (x *CandidatePairStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidatePairStats.ProtoReflect.Descriptor instead.
func (*CandidatePairStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{17}
}

func (x *CandidatePairStats) GetTransportId() string {
	if x != nil {
		return x.TransportId
	}
	return ""
}

func (x *CandidatePairStats) GetLocalCandidateId() string {
	if x != nil {
		return x.LocalCandidateId
	}
	return ""
}

func (x *CandidatePairStats) GetRemoteCandidateId() string {
	if x != nil {
		return x.RemoteCandidateId
	}
	return ""
}

func (x *CandidatePairStats) GetState() IceCandidatePairState {
	if x != nil {
		return x.State
	}
	return IceCandidatePairState_PAIR_FROZEN
}

func (x *CandidatePairStats) GetNominated() bool {
	if x != nil {
		return x.Nominated
	}
	return false
}

func (x *CandidatePairStats) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *CandidatePairStats) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *CandidatePairStats) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *CandidatePairStats) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *CandidatePairStats) GetLastPacketSentTimestamp() float64 {
	if x != nil {
		return x.LastPacketSentTimestamp
	}
	return 0
}

func (x *CandidatePairStats) GetLastPacketReceivedTimestamp() float64 {
	if x != nil {
		return x.LastPacketReceivedTimestamp
	}
	return 0
}

func (x *CandidatePairStats) GetTotalRoundTripTime() float64 {
	if x != nil {
		return x.TotalRoundTripTime
	}
	return 0
}

func (x *CandidatePairStats) GetCurrentRoundTripTime() float64 {
	if x != nil {
		return x.CurrentRoundTripTime
	}
	return 0
}

func (x *CandidatePairStats) GetAvailableOutgoingBitrate() float64 {
	if x != nil {
		return x.AvailableOutgoingBitrate
	}
	return 0
}

func (x *CandidatePairStats) GetAvailableIncomingBitrate() float64 {
	if x != nil {
		return x.AvailableIncomingBitrate
	}
	return 0
}

func (x *CandidatePairStats) GetRequestsReceived() uint64 {
	if x != nil {
		return x.RequestsReceived
	}
	return 0
}

func (x *CandidatePairStats) GetRequestsSent() uint64 {
	if x != nil {
		return x.RequestsSent
	}
	return 0
}

func (x *CandidatePairStats) GetResponsesReceived() uint64 {
	if x != nil {
		return x.ResponsesReceived
	}
	return 0
}

func (x *CandidatePairStats) GetResponsesSent() uint64 {
	if x != nil {
		return x.ResponsesSent
	}
	return 0
}

func (x *CandidatePairStats) GetConsentRequestsSent() uint64 {
	if x != nil {
		return x.ConsentRequestsSent
	}
	return 0
}

func (x *CandidatePairStats) GetPacketsDiscardedOnSend() uint32 {
	if x != nil {
		return x.PacketsDiscardedOnSend
	}
	return 0
}

func (x *CandidatePairStats) GetBytesDiscardedOnSend() uint64 {
	if x != nil {
		return x.BytesDiscardedOnSend
	}
	return 0
}

type IceCandidateStats struct {
	state            protoimpl.MessageState     `protogen:"open.v1"`
	TransportId      string                     `protobuf:"bytes,1,opt,name=transport_id,json=transportId,proto3" json:"transport_id"`
	Address          string                     `protobuf:"bytes,2,opt,name=address,proto3" json:"address"`
	Port             int32                      `protobuf:"varint,3,opt,name=port,proto3" json:"port"`
	Protocol         string                     `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol"`
	CandidateType    IceCandidateType           `protobuf:"varint,5,opt,name=candidate_type,json=candidateType,proto3,enum=livekit.proto.IceCandidateType" json:"candidate_type"`
	Priority         int32                      `protobuf:"varint,6,opt,name=priority,proto3" json:"priority"`
	Url              string                     `protobuf:"bytes,7,opt,name=url,proto3" json:"url"`
	RelayProtocol    IceServerTransportProtocol `protobuf:"varint,8,opt,name=relay_protocol,json=relayProtocol,proto3,enum=livekit.proto.IceServerTransportProtocol" json:"relay_protocol"`
	Foundation       string                     `protobuf:"bytes,9,opt,name=foundation,proto3" json:"foundation"`
	RelatedAddress   string                     `protobuf:"bytes,10,opt,name=related_address,json=relatedAddress,proto3" json:"related_address"`
	RelatedPort      int32                      `protobuf:"varint,11,opt,name=related_port,json=relatedPort,proto3" json:"related_port"`
	UsernameFragment string                     `protobuf:"bytes,12,opt,name=username_fragment,json=usernameFragment,proto3" json:"username_fragment"`
	TcpType          IceTcpCandidateType        `protobuf:"varint,13,opt,name=tcp_type,json=tcpType,proto3,enum=livekit.proto.IceTcpCandidateType" json:"tcp_type"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *IceCandidateStats) Reset() {
	*x = IceCandidateStats{}
	mi := &file_stats_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IceCandidateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceCandidateStats) ProtoMessage() {}

func (x *IceCandidateStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceCandidateStats.ProtoReflect.Descriptor instead.
func (*IceCandidateStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{18}
}

func (x *IceCandidateStats) GetTransportId() string {
	if x != nil {
		return x.TransportId
	}
	return ""
}

func (x *IceCandidateStats) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *IceCandidateStats) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *IceCandidateStats) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *IceCandidateStats) GetCandidateType() IceCandidateType {
	if x != nil {
		return x.CandidateType
	}
	return IceCandidateType_HOST
}

func (x *IceCandidateStats) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *IceCandidateStats) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *IceCandidateStats) GetRelayProtocol() IceServerTransportProtocol {
	if x != nil {
		return x.RelayProtocol
	}
	return IceServerTransportProtocol_TRANSPORT_UDP
}

func (x *IceCandidateStats) GetFoundation() string {
	if x != nil {
		return x.Foundation
	}
	return ""
}

func (x *IceCandidateStats) GetRelatedAddress() string {
	if x != nil {
		return x.RelatedAddress
	}
	return ""
}

func (x *IceCandidateStats) GetRelatedPort() int32 {
	if x != nil {
		return x.RelatedPort
	}
	return 0
}

func (x *IceCandidateStats) GetUsernameFragment() string {
	if x != nil {
		return x.UsernameFragment
	}
	return ""
}

func (x *IceCandidateStats) GetTcpType() IceTcpCandidateType {
	if x != nil {
		return x.TcpType
	}
	return IceTcpCandidateType_CANDIDATE_ACTIVE
}

type CertificateStats struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Fingerprint          string                 `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint"`
	FingerprintAlgorithm string                 `protobuf:"bytes,2,opt,name=fingerprint_algorithm,json=fingerprintAlgorithm,proto3" json:"fingerprint_algorithm"`
	Base64Certificate    string                 `protobuf:"bytes,3,opt,name=base64_certificate,json=base64Certificate,proto3" json:"base64_certificate"`
	IssuerCertificateId  string                 `protobuf:"bytes,4,opt,name=issuer_certificate_id,json=issuerCertificateId,proto3" json:"issuer_certificate_id"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CertificateStats) Reset() {
	*x = CertificateStats{}
	mi := &file_stats_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateStats) ProtoMessage() {}

func (x *CertificateStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateStats.ProtoReflect.Descriptor instead.
func (*CertificateStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{19}
}

func (x *CertificateStats) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *CertificateStats) GetFingerprintAlgorithm() string {
	if x != nil {
		return x.FingerprintAlgorithm
	}
	return ""
}

func (x *CertificateStats) GetBase64Certificate() string {
	if x != nil {
		return x.Base64Certificate
	}
	return ""
}

func (x *CertificateStats) GetIssuerCertificateId() string {
	if x != nil {
		return x.IssuerCertificateId
	}
	return ""
}

type RtcStats_Codec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rtc           *RtcStatsData          `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Codec         *CodecStats            `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_Codec) Reset() {
	*x = RtcStats_Codec{}
	mi := &file_stats_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_Codec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_Codec) ProtoMessage() {}

func (x *RtcStats_Codec) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_Codec.ProtoReflect.Descriptor instead.
func (*RtcStats_Codec) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RtcStats_Codec) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_Codec) GetCodec() *CodecStats {
	if x != nil {
		return x.Codec
	}
	return nil
}

type RtcStats_InboundRtp struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Rtc           *RtcStatsData           `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Stream        *RtpStreamStats         `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream"`
	Received      *ReceivedRtpStreamStats `protobuf:"bytes,3,opt,name=received,proto3" json:"received"`
	Inbound       *InboundRtpStreamStats  `protobuf:"bytes,4,opt,name=inbound,proto3" json:"inbound"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_InboundRtp) Reset() {
	*x = RtcStats_InboundRtp{}
	mi := &file_stats_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_InboundRtp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_InboundRtp) ProtoMessage() {}

func (x *RtcStats_InboundRtp) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_InboundRtp.ProtoReflect.Descriptor instead.
func (*RtcStats_InboundRtp) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RtcStats_InboundRtp) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_InboundRtp) GetStream() *RtpStreamStats {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *RtcStats_InboundRtp) GetReceived() *ReceivedRtpStreamStats {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *RtcStats_InboundRtp) GetInbound() *InboundRtpStreamStats {
	if x != nil {
		return x.Inbound
	}
	return nil
}

type RtcStats_OutboundRtp struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Rtc           *RtcStatsData           `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Stream        *RtpStreamStats         `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream"`
	Sent          *SentRtpStreamStats     `protobuf:"bytes,3,opt,name=sent,proto3" json:"sent"`
	Outbound      *OutboundRtpStreamStats `protobuf:"bytes,4,opt,name=outbound,proto3" json:"outbound"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_OutboundRtp) Reset() {
	*x = RtcStats_OutboundRtp{}
	mi := &file_stats_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_OutboundRtp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_OutboundRtp) ProtoMessage() {}

func (x *RtcStats_OutboundRtp) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_OutboundRtp.ProtoReflect.Descriptor instead.
func (*RtcStats_OutboundRtp) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RtcStats_OutboundRtp) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_OutboundRtp) GetStream() *RtpStreamStats {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *RtcStats_OutboundRtp) GetSent() *SentRtpStreamStats {
	if x != nil {
		return x.Sent
	}
	return nil
}

func (x *RtcStats_OutboundRtp) GetOutbound() *OutboundRtpStreamStats {
	if x != nil {
		return x.Outbound
	}
	return nil
}

type RtcStats_RemoteInboundRtp struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Rtc           *RtcStatsData                `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Stream        *RtpStreamStats              `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream"`
	Received      *ReceivedRtpStreamStats      `protobuf:"bytes,3,opt,name=received,proto3" json:"received"`
	RemoteInbound *RemoteInboundRtpStreamStats `protobuf:"bytes,4,opt,name=remote_inbound,json=remoteInbound,proto3" json:"remote_inbound"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_RemoteInboundRtp) Reset() {
	*x = RtcStats_RemoteInboundRtp{}
	mi := &file_stats_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_RemoteInboundRtp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_RemoteInboundRtp) ProtoMessage() {}

func (x *RtcStats_RemoteInboundRtp) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_RemoteInboundRtp.ProtoReflect.Descriptor instead.
func (*RtcStats_RemoteInboundRtp) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RtcStats_RemoteInboundRtp) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_RemoteInboundRtp) GetStream() *RtpStreamStats {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *RtcStats_RemoteInboundRtp) GetReceived() *ReceivedRtpStreamStats {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *RtcStats_RemoteInboundRtp) GetRemoteInbound() *RemoteInboundRtpStreamStats {
	if x != nil {
		return x.RemoteInbound
	}
	return nil
}

type RtcStats_RemoteOutboundRtp struct {
	state          protoimpl.MessageState        `protogen:"open.v1"`
	Rtc            *RtcStatsData                 `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Stream         *RtpStreamStats               `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream"`
	Sent           *SentRtpStreamStats           `protobuf:"bytes,3,opt,name=sent,proto3" json:"sent"`
	RemoteOutbound *RemoteOutboundRtpStreamStats `protobuf:"bytes,4,opt,name=remote_outbound,json=remoteOutbound,proto3" json:"remote_outbound"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RtcStats_RemoteOutboundRtp) Reset() {
	*x = RtcStats_RemoteOutboundRtp{}
	mi := &file_stats_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_RemoteOutboundRtp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_RemoteOutboundRtp) ProtoMessage() {}

func (x *RtcStats_RemoteOutboundRtp) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_RemoteOutboundRtp.ProtoReflect.Descriptor instead.
func (*RtcStats_RemoteOutboundRtp) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RtcStats_RemoteOutboundRtp) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_RemoteOutboundRtp) GetStream() *RtpStreamStats {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *RtcStats_RemoteOutboundRtp) GetSent() *SentRtpStreamStats {
	if x != nil {
		return x.Sent
	}
	return nil
}

func (x *RtcStats_RemoteOutboundRtp) GetRemoteOutbound() *RemoteOutboundRtpStreamStats {
	if x != nil {
		return x.RemoteOutbound
	}
	return nil
}

type RtcStats_MediaSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rtc           *RtcStatsData          `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Source        *MediaSourceStats      `protobuf:"bytes,2,opt,name=source,proto3" json:"source"`
	Audio         *AudioSourceStats      `protobuf:"bytes,3,opt,name=audio,proto3" json:"audio"`
	Video         *VideoSourceStats      `protobuf:"bytes,4,opt,name=video,proto3" json:"video"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_MediaSource) Reset() {
	*x = RtcStats_MediaSource{}
	mi := &file_stats_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_MediaSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_MediaSource) ProtoMessage() {}

func (x *RtcStats_MediaSource) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_MediaSource.ProtoReflect.Descriptor instead.
func (*RtcStats_MediaSource) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RtcStats_MediaSource) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_MediaSource) GetSource() *MediaSourceStats {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RtcStats_MediaSource) GetAudio() *AudioSourceStats {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *RtcStats_MediaSource) GetVideo() *VideoSourceStats {
	if x != nil {
		return x.Video
	}
	return nil
}

type RtcStats_MediaPlayout struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rtc           *RtcStatsData          `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	AudioPlayout  *AudioPlayoutStats     `protobuf:"bytes,2,opt,name=audio_playout,json=audioPlayout,proto3" json:"audio_playout"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_MediaPlayout) Reset() {
	*x = RtcStats_MediaPlayout{}
	mi := &file_stats_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_MediaPlayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_MediaPlayout) ProtoMessage() {}

func (x *RtcStats_MediaPlayout) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_MediaPlayout.ProtoReflect.Descriptor instead.
func (*RtcStats_MediaPlayout) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 6}
}

func (x *RtcStats_MediaPlayout) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_MediaPlayout) GetAudioPlayout() *AudioPlayoutStats {
	if x != nil {
		return x.AudioPlayout
	}
	return nil
}

type RtcStats_PeerConnection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rtc           *RtcStatsData          `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Pc            *PeerConnectionStats   `protobuf:"bytes,2,opt,name=pc,proto3" json:"pc"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_PeerConnection) Reset() {
	*x = RtcStats_PeerConnection{}
	mi := &file_stats_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_PeerConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_PeerConnection) ProtoMessage() {}

func (x *RtcStats_PeerConnection) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_PeerConnection.ProtoReflect.Descriptor instead.
func (*RtcStats_PeerConnection) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 7}
}

func (x *RtcStats_PeerConnection) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_PeerConnection) GetPc() *PeerConnectionStats {
	if x != nil {
		return x.Pc
	}
	return nil
}

type RtcStats_DataChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rtc           *RtcStatsData          `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Dc            *DataChannelStats      `protobuf:"bytes,2,opt,name=dc,proto3" json:"dc"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_DataChannel) Reset() {
	*x = RtcStats_DataChannel{}
	mi := &file_stats_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_DataChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_DataChannel) ProtoMessage() {}

func (x *RtcStats_DataChannel) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_DataChannel.ProtoReflect.Descriptor instead.
func (*RtcStats_DataChannel) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 8}
}

func (x *RtcStats_DataChannel) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_DataChannel) GetDc() *DataChannelStats {
	if x != nil {
		return x.Dc
	}
	return nil
}

type RtcStats_Transport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rtc           *RtcStatsData          `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Transport     *TransportStats        `protobuf:"bytes,2,opt,name=transport,proto3" json:"transport"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_Transport) Reset() {
	*x = RtcStats_Transport{}
	mi := &file_stats_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_Transport) ProtoMessage() {}

func (x *RtcStats_Transport) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_Transport.ProtoReflect.Descriptor instead.
func (*RtcStats_Transport) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 9}
}

func (x *RtcStats_Transport) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_Transport) GetTransport() *TransportStats {
	if x != nil {
		return x.Transport
	}
	return nil
}

type RtcStats_CandidatePair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rtc           *RtcStatsData          `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	CandidatePair *CandidatePairStats    `protobuf:"bytes,2,opt,name=candidate_pair,json=candidatePair,proto3" json:"candidate_pair"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_CandidatePair) Reset() {
	*x = RtcStats_CandidatePair{}
	mi := &file_stats_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_CandidatePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_CandidatePair) ProtoMessage() {}

func (x *RtcStats_CandidatePair) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_CandidatePair.ProtoReflect.Descriptor instead.
func (*RtcStats_CandidatePair) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 10}
}

func (x *RtcStats_CandidatePair) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_CandidatePair) GetCandidatePair() *CandidatePairStats {
	if x != nil {
		return x.CandidatePair
	}
	return nil
}

type RtcStats_LocalCandidate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rtc           *RtcStatsData          `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Candidate     *IceCandidateStats     `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_LocalCandidate) Reset() {
	*x = RtcStats_LocalCandidate{}
	mi := &file_stats_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_LocalCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_LocalCandidate) ProtoMessage() {}

func (x *RtcStats_LocalCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_LocalCandidate.ProtoReflect.Descriptor instead.
func (*RtcStats_LocalCandidate) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 11}
}

func (x *RtcStats_LocalCandidate) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_LocalCandidate) GetCandidate() *IceCandidateStats {
	if x != nil {
		return x.Candidate
	}
	return nil
}

type RtcStats_RemoteCandidate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rtc           *RtcStatsData          `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Candidate     *IceCandidateStats     `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_RemoteCandidate) Reset() {
	*x = RtcStats_RemoteCandidate{}
	mi := &file_stats_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_RemoteCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_RemoteCandidate) ProtoMessage() {}

func (x *RtcStats_RemoteCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_RemoteCandidate.ProtoReflect.Descriptor instead.
func (*RtcStats_RemoteCandidate) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 12}
}

func (x *RtcStats_RemoteCandidate) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_RemoteCandidate) GetCandidate() *IceCandidateStats {
	if x != nil {
		return x.Candidate
	}
	return nil
}

type RtcStats_Certificate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rtc           *RtcStatsData          `protobuf:"bytes,1,opt,name=rtc,proto3" json:"rtc"`
	Certificate   *CertificateStats      `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_Certificate) Reset() {
	*x = RtcStats_Certificate{}
	mi := &file_stats_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_Certificate) ProtoMessage() {}

func (x *RtcStats_Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_Certificate.ProtoReflect.Descriptor instead.
func (*RtcStats_Certificate) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 13}
}

func (x *RtcStats_Certificate) GetRtc() *RtcStatsData {
	if x != nil {
		return x.Rtc
	}
	return nil
}

func (x *RtcStats_Certificate) GetCertificate() *CertificateStats {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type RtcStats_Track struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RtcStats_Track) Reset() {
	*x = RtcStats_Track{}
	mi := &file_stats_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RtcStats_Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtcStats_Track) ProtoMessage() {}

func (x *RtcStats_Track) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtcStats_Track.ProtoReflect.Descriptor instead.
func (*RtcStats_Track) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0, 14}
}

var File_stats_proto protoreflect.FileDescriptor

var file_stats_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x1b, 0x0a,
	0x08, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x12, 0x45, 0x0a, 0x0b, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x74, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x12, 0x48, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x72, 0x74, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x74, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74,
	0x70, 0x12, 0x58, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x72, 0x74, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x12, 0x5b, 0x0a, 0x13, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72,
	0x74, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x74, 0x70, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x51, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x41, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x4e, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x51, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x1a, 0x67, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74, 0x63,
	0x12, 0x2f, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x1a, 0xf5, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70,
	0x12, 0x2d, 0x0a, 0x03, 0x72, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74, 0x63, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0xed, 0x01, 0x0a, 0x0b, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x74, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74, 0x63, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x35, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x6e, 0x74, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x8e, 0x02, 0x0a, 0x10, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x12, 0x2d,
	0x0a, 0x03, 0x72, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74, 0x63, 0x12, 0x35, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74,
	0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x86, 0x02, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70,
	0x12, 0x2d, 0x0a, 0x03, 0x72, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74, 0x63, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x1a, 0xe3, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72,
	0x74, 0x63, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x1a, 0x84, 0x01, 0x0a, 0x0c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x74,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74, 0x63, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x1a, 0x73, 0x0a, 0x0e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74,
	0x63, 0x12, 0x32, 0x0a, 0x02, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x02, 0x70, 0x63, 0x1a, 0x6d, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03,
	0x72, 0x74, 0x63, 0x12, 0x2f, 0x0a, 0x02, 0x64, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x02, 0x64, 0x63, 0x1a, 0x77, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74, 0x63,
	0x12, 0x3b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x88, 0x01,
	0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x2d, 0x0a, 0x03, 0x72, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74, 0x63, 0x12, 0x48,
	0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x7f, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x74,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74, 0x63, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x63, 0x65,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x80, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a,
	0x03, 0x72, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74, 0x63, 0x12, 0x3e, 0x0a, 0x09,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x7f, 0x0a, 0x0b,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x72,
	0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x72, 0x74, 0x63, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x07, 0x0a,
	0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x3c, 0x0a, 0x0c, 0x52, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xce, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x64,
	0x70, 0x5f, 0x66, 0x6d, 0x74, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x64, 0x70, 0x46, 0x6d, 0x74, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x76,
	0x0a, 0x0e, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x73, 0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22, 0xe9, 0x13, 0x0a, 0x15, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f,
	0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6b,
	0x65, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x71, 0x70, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x71, 0x70, 0x53, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32,
	0x0a, 0x15, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x66, 0x65, 0x63, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x66, 0x65, 0x63,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x66, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x66, 0x65, 0x63,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x66, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x66, 0x65, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6e, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x69, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x69, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x6a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x6a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x61, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x61, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x49, 0x0a, 0x21, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44,
	0x65, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x12, 0x52, 0x0a, 0x26, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x22, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1e, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x74, 0x78, 0x5f, 0x73, 0x73, 0x72, 0x63, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x74, 0x78, 0x53, 0x73, 0x72, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x63, 0x5f, 0x73,
	0x73, 0x72, 0x63, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x65, 0x63, 0x53, 0x73,
	0x72, 0x63, 0x22, 0x56, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x74, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x22, 0xc9, 0x0b, 0x0a, 0x16, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x74, 0x78, 0x5f, 0x73, 0x73, 0x72, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x74, 0x78, 0x53, 0x73, 0x72, 0x63, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x75, 0x67, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x75,
	0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6b, 0x65, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x71, 0x70, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x71, 0x70, 0x53, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x62, 0x0a, 0x19, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x17, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x87, 0x01, 0x0a, 0x1c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x25, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6e, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x66, 0x69, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x69, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x69,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x4d, 0x0a, 0x1f, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72,
	0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x72, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xd8, 0x03, 0x0a, 0x10,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x65, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x12,
	0x3f, 0x0a, 0x1c, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x65, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xbd, 0x02,
	0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x79, 0x0a,
	0x13, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22, 0xcb, 0x02, 0x0a, 0x10, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x36, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x9a, 0x06, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x31, 0x0a,
	0x08, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x40, 0x0a, 0x0a, 0x64, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x74, 0x6c, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x64, 0x74, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x74, 0x6c, 0x73, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x74, 0x6c, 0x73, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x74, 0x6c, 0x73, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x08, 0x64, 0x74, 0x6c, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x72, 0x74, 0x70, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x72, 0x74, 0x70, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x1f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x22, 0xb9, 0x08, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x63, 0x65, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x72, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x19, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x4f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x22,
	0xa0, 0x04, 0x0a, 0x11, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x63, 0x65, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x50, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x63, 0x65, 0x54, 0x63, 0x70, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x74, 0x63, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x10, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x2d,
	0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x2a, 0x51, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x43, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x43, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x43, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x72, 0x0a, 0x17, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x07, 0x49, 0x63, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x9f, 0x01,
	0x0a, 0x12, 0x44, 0x74, 0x6c, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x54, 0x4c, 0x53, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x44, 0x54, 0x4c, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44,
	0x54, 0x4c, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x54, 0x4c,
	0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x54, 0x4c, 0x53, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a,
	0xd4, 0x01, 0x0a, 0x11, 0x49, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x3e, 0x0a, 0x08, 0x44, 0x74, 0x6c, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x4c, 0x53, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x4c, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x54, 0x4c, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0x75, 0x0a, 0x15, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x49, 0x52,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x49,
	0x52, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x3d, 0x0a,
	0x10, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x52, 0x46, 0x4c, 0x58, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x46, 0x4c, 0x58, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x03, 0x2a, 0x55, 0x0a, 0x1a,
	0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4c,
	0x53, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x13, 0x49, 0x63, 0x65, 0x54, 0x63, 0x70, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41,
	0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x44, 0x49,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4f, 0x10, 0x02, 0x42, 0x40, 0x5a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64,
	0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2d, 0x72, 0x74, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0xaa, 0x02, 0x0d, 0x4c, 0x69,
	0x76, 0x65, 0x4b, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_stats_proto_rawDescOnce sync.Once
	file_stats_proto_rawDescData = file_stats_proto_rawDesc
)

func file_stats_proto_rawDescGZIP() []byte {
	file_stats_proto_rawDescOnce.Do(func() {
		file_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_stats_proto_rawDescData)
	})
	return file_stats_proto_rawDescData
}

var file_stats_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_stats_proto_goTypes = []any{
	(DataChannelState)(0),                // 0: livekit.proto.DataChannelState
	(QualityLimitationReason)(0),         // 1: livekit.proto.QualityLimitationReason
	(IceRole)(0),                         // 2: livekit.proto.IceRole
	(DtlsTransportState)(0),              // 3: livekit.proto.DtlsTransportState
	(IceTransportState)(0),               // 4: livekit.proto.IceTransportState
	(DtlsRole)(0),                        // 5: livekit.proto.DtlsRole
	(IceCandidatePairState)(0),           // 6: livekit.proto.IceCandidatePairState
	(IceCandidateType)(0),                // 7: livekit.proto.IceCandidateType
	(IceServerTransportProtocol)(0),      // 8: livekit.proto.IceServerTransportProtocol
	(IceTcpCandidateType)(0),             // 9: livekit.proto.IceTcpCandidateType
	(*RtcStats)(nil),                     // 10: livekit.proto.RtcStats
	(*RtcStatsData)(nil),                 // 11: livekit.proto.RtcStatsData
	(*CodecStats)(nil),                   // 12: livekit.proto.CodecStats
	(*RtpStreamStats)(nil),               // 13: livekit.proto.RtpStreamStats
	(*ReceivedRtpStreamStats)(nil),       // 14: livekit.proto.ReceivedRtpStreamStats
	(*InboundRtpStreamStats)(nil),        // 15: livekit.proto.InboundRtpStreamStats
	(*SentRtpStreamStats)(nil),           // 16: livekit.proto.SentRtpStreamStats
	(*OutboundRtpStreamStats)(nil),       // 17: livekit.proto.OutboundRtpStreamStats
	(*RemoteInboundRtpStreamStats)(nil),  // 18: livekit.proto.RemoteInboundRtpStreamStats
	(*RemoteOutboundRtpStreamStats)(nil), // 19: livekit.proto.RemoteOutboundRtpStreamStats
	(*MediaSourceStats)(nil),             // 20: livekit.proto.MediaSourceStats
	(*AudioSourceStats)(nil),             // 21: livekit.proto.AudioSourceStats
	(*VideoSourceStats)(nil),             // 22: livekit.proto.VideoSourceStats
	(*AudioPlayoutStats)(nil),            // 23: livekit.proto.AudioPlayoutStats
	(*PeerConnectionStats)(nil),          // 24: livekit.proto.PeerConnectionStats
	(*DataChannelStats)(nil),             // 25: livekit.proto.DataChannelStats
	(*TransportStats)(nil),               // 26: livekit.proto.TransportStats
	(*CandidatePairStats)(nil),           // 27: livekit.proto.CandidatePairStats
	(*IceCandidateStats)(nil),            // 28: livekit.proto.IceCandidateStats
	(*CertificateStats)(nil),             // 29: livekit.proto.CertificateStats
	(*RtcStats_Codec)(nil),               // 30: livekit.proto.RtcStats.Codec
	(*RtcStats_InboundRtp)(nil),          // 31: livekit.proto.RtcStats.InboundRtp
	(*RtcStats_OutboundRtp)(nil),         // 32: livekit.proto.RtcStats.OutboundRtp
	(*RtcStats_RemoteInboundRtp)(nil),    // 33: livekit.proto.RtcStats.RemoteInboundRtp
	(*RtcStats_RemoteOutboundRtp)(nil),   // 34: livekit.proto.RtcStats.RemoteOutboundRtp
	(*RtcStats_MediaSource)(nil),         // 35: livekit.proto.RtcStats.MediaSource
	(*RtcStats_MediaPlayout)(nil),        // 36: livekit.proto.RtcStats.MediaPlayout
	(*RtcStats_PeerConnection)(nil),      // 37: livekit.proto.RtcStats.PeerConnection
	(*RtcStats_DataChannel)(nil),         // 38: livekit.proto.RtcStats.DataChannel
	(*RtcStats_Transport)(nil),           // 39: livekit.proto.RtcStats.Transport
	(*RtcStats_CandidatePair)(nil),       // 40: livekit.proto.RtcStats.CandidatePair
	(*RtcStats_LocalCandidate)(nil),      // 41: livekit.proto.RtcStats.LocalCandidate
	(*RtcStats_RemoteCandidate)(nil),     // 42: livekit.proto.RtcStats.RemoteCandidate
	(*RtcStats_Certificate)(nil),         // 43: livekit.proto.RtcStats.Certificate
	(*RtcStats_Track)(nil),               // 44: livekit.proto.RtcStats.Track
	nil,                                  // 45: livekit.proto.OutboundRtpStreamStats.QualityLimitationDurationsEntry
}
var file_stats_proto_depIdxs = []int32{
	30, // 0: livekit.proto.RtcStats.codec:type_name -> livekit.proto.RtcStats.Codec
	31, // 1: livekit.proto.RtcStats.inbound_rtp:type_name -> livekit.proto.RtcStats.InboundRtp
	32, // 2: livekit.proto.RtcStats.outbound_rtp:type_name -> livekit.proto.RtcStats.OutboundRtp
	33, // 3: livekit.proto.RtcStats.remote_inbound_rtp:type_name -> livekit.proto.RtcStats.RemoteInboundRtp
	34, // 4: livekit.proto.RtcStats.remote_outbound_rtp:type_name -> livekit.proto.RtcStats.RemoteOutboundRtp
	35, // 5: livekit.proto.RtcStats.media_source:type_name -> livekit.proto.RtcStats.MediaSource
	36, // 6: livekit.proto.RtcStats.media_playout:type_name -> livekit.proto.RtcStats.MediaPlayout
	37, // 7: livekit.proto.RtcStats.peer_connection:type_name -> livekit.proto.RtcStats.PeerConnection
	38, // 8: livekit.proto.RtcStats.data_channel:type_name -> livekit.proto.RtcStats.DataChannel
	39, // 9: livekit.proto.RtcStats.transport:type_name -> livekit.proto.RtcStats.Transport
	40, // 10: livekit.proto.RtcStats.candidate_pair:type_name -> livekit.proto.RtcStats.CandidatePair
	41, // 11: livekit.proto.RtcStats.local_candidate:type_name -> livekit.proto.RtcStats.LocalCandidate
	42, // 12: livekit.proto.RtcStats.remote_candidate:type_name -> livekit.proto.RtcStats.RemoteCandidate
	43, // 13: livekit.proto.RtcStats.certificate:type_name -> livekit.proto.RtcStats.Certificate
	44, // 14: livekit.proto.RtcStats.track:type_name -> livekit.proto.RtcStats.Track
	1,  // 15: livekit.proto.OutboundRtpStreamStats.quality_limitation_reason:type_name -> livekit.proto.QualityLimitationReason
	45, // 16: livekit.proto.OutboundRtpStreamStats.quality_limitation_durations:type_name -> livekit.proto.OutboundRtpStreamStats.QualityLimitationDurationsEntry
	0,  // 17: livekit.proto.DataChannelStats.state:type_name -> livekit.proto.DataChannelState
	2,  // 18: livekit.proto.TransportStats.ice_role:type_name -> livekit.proto.IceRole
	3,  // 19: livekit.proto.TransportStats.dtls_state:type_name -> livekit.proto.DtlsTransportState
	4,  // 20: livekit.proto.TransportStats.ice_state:type_name -> livekit.proto.IceTransportState
	5,  // 21: livekit.proto.TransportStats.dtls_role:type_name -> livekit.proto.DtlsRole
	6,  // 22: livekit.proto.CandidatePairStats.state:type_name -> livekit.proto.IceCandidatePairState
	7,  // 23: livekit.proto.IceCandidateStats.candidate_type:type_name -> livekit.proto.IceCandidateType
	8,  // 24: livekit.proto.IceCandidateStats.relay_protocol:type_name -> livekit.proto.IceServerTransportProtocol
	9,  // 25: livekit.proto.IceCandidateStats.tcp_type:type_name -> livekit.proto.IceTcpCandidateType
	11, // 26: livekit.proto.RtcStats.Codec.rtc:type_name -> livekit.proto.RtcStatsData
	12, // 27: livekit.proto.RtcStats.Codec.codec:type_name -> livekit.proto.CodecStats
	11, // 28: livekit.proto.RtcStats.InboundRtp.rtc:type_name -> livekit.proto.RtcStatsData
	13, // 29: livekit.proto.RtcStats.InboundRtp.stream:type_name -> livekit.proto.RtpStreamStats
	14, // 30: livekit.proto.RtcStats.InboundRtp.received:type_name -> livekit.proto.ReceivedRtpStreamStats
	15, // 31: livekit.proto.RtcStats.InboundRtp.inbound:type_name -> livekit.proto.InboundRtpStreamStats
	11, // 32: livekit.proto.RtcStats.OutboundRtp.rtc:type_name -> livekit.proto.RtcStatsData
	13, // 33: livekit.proto.RtcStats.OutboundRtp.stream:type_name -> livekit.proto.RtpStreamStats
	16, // 34: livekit.proto.RtcStats.OutboundRtp.sent:type_name -> livekit.proto.SentRtpStreamStats
	17, // 35: livekit.proto.RtcStats.OutboundRtp.outbound:type_name -> livekit.proto.OutboundRtpStreamStats
	11, // 36: livekit.proto.RtcStats.RemoteInboundRtp.rtc:type_name -> livekit.proto.RtcStatsData
	13, // 37: livekit.proto.RtcStats.RemoteInboundRtp.stream:type_name -> livekit.proto.RtpStreamStats
	14, // 38: livekit.proto.RtcStats.RemoteInboundRtp.received:type_name -> livekit.proto.ReceivedRtpStreamStats
	18, // 39: livekit.proto.RtcStats.RemoteInboundRtp.remote_inbound:type_name -> livekit.proto.RemoteInboundRtpStreamStats
	11, // 40: livekit.proto.RtcStats.RemoteOutboundRtp.rtc:type_name -> livekit.proto.RtcStatsData
	13, // 41: livekit.proto.RtcStats.RemoteOutboundRtp.stream:type_name -> livekit.proto.RtpStreamStats
	16, // 42: livekit.proto.RtcStats.RemoteOutboundRtp.sent:type_name -> livekit.proto.SentRtpStreamStats
	19, // 43: livekit.proto.RtcStats.RemoteOutboundRtp.remote_outbound:type_name -> livekit.proto.RemoteOutboundRtpStreamStats
	11, // 44: livekit.proto.RtcStats.MediaSource.rtc:type_name -> livekit.proto.RtcStatsData
	20, // 45: livekit.proto.RtcStats.MediaSource.source:type_name -> livekit.proto.MediaSourceStats
	21, // 46: livekit.proto.RtcStats.MediaSource.audio:type_name -> livekit.proto.AudioSourceStats
	22, // 47: livekit.proto.RtcStats.MediaSource.video:type_name -> livekit.proto.VideoSourceStats
	11, // 48: livekit.proto.RtcStats.MediaPlayout.rtc:type_name -> livekit.proto.RtcStatsData
	23, // 49: livekit.proto.RtcStats.MediaPlayout.audio_playout:type_name -> livekit.proto.AudioPlayoutStats
	11, // 50: livekit.proto.RtcStats.PeerConnection.rtc:type_name -> livekit.proto.RtcStatsData
	24, // 51: livekit.proto.RtcStats.PeerConnection.pc:type_name -> livekit.proto.PeerConnectionStats
	11, // 52: livekit.proto.RtcStats.DataChannel.rtc:type_name -> livekit.proto.RtcStatsData
	25, // 53: livekit.proto.RtcStats.DataChannel.dc:type_name -> livekit.proto.DataChannelStats
	11, // 54: livekit.proto.RtcStats.Transport.rtc:type_name -> livekit.proto.RtcStatsData
	26, // 55: livekit.proto.RtcStats.Transport.transport:type_name -> livekit.proto.TransportStats
	11, // 56: livekit.proto.RtcStats.CandidatePair.rtc:type_name -> livekit.proto.RtcStatsData
	27, // 57: livekit.proto.RtcStats.CandidatePair.candidate_pair:type_name -> livekit.proto.CandidatePairStats
	11, // 58: livekit.proto.RtcStats.LocalCandidate.rtc:type_name -> livekit.proto.RtcStatsData
	28, // 59: livekit.proto.RtcStats.LocalCandidate.candidate:type_name -> livekit.proto.IceCandidateStats
	11, // 60: livekit.proto.RtcStats.RemoteCandidate.rtc:type_name -> livekit.proto.RtcStatsData
	28, // 61: livekit.proto.RtcStats.RemoteCandidate.candidate:type_name -> livekit.proto.IceCandidateStats
	11, // 62: livekit.proto.RtcStats.Certificate.rtc:type_name -> livekit.proto.RtcStatsData
	29, // 63: livekit.proto.RtcStats.Certificate.certificate:type_name -> livekit.proto.CertificateStats
	64, // [64:64] is the sub-list for method output_type
	64, // [64:64] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_stats_proto_init() }
func file_stats_proto_init() {
	if File_stats_proto != nil {
		return
	}
	file_stats_proto_msgTypes[0].OneofWrappers = []any{
		(*RtcStats_Codec_)(nil),
		(*RtcStats_InboundRtp_)(nil),
		(*RtcStats_OutboundRtp_)(nil),
		(*RtcStats_RemoteInboundRtp_)(nil),
		(*RtcStats_RemoteOutboundRtp_)(nil),
		(*RtcStats_MediaSource_)(nil),
		(*RtcStats_MediaPlayout_)(nil),
		(*RtcStats_PeerConnection_)(nil),
		(*RtcStats_DataChannel_)(nil),
		(*RtcStats_Transport_)(nil),
		(*RtcStats_CandidatePair_)(nil),
		(*RtcStats_LocalCandidate_)(nil),
		(*RtcStats_RemoteCandidate_)(nil),
		(*RtcStats_Certificate_)(nil),
		(*RtcStats_Track_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stats_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stats_proto_goTypes,
		DependencyIndexes: file_stats_proto_depIdxs,
		EnumInfos:         file_stats_proto_enumTypes,
		MessageInfos:      file_stats_proto_msgTypes,
	}.Build()
	File_stats_proto = out.File
	file_stats_proto_rawDesc = nil
	file_stats_proto_goTypes = nil
	file_stats_proto_depIdxs = nil
}
